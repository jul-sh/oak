#!/bin/bash
#
# Build browser introspection client.

#######################################
# Copies a directory without overwriting identical files at the destination.
# Arguments:
#   A source directory, a destination directory.
#######################################
function copy_directory_nondestructively() {
  local SOURCE_DIR="$1"
  local DESTINTAION_DIR="$2"

  for file in $( (cd "${SOURCE_DIR}" && find . -type f) ); do
    local SOURCE_FILE="${SOURCE_DIR}/${file}"
    local DESTINATION_FILE="${DESTINTAION_DIR}/${file}"
    if ! cmp --silent "${SOURCE_FILE}" "${DESTINATION_FILE}"; then
      mkdir -p "$(dirname "${DESTINATION_FILE}")"
      cp -f "${SOURCE_FILE}" "${DESTINATION_FILE}"
    fi
  done
}

# Install npm modules if needed
readonly CURRENT_PACKAGE_LOCK="./package-lock.json"
readonly LAST_INSTALLED_PACKAGE_LOCK="./last-install-package-lock.json"
if ! cmp --silent "$CURRENT_PACKAGE_LOCK" "$LAST_INSTALLED_PACKAGE_LOCK"; then
  npm ci
fi

# Generate JavaScript code from the introspection_events proto
readonly PROTOC_GEN_TS_PATH="./node_modules/.bin/protoc-gen-ts"
readonly PROTO_TMP_OUT_DIR="./protoc_tmp_out"
readonly PROTO_OUT_DIR="./protoc_out"

mkdir -p "${PROTO_TMP_OUT_DIR}"
mkdir -p "${PROTO_OUT_DIR}"

# Initially write the generated code to a temporary directory.
protoc \
    --proto_path=../../ \
    --plugin="protoc-gen-ts=${PROTOC_GEN_TS_PATH}" \
    --js_out="import_style=commonjs,binary:${PROTO_TMP_OUT_DIR}" \
    --ts_out="${PROTO_TMP_OUT_DIR}" \
    ../../proto/introspection_events.proto \
    ../../oak_abi/proto/label.proto

# Copy each generated file into the actual output directory, but do not
# overwrite identical files. Doing this preserves the last modified date,
# allowing for caching of webpack build steps down the line.
copy_directory_nondestructively "${PROTO_TMP_OUT_DIR}" "${PROTO_OUT_DIR}"

# Finally delete the temporary protobuf directory.
rm -rf "${PROTO_TMP_OUT_DIR}"

# Build JavaScript bundle

# Iterate of the source files, and store the most recently modified one in the
# MOST_RECENTLY_CHANGED_SOURCE_FILE variable.
for file in $(find . -type d \( -path "./node_modules" -o -path "./dist" \) -prune -o -type f); do
  if [[ -z "$MOST_RECENTLY_CHANGED_SOURCE_FILE" || "$file" -nt "$MOST_RECENTLY_CHANGED_SOURCE_FILE" ]]; then
    MOST_RECENTLY_CHANGED_SOURCE_FILE="$file"
  fi
done

readonly WEBPACK_OUT_DIR="./dist"
mkdir -p "${WEBPACK_OUT_DIR}"

# Iterate of the output files, and store the least recently modified one in the
# LEAST_RECENTLY_CHANGED_OUTPUT_FILE variable.
for file in $(find "${WEBPACK_OUT_DIR}" -type f); do
  if [[ -z "$LEAST_RECENTLY_CHANGED_OUTPUT_FILE" || "$file" -ot "$LEAST_RECENTLY_CHANGED_OUTPUT_FILE" ]]; then
    LEAST_RECENTLY_CHANGED_OUTPUT_FILE="$file"
  fi
done

# Run webpack only if needed
if [[ "$MOST_RECENTLY_CHANGED_SOURCE_FILE" -nt "$LEAST_RECENTLY_CHANGED_OUTPUT_FILE" ]]; then
  npx webpack --env.NODE_ENV="production" --env.OUTPUT_PATH="${WEBPACK_OUT_DIR}"
fi
