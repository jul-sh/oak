// Generated by protod v0.3.3
//
// Copyright 2021 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Service definition for unary communication with the runtime.
// It accomplishes the same goal as StreamingSession, just with a differnet
// request model. Oak Applications can choose either request model in the
// configuration of the runtime. Eventually we plan to transition all clients to

import {
  bytesField,
  FieldSet,
  fromBytes,
  fromJSON,
  JSON,
  toBytes,
  toJSON,
} from "https://deno.land/x/protod@v0.3.3/mod.ts";

// Links a sequence of messages, declaring them as part of a single a session.
// Note that this byte array is expected to be fixed length, as defined in the
// service implementation. Protobuf unfortunately does not support declaring
export class UnaryRequest {
  body: Uint8Array;
  // the length here.
  session_id: Uint8Array;

  constructor(init: Partial<UnaryRequest>) {
    this.body = init.body ?? new Uint8Array(0);
    this.session_id = init.session_id ?? new Uint8Array(0);
  }

  static fields: FieldSet<UnaryRequest> = {
    body: [1, bytesField],
    session_id: [2, bytesField],
  };

  static fromBytes(bytes: Uint8Array): UnaryRequest {
    return new UnaryRequest(
      fromBytes<UnaryRequest>(bytes, UnaryRequest.fields),
    );
  }

  static fromJSON(json: JSON): UnaryRequest {
    return new UnaryRequest(
      fromJSON<UnaryRequest>(json, UnaryRequest.fields),
    );
  }

  toBytes(): Uint8Array {
    return toBytes<UnaryRequest>(this, UnaryRequest.fields);
  }

  toJSON() {
    return toJSON<UnaryRequest>(this, UnaryRequest.fields);
  }
}

export class UnaryResponse {
  body: Uint8Array;

  constructor(init: Partial<UnaryResponse>) {
    this.body = init.body ?? new Uint8Array(0);
  }

  static fields: FieldSet<UnaryResponse> = {
    body: [1, bytesField],
  };

  static fromBytes(bytes: Uint8Array): UnaryResponse {
    return new UnaryResponse(
      fromBytes<UnaryResponse>(bytes, UnaryResponse.fields),
    );
  }

  static fromJSON(json: JSON): UnaryResponse {
    return new UnaryResponse(
      fromJSON<UnaryResponse>(json, UnaryResponse.fields),
    );
  }

  toBytes(): Uint8Array {
    return toBytes<UnaryResponse>(this, UnaryResponse.fields);
  }

  toJSON() {
    return toJSON<UnaryResponse>(this, UnaryResponse.fields);
  }
}


