import * as jspb from 'https://deno.land/x/deno_google_protobuf/google-protobuf.js';
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.oak.session.unary.v1.UnaryRequest', null, global);
goog.exportSymbol('proto.oak.session.unary.v1.UnaryResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oak.session.unary.v1.UnaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.oak.session.unary.v1.UnaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oak.session.unary.v1.UnaryRequest.displayName = 'proto.oak.session.unary.v1.UnaryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.oak.session.unary.v1.UnaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.oak.session.unary.v1.UnaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.oak.session.unary.v1.UnaryResponse.displayName = 'proto.oak.session.unary.v1.UnaryResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.oak.session.unary.v1.UnaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.oak.session.unary.v1.UnaryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oak.session.unary.v1.UnaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64(),
    sessionId: msg.getSessionId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oak.session.unary.v1.UnaryRequest}
 */
proto.oak.session.unary.v1.UnaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.oak.session.unary.v1.UnaryRequest;
  return proto.oak.session.unary.v1.UnaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oak.session.unary.v1.UnaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oak.session.unary.v1.UnaryRequest}
 */
proto.oak.session.unary.v1.UnaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.oak.session.unary.v1.UnaryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oak.session.unary.v1.UnaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oak.session.unary.v1.UnaryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSessionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.oak.session.unary.v1.UnaryRequest} returns this
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes session_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.getSessionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes session_id = 2;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.getSessionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionId()));
};


/**
 * optional bytes session_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.getSessionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.oak.session.unary.v1.UnaryRequest} returns this
 */
proto.oak.session.unary.v1.UnaryRequest.prototype.setSessionId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.oak.session.unary.v1.UnaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.oak.session.unary.v1.UnaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.oak.session.unary.v1.UnaryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oak.session.unary.v1.UnaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.oak.session.unary.v1.UnaryResponse}
 */
proto.oak.session.unary.v1.UnaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.oak.session.unary.v1.UnaryResponse;
  return proto.oak.session.unary.v1.UnaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.oak.session.unary.v1.UnaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.oak.session.unary.v1.UnaryResponse}
 */
proto.oak.session.unary.v1.UnaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.oak.session.unary.v1.UnaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.oak.session.unary.v1.UnaryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.oak.session.unary.v1.UnaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.oak.session.unary.v1.UnaryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes body = 1;
 * @return {!(string|Uint8Array)}
 */
proto.oak.session.unary.v1.UnaryResponse.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes body = 1;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.oak.session.unary.v1.UnaryResponse.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.oak.session.unary.v1.UnaryResponse.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.oak.session.unary.v1.UnaryResponse} returns this
 */
proto.oak.session.unary.v1.UnaryResponse.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


export const UnaryRequest = proto.oak.session.unary.v1.UnaryRequest;
export const UnaryResponse = proto.oak.session.unary.v1.UnaryResponse;
