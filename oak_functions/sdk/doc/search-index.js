var searchIndex = JSON.parse('{\
"benchmark":{"doc":"Oak Functions benchmark example.","t":[5,0,3,3,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["main","proto","BenchmarkRequest","LookupTest","action","benchmark_request","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","iterations","key","ne","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Action","Lookup","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","ne","to_owned","try_from","try_into","type_id","0"],"q":["benchmark","","benchmark::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","benchmark::proto::benchmark_request","","","","","","","","","","","","","","","","","","benchmark::proto::benchmark_request::Action"],"d":["","","A request to execute a benchmark action a specified number …","Container for the key to use when doing a benchmark lookup.","","Nested message and enum types in <code>BenchmarkRequest</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4],"f":[[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["benchmarkrequest",3]],[[],["lookuptest",3]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["benchmarkrequest",3]],["bool",15]],[[["lookuptest",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["benchmarkrequest",3]],["bool",15]],[[["lookuptest",3]],["bool",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[],["action",4]],[[]],[[]],[[],["usize",15]],[[["action",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["option",4],["u32",15],["wiretype",4],["decodecontext",3]],["result",4,[["decodeerror",3]]]],[[["action",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null],"p":[[3,"BenchmarkRequest"],[3,"LookupTest"],[4,"Action"],[13,"Lookup"]]},\
"fuzzable":{"doc":"Oak Functions fuzzable example.","t":[5,0,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["main","proto","Instruction","Instructions","Panic","ReadRequest","ReportEvent","StorageGetItem","WriteLogMessage","WriteResponse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","instruction","instruction_variant","instructions","into","into","into","into","into","into","into","into","key","label","message","ne","ne","ne","ne","ne","ne","response","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","InstructionVariant","Panic","ReadRequest","ReportEvent","StorageGetItem","WriteLogMessage","WriteResponse","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","ne","to_owned","try_from","try_into","type_id","0","0","0","0","0","0"],"q":["fuzzable","","fuzzable::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fuzzable::proto::instruction","","","","","","","","","","","","","","","","","","","","","","","fuzzable::proto::instruction::InstructionVariant","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nested message and enum types in <code>Instruction</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0,2,1,1,2,3,4,5,6,7,8,6,8,7,1,2,5,6,7,8,5,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,11,12,13,14,15],"f":[[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["instructions",3]],[[],["instruction",3]],[[],["panic",3]],[[],["readrequest",3]],[[],["writeresponse",3]],[[],["storagegetitem",3]],[[],["writelogmessage",3]],[[],["reportevent",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["instructions",3]],["bool",15]],[[["instruction",3]],["bool",15]],[[["panic",3]],["bool",15]],[[["readrequest",3]],["bool",15]],[[["writeresponse",3]],["bool",15]],[[["storagegetitem",3]],["bool",15]],[[["writelogmessage",3]],["bool",15]],[[["reportevent",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["instructions",3]],["bool",15]],[[["instruction",3]],["bool",15]],[[["writeresponse",3]],["bool",15]],[[["storagegetitem",3]],["bool",15]],[[["writelogmessage",3]],["bool",15]],[[["reportevent",3]],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[],["instructionvariant",4]],[[]],[[]],[[],["usize",15]],[[["instructionvariant",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["option",4],["u32",15],["wiretype",4],["decodecontext",3]],["result",4,[["decodeerror",3]]]],[[["instructionvariant",4]],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null],"p":[[3,"Instructions"],[3,"Instruction"],[3,"Panic"],[3,"ReadRequest"],[3,"WriteResponse"],[3,"StorageGetItem"],[3,"WriteLogMessage"],[3,"ReportEvent"],[4,"InstructionVariant"],[13,"Panic"],[13,"ReadRequest"],[13,"WriteResponse"],[13,"StorageGetItem"],[13,"WriteLogMessage"],[13,"ReportEvent"]]},\
"key_value_lookup":{"doc":"Oak Functions key / value lookup example.","t":[5],"n":["main"],"q":["key_value_lookup"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"location_utils":{"doc":"Utilities for finding and comparing longitude- and …","t":[12,3,3,17,3,6,17,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Angle","CellID","DEFAULT_CUTOFF_RADIUS_RADIANS","LatLng","Result","S2_DEFAULT_LEVEL","abs","add","advance","advance_wrap","all_neighbors","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bound_st","bound_uv","cell_id_to_bytes","center_face_siti","center_uv","child_begin","child_begin_at_level","child_end","child_end_at_level","child_iter","child_iter_at_level","child_position","children","clone","clone","clone","clone_into","clone_into","clone_into","cmp","common_ancestor_level","contains","deg","distance","distance_from_begin","edge_neighbors","eq","eq","face","face_ij_orientation","find_cell","find_covering_cells","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_face","from_face_ij","from_face_pos_level","from_token","hash","immediate_parent","inf","intersects","into","into","into","is_face","is_infinite","is_leaf","is_valid","is_valid","lat","level","lng","location_from_bytes","location_from_degrees","location_to_bytes","lsb","max_tile","mul","ne","ne","new","next","next_wrap","normalized","normalized","parent","partial_cmp","partial_cmp","pos","prev","prev_wrap","rad","range_max","range_min","raw_point","to_owned","to_owned","to_owned","to_string","to_token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertex_neighbors"],"q":["location_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Angle represents a 1D angle. The internal representation …","CellID uniquely identifies a cell in the S2 cell …","The default cutoff radius in radians.","","<code>Result&lt;T, Error&gt;</code>","The default level to use for S2 Geometry cells. Higher …","abs returns the absolute value of the angle.","","advance advances or retreats the indicated number of steps …","advance_wrap advances or retreats the indicated number of …","all_neighbors returns all neighbors of this cell at the …","","","","","","","bound_st returns the bound of this CellID in (s,t)-space.","bound_uv returns the bound of this CellID in (u,v)-space.","Converts a <code>CellID</code> to a byte representation.","center_face_siti returns the (face, si, ti) coordinates of …","center_uv returns the center of this CellID in …","child_begin returns the first child in a traversal of the …","child_begin_at_level returns the first cell in a traversal …","child_end returns the first cell after a traversal of the …","child_end_at_level returns the first cell after the last …","","","child_position returns the child position (0..3) of this …","children returns the four immediate children of this cell. …","","","","","","","","common_ancestor_level returns the level of the common …","contains returns true iff the CellID contains oci.","deg returns the angle in degrees.","","distance_from_begin returns the number of steps that this …","edge_neighbors returns the four cells that are adjacent …","","","face returns the cube face for this cell ID, in the range […","face_ij_orientation uses the global lookupIJ table to …","Finds the cell at the given <code>level</code> that covers the <code>location</code>.","Finds the set of S2 cells at the required <code>level</code> that …","","","","","converts this ChordAngle to an Angle.","converts this ChordAngle to an Angle.","","","","","","","","","","","","","","","","","","","","","returns the center of the s2 cell on the sphere as a …","","","from_face returns the cell corresponding to a given S2 …","","from_pos_level returns a cell given its face in the range […","from_token returns a cell given a hex-encoded string of …","","immediate_parent is cheaper than Parent, but assumes …","inf returns an angle larger than any finite angle.","intersects returns true iff the CellID intersects oci.","","","","is_face returns whether this is a top-level (face) cell.","is_infinite reports whether this Angle is infinite.","is_leaf returns whether this cell ID is at the deepest …","is_valid reports whether ci represents a valid cell.","","","level returns the subdivision level of this cell ID, in …","","Converts a byte representation of a location into a <code>LatLng</code>.","Converts latitude and longitude values in degrees to a …","Converts a <code>LatLng</code> location to a byte representation.","lsb returns the least significant bit that is set.","max_tile returns the largest cell with the same range_min …","","","","","next returns the next cell along the Hilbert curve. This …","next_wrap returns the next cell along the Hilbert curve, …","normalized returns an equivalent angle in [0, 2π).","","parent returns the cell at the given level, which must be …","","","pos returns the position along the Hilbert curve of this …","prev returns the previous cell along the Hilbert curve.","prev_wrap returns the previous cell along the Hilbert …","rad returns the angle in radians.","range_max returns the maximum CellID that is contained …","range_min returns the minimum CellID that is contained …","","","","","","to_token returns a hex-encoded string of the uint64 cell …","","","","","","","","","","vertex_neighbors returns the neighboring cellIDs with …"],"i":[1,0,0,0,0,0,0,2,2,1,1,1,2,1,3,2,1,3,1,1,0,1,1,1,1,1,1,1,1,1,1,2,1,3,2,1,3,1,1,1,2,3,1,1,2,1,1,1,0,0,2,1,1,3,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,2,1,2,1,3,1,2,1,1,3,3,1,3,0,0,0,1,1,2,2,1,3,1,1,2,3,1,2,1,1,1,1,2,1,1,1,2,1,3,1,1,2,1,3,2,1,3,2,1,3,1],"f":[null,null,null,null,null,null,null,[[],["angle",3]],[[["f64",15]],["angle",3]],[[["i64",15]],["cellid",3]],[[["i64",15]],["cellid",3]],[[["u64",15]],["vec",3,[["cellid",3],["global",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rect",3]],[[],["rect",3]],[[["cellid",3]],["vec",3,[["u8",15]]]],[[]],[[],["point",3]],[[],["cellid",3]],[[["u64",15]],["cellid",3]],[[],["cellid",3]],[[["u64",15]],["cellid",3]],[[],["iter",3]],[[["u64",15]],["iter",3]],[[["u64",15]],["u64",15]],[[]],[[],["angle",3]],[[],["cellid",3]],[[],["latlng",3]],[[]],[[]],[[]],[[["cellid",3]],["ordering",4]],[[["cellid",3]],["option",4,[["u64",15]]]],[[["cellid",3]],["bool",15]],[[],["f64",15]],[[["latlng",3]],["angle",3]],[[],["i64",15]],[[]],[[["angle",3]],["bool",15]],[[["cellid",3]],["bool",15]],[[],["u8",15]],[[]],[[["latlng",3],["u8",15]],["result",6,[["cellid",3]]]],[[["latlng",3],["angle",3],["u8",15]],["result",6,[["vec",3,[["cellid",3]]]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["chordangle",3]],["angle",3]],[[["chordangle",3]],["angle",3]],[[]],[[["e6",3]],["angle",3]],[[["e7",3]],["angle",3]],[[["rad",3]],["angle",3]],[[["e7",3]],["angle",3]],[[["deg",3]],["angle",3]],[[["e5",3]],["angle",3]],[[["deg",3]],["angle",3]],[[["rad",3]],["angle",3]],[[["e6",3]],["angle",3]],[[["e5",3]],["angle",3]],[[["latlng",3]],["cellid",3]],[[["cell",3]],["cellid",3]],[[["point",3]],["cellid",3]],[[["point",3]],["cellid",3]],[[["latlng",3]],["cellid",3]],[[["cell",3]],["cellid",3]],[[]],[[["point",3]],["latlng",3]],[[["cellid",3]],["latlng",3]],[[["cellid",3]],["latlng",3]],[[]],[[["point",3]],["latlng",3]],[[["u64",15]],["cellid",3]],[[["u8",15],["i32",15],["i32",15]],["cellid",3]],[[["u64",15],["u64",15],["u64",15]],["cellid",3]],[[["str",15]],["cellid",3]],[[]],[[],["cellid",3]],[[],["angle",3]],[[["cellid",3]],["bool",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[],["u64",15]],null,[[],["result",6,[["latlng",3]]]],[[["f64",15],["f64",15]],["latlng",3]],[[["latlng",3]]],[[],["u64",15]],[[["cellid",3]],["cellid",3]],[[["f64",15]],["angle",3]],[[["angle",3]],["bool",15]],[[["cellid",3]],["bool",15]],[[["angle",3],["angle",3]],["latlng",3]],[[],["cellid",3]],[[],["cellid",3]],[[],["angle",3]],[[],["latlng",3]],[[["u64",15]],["cellid",3]],[[["angle",3]],["option",4,[["ordering",4]]]],[[["cellid",3]],["option",4,[["ordering",4]]]],[[],["u64",15]],[[],["cellid",3]],[[],["cellid",3]],[[],["f64",15]],[[],["cellid",3]],[[],["cellid",3]],[[],["vector",3]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["u64",15]],["vec",3,[["cellid",3],["global",3]]]]],"p":[[3,"CellID"],[3,"Angle"],[3,"LatLng"]]},\
"lookup_data_generator":{"doc":"","t":[0,5,5,5],"n":["data","generate_and_serialize_random_entries","generate_and_serialize_sparse_weather_entries","generate_and_serialize_weather_entries"],"q":["lookup_data_generator","lookup_data_generator::data","",""],"d":["","Generates random lookup entries with the specified sizes …","Generates a sparse set of random weather lookup entries …","Generates a dense set of random weather lookup entries …"],"i":[0,0,0,0],"f":[null,[[["usize",15],["usize",15],["usize",15]],["result",6,[["bytesmut",3]]]],[[["usize",15]],["result",6,[["bytesmut",3]]]],[[],["result",6,[["bytesmut",3]]]]],"p":[]},\
"metrics":{"doc":"Oak Functions differentially private metrics example.","t":[5],"n":["main"],"q":["metrics"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"metrics_client":{"doc":"Sends 200 requests to the metrics backend alternating …","t":[3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,11],"n":["Opt","borrow","borrow_mut","clap","clone","clone_into","from","from_clap","into","into_request","main","to_owned","try_from","try_into","type_id","uri","vzip"],"q":["metrics_client","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1],"f":[null,[[]],[[]],[[],["app",3]],[[],["opt",3]],[[]],[[]],[[["argmatches",3]]],[[]],[[],["request",3]],[[],["result",6]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]]],"p":[[3,"Opt"]]},\
"mobilenet":{"doc":"Oak Functions TensorFlow example, based on the MobilenetV2 …","t":[5],"n":["main"],"q":["mobilenet"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"mobilenet_client":{"doc":"Sends an image to the mobilenet application and checks …","t":[17,17,17,17,5],"n":["BATCH_SIZE","CHANNELS","HEIGHT","WIDTH","main"],"q":["mobilenet_client","","","",""],"d":["","","","",""],"i":[0,0,0,0,0],"f":[null,null,null,null,[[],["result",6]]],"p":[]},\
"oak_functions":{"doc":"SDK functionality that provides idiomatic Rust wrappers …","t":[5,14,5,5,5,5,5,5,5,5],"n":["alloc","log","read_request","report_event","report_metric","result_from_status","storage_get_item","tf_model_infer","write_log_message","write_response"],"q":["oak_functions","","","","","","","","",""],"d":["","Logs a debug message.","Reads and returns the user request.","Reports an event for a count-based metrics bucket.","Reports a metric value for a sum-based metrics bucket.","Convert a status returned from a host function call to a …","Looks up an item from the in-memory lookup store.","Uses the TensorFlow model to perform inference for the …","Writes a debug log message.","Write the response."],"i":[0,0,0,0,0,0,0,0,0,0],"f":[[[["u32",15]]],null,[[],["result",4,[["vec",3,[["u8",15]]],["oakstatus",4]]]],[[["asref",8,[["str",15]]]],["result",4,[["oakstatus",4]]]],[[["asref",8,[["str",15]]],["i64",15]],["result",4,[["oakstatus",4]]]],[[["i32",15],["",26]],["result",4,[["",26],["oakstatus",4]]]],[[],["result",4,[["option",4,[["vec",3,[["u8",15]]]]],["oakstatus",4]]]],[[],["result",4,[["inference",3],["oakstatus",4]]]],[[["asref",8,[["str",15]]]],["result",4,[["oakstatus",4]]]],[[],["result",4,[["oakstatus",4]]]]],"p":[]},\
"oak_functions_abi":{"doc":"Type, constant and Wasm host function definitions for the …","t":[5,5,5,0,5,5,5,5,5,5,13,13,4,13,4,3,3,13,13,13,13,13,3,13,13,4,13,13,13,3,3,3,3,4,13,13,13,13,13,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["channel_read","channel_wait","channel_write","proto","read_request","report_metric","storage_get_item","tf_model_infer","write_log_message","write_response","BadRequest","ChannelEmpty","ChannelHandle","ChannelOk","ChannelStatus","ConfigurationInfo","Entry","ErrBadTensorFlowModelInput","ErrInternal","ErrInvalidArgs","ErrStorageItemNotFound","ErrTensorFlowModelNotFound","Inference","InternalServerError","LookupData","OakStatus","Ok","PolicySizeViolation","PolicyTimeViolation","PrivateMetricsConfig","Request","Response","ServerPolicy","StatusCode","Success","Unspecified","Unspecified","Unspecified","Unspecified","batch_size","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","constant_processing_time_ms","constant_response_size_bytes","create","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","epsilon","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_i32","from_i32","from_i32","from_i32","hash","hash","hash","hash","inference_vec","into","into","into","into","into","into","into","into","into","into","into","is_valid","is_valid","is_valid","is_valid","key","length","metrics","ml_inference","ne","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","policy","set_status","shape","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","wasm_hash"],"q":["oak_functions_abi","","","","","","","","","","oak_functions_abi::protod":["Allocates a buffer on the callers memory to write a …","Waits until at least one of the channels from the channel …","Writes a message, i.e., <code>src_buf_len</code> bytes, from <code>scr_buf_ptr</code>…","","See <code>read_request</code>.","See <code>report_metric</code>.","See <code>storage_get_item</code>.","See <code>tf_model_infer</code>.","See <code>write_log_message</code>.","See <code>write_response</code>.","Indicates a problem with the request. Similar to HTTP 400 …","Channel is empty.","A ChannelHandle corresonds to a channel. The Endpoint …","Success.","A read, write, or wait on a channel returns a …","Configuration information that should be provided to the …","An individual entry to be made available for lookup to an …","Error when running the TensorFlow model, due to bad input …","Internal error.","Arguments invalid.","Lookup storage item not found.","TensorFlow model not found.","The inference from a TensorFlow model, containing an …","Indicates other internal errors at the server. Similar to …","","Status values exchanged as i32 values across the Node Wasm …","Success.","Indicates violation of the response size limit specified …","Indicates violation of the response processing-time limit …","Configuration for differentially private metrics.","Represents a request sent to an Oak Functions application. …","Represents the response from an Oak Functions application. …","","Status codes for the response.","Indicates success of the operation. Similar to HTTP 200 …","","","","","The number of requests that will be aggregated into each …","Returns the body of the response, excluding any trailing …","The body of the request.","The body of the response generated by the Wasm module, in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A fixed response time, in milliseconds.","A fixed size for responses returned by the trusted runtime.","Creates a new instance of Response.","","","","","","","","","","","","","","","","","","","The privacy budget.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an <code>i32</code> to a <code>ChannelStatus</code>, or <code>None</code> if <code>value</code> is …","Converts an <code>i32</code> to a <code>ChannelHandle</code>, or <code>None</code> if <code>value</code> is …","Converts an <code>i32</code> to a <code>OakStatus</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>StatusCode</code>, or <code>None</code> if <code>value</code> is not a …","","","","","","","","","","","","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>ChannelStatus</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>ChannelHandle</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>OakStatus</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>StatusCode</code>.","","The effective length of the body, excluding any trailing …","Server-side configuration for differentially private …","Whether machine learning inference using a TensorFlow …","","","","","","","","","","","","The validated server-side policy.","Sets <code>status</code> to the provided enum value.","","Returns the enum value of <code>status</code>, or the default if the …","Status code indicating the success or failure of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hash of the loaded Wasm module."],"i":[0,0,0,0,0,0,0,0,0,0,1,2,0,2,0,0,0,3,3,3,3,3,0,1,4,0,3,1,1,0,0,0,0,0,1,2,4,3,1,5,6,7,6,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,11,7,6,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,2,4,3,11,7,6,1,2,4,3,1,10,10,6,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,11,7,6,5,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,2,4,3,11,7,6,1,2,4,3,1,2,4,3,1,8,8,9,10,5,2,4,3,11,7,6,1,2,4,3,1,11,6,9,9,8,9,10,5,11,7,6,2,4,3,1,9,6,8,6,6,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,2,4,3,11,7,6,1,8,9,10,5,2,4,3,11,7,6,1,11,9],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4,[["tryfrominterror",3]]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["inference",3]],[[],["configurationinfo",3]],[[],["serverpolicy",3]],[[],["privatemetricsconfig",3]],[[],["channelstatus",4]],[[],["channelhandle",4]],[[],["oakstatus",4]],[[],["entry",3]],[[],["request",3]],[[],["response",3]],[[],["statuscode",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["channelstatus",4]],["ordering",4]],[[["channelhandle",4]],["ordering",4]],[[["oakstatus",4]],["ordering",4]],[[["statuscode",4]],["ordering",4]],null,null,[[["statuscode",4],["vec",3,[["u8",15]]]]],[[]],[[]],[[]],[[]],[[],["channelstatus",4]],[[],["channelhandle",4]],[[],["oakstatus",4]],[[]],[[]],[[]],[[],["statuscode",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["inference",3]],["bool",15]],[[["configurationinfo",3]],["bool",15]],[[["serverpolicy",3]],["bool",15]],[[["privatemetricsconfig",3]],["bool",15]],[[["channelstatus",4]],["bool",15]],[[["channelhandle",4]],["bool",15]],[[["oakstatus",4]],["bool",15]],[[["entry",3]],["bool",15]],[[["request",3]],["bool",15]],[[["response",3]],["bool",15]],[[["statuscode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]],["option",4,[["channelstatus",4]]]],[[["i32",15]],["option",4,[["channelhandle",4]]]],[[["i32",15]],["option",4,[["oakstatus",4]]]],[[["i32",15]],["option",4,[["statuscode",4]]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i32",15]],["bool",15]],[[["i32",15]],["bool",15]],null,null,null,null,[[["inference",3]],["bool",15]],[[["configurationinfo",3]],["bool",15]],[[["serverpolicy",3]],["bool",15]],[[["privatemetricsconfig",3]],["bool",15]],[[["entry",3]],["bool",15]],[[["request",3]],["bool",15]],[[["response",3]],["bool",15]],[[["channelstatus",4]],["option",4,[["ordering",4]]]],[[["channelhandle",4]],["option",4,[["ordering",4]]]],[[["oakstatus",4]],["option",4,[["ordering",4]]]],[[["statuscode",4]],["option",4,[["ordering",4]]]],null,[[["statuscode",4]]],null,[[],["statuscode",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[4,"StatusCode"],[4,"ChannelStatus"],[4,"OakStatus"],[4,"ChannelHandle"],[3,"PrivateMetricsConfig"],[3,"Response"],[3,"Request"],[3,"Inference"],[3,"ConfigurationInfo"],[3,"ServerPolicy"],[3,"Entry"]]},\
"oak_functions_client":{"doc":"","t":[3,0,11,11,11,11,11,11,11,0,11,11,11,11,3,6,11,11,11,11,11,11,11,11,11,11,11,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Client","attestation","borrow","borrow_mut","from","into","into_request","invoke","new","proto","try_from","try_into","type_id","vzip","AttestationClient","ConfigurationVerifier","borrow","borrow_mut","create","from","into","into_request","send","try_from","try_into","type_id","vzip","StreamingRequest","StreamingResponse","body","body","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","into_request","into_request","ne","ne","streaming_session_client","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","StreamingSessionClient","accept_gzip","borrow","borrow_mut","clone","clone_into","connect","fmt","from","into","into_request","new","send_gzip","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor"],"q":["oak_functions_client","","","","","","","","","","","","","","oak_functions_client::attestation","","","","","","","","","","","","","oak_functions_client::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_client::proto::streaming_session_client","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","gRPC Attestation Service client implementation.","","","","","","","","Sends data encrypted by the <code>Encryptor</code> to the server and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generated client implementations.","","","","","","","","","","","","Enable decompressing responses with <code>gzip</code>.","","","","","Attempt to create a new client by connecting to a given …","","","","","","Compress requests with <code>gzip</code>.","Creates a message stream for session key negotiation and …","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,3,4,3,4,3,4,3,4,3,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[null,null,[[]],[[]],[[]],[[]],[[],["request",3]],[[["request",3]]],[[["str",15],["configurationverifier",6]]],null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[["str",15],["configurationverifier",6]]],[[]],[[]],[[],["request",3]],[[["request",3]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamingrequest",3]],[[],["streamingresponse",3]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["streamingrequest",3]],["bool",15]],[[["streamingresponse",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[["streamingrequest",3]],["bool",15]],[[["streamingresponse",3]],["bool",15]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,[[]],[[]],[[]],[[],["streamingsessionclient",3]],[[]],[[["",26],["",26]]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["request",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["",26],["",26],["",26]],["streamingsessionclient",3,[["interceptedservice",3,[["",26],["",26],["",26]]]]]]],"p":[[3,"Client"],[3,"AttestationClient"],[3,"StreamingRequest"],[3,"StreamingResponse"],[3,"StreamingSessionClient"]]},\
"oak_functions_load_test":{"doc":"","t":[17,17,17,5],"n":["REQUEST","TOTAL_REQUESTS","URL","main"],"q":["oak_functions_load_test","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[null,null,null,[[],["result",6]]],"p":[]},\
"oak_functions_loader":{"doc":"","t":[0,0,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,13,13,13,3,4,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,4,13,3,3,3,13,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,16,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,17,6,6,6,6,6,3,8,8,3,3,3,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,12,10,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["attestation","grpc","logger","lookup","lookup_data","metrics","proto","server","AttestationServer","as_any","as_any_mut","borrow","borrow_mut","create","from","into","into_any","into_any_arc","into_any_rc","into_request","stream","try_from","try_into","type_id","vzip","create_and_start_grpc_server","create_wasm_handler","Logger","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","default","for_test","from","into","into_any","into_any_arc","into_any_rc","into_request","log_public","log_sensitive","new","to_owned","try_from","try_into","type_id","vzip","LookupExtension","LookupFactory","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","create","create","from","from","get_metadata","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_request","into_request","invoke","storage_get_item","terminate","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","File","GcpMetadataToken","Http","LookupData","LookupDataAuth","LookupDataSource","None","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","fmt","fmt","for_test","from","from","from","get","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","is_empty","len","new_empty","parse_lookup_entries","refresh","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","auth","url","BucketConfig","Count","PrivateMetricsAggregator","PrivateMetricsConfig","PrivateMetricsProxyFactory","Sum","add_laplace_noise","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","batch_size","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buckets","clone","clone_into","create","deserialize","deserialize","epsilon","fmt","fmt","from","from","from","from","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","into_request","new","new","report_metrics","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","vzip","vzip","vzip","vzip","max","min","StreamingRequest","StreamingResponse","as_any","as_any","as_any_mut","as_any_mut","body","body","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_request","into_request","ne","ne","streaming_session_server","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","StreamStream","StreamingSession","StreamingSessionServer","as_any","as_any_mut","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","into","into_any","into_any_arc","into_any_rc","into_request","new","poll_ready","poll_ready","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor","ABI_USIZE","AbiMessage","AbiPointer","AbiPointerOffset","BoxedExtension","BoxedExtensionFactory","Endpoint","ExtensionFactory","OakApiNativeExtension","Policy","WasmHandler","WasmState","alloc","apply_policy","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel_create","clone","clone","clone_into","clone_into","constant_processing_time","constant_response_size_bytes","create","create","deserialize","fmt","format_bytes","from","from","from","from","get_memory","get_metadata","handle_invoke","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","into_request","invoke","invoke_index","read_request","receiver","resolve_func","sender","terminate","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","vzip","vzip","vzip","vzip","write_buffer_to_wasm_memory","write_log_message","write_response","write_u32_to_wasm_memory"],"q":["oak_functions_loader","","","","","","","","oak_functions_loader::attestation","","","","","","","","","","","","","","","","","oak_functions_loader::grpc","","oak_functions_loader::logger","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::lookup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::lookup_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::lookup_data::LookupDataSource","","","oak_functions_loader::metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::metrics::BucketConfig","","oak_functions_loader::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::proto::streaming_session_server","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","gRPC server for Oak Functions.","","","","","","","gRPC Attestation Service implementation.","","","","","","","","","","","","","","","","","Starts a gRPC server on the given address, serving the <code>main</code>…","Creates a <code>WasmHandler</code> with the given Wasm module, lookup …","A simple logger that splits logging between writing logs …","","","","","","","","Creates a new logger for testing using the debug …","","","","","","","Logs a message that contains only public, non-sensitive …","Logs the message at the specified <code>Level</code>, but only if the …","Creates a new logger with the specified maximum <code>LevelFilter</code>…","","","","","","","","","","","","","","","","","Create and return a lookup factory.","","","","","","","","","","","","","","","Corresponds to the host ABI function <code>storage_get_item</code>.","","","","","","","","","","","","","An in-memory lookup store instance that can refresh its …","","","","","","","","","","","","","","","","","","","","","","","","Creates an instance of LookupData populated with the given …","","","","Convenience getter for an individual entry that reduces …","","","","","","","","","","","","","","","","","","Creates a new empty <code>LookupData</code> instance that can refresh …","","Refreshes the internal entries of this struct from the …","","","","","","","","","","","","","","","","","","Configuration for metrics buckets.","A bucket used for counting of events. This is equivalent …","Aggregator for count- and sum-based differentially private …","Configuration for differentially-private metrics reporting.","","A bucket used for summing integer values in a range. …","Adds Laplacian noise with parameter <code>beta</code> scaled by <code>scale</code> …","","","","","","","","","The number of requests that will be aggregated into each …","","","","","","","","","The labels and configurations of buckets for which metrics …","","","","","","The privacy budget. See …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reports new metrics for a single request that should be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generated server implementations.","","","","","","","","","","","Server streaming response type for the Stream method.","Generated trait containing gRPC methods that should be …","","","","","","","","","","","","","","","","","","","","Creates a message stream for session key negotiation and …","","","","","","","Wasm type identifier for position/offset values in linear …","","","","","","","","Trait for implementing extensions, to implement new native …","Similar to <code>ServerPolicy</code>, but it is used for reading the …","","<code>WasmState</code> holds runtime values for a particular execution …","","Runs the given function and applies the given security …","","","","","","","","","","","","","","","","","Create a channel with two symmetrial endpoints. The …","","","","","A fixed response time. See …","See <code>Policy::constant_response_size_bytes</code>","","","","","Converts a binary sequence to a string if it is a valid …","","","","","Helper function to get memory.","Metadata about this Extension, including the exported host …","","","","","","","","","","","","","","","","","","","","","Similar to <code>invoke_index</code> in <code>wasmi::Externals</code>, but may …","Invocation of a host function specified by its registered …","Corresponds to the host ABI function <code>read_request</code>.","","","","Performs any cleanup or terminating behavior necessary …","","","","","","","","","","","","","","","","","","","","","Corresponds to the host ABI function <code>write_log_message</code>.","Corresponds to the host ABI function <code>write_response</code>.",""],"i":[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,3,4,3,4,3,4,3,4,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,0,3,3,4,3,4,3,4,3,4,5,6,5,0,0,0,6,7,6,5,7,6,5,7,6,5,7,6,5,6,5,6,5,6,6,6,5,7,7,6,5,7,7,6,5,7,6,5,7,6,5,7,6,5,7,6,5,7,7,7,0,7,6,5,7,6,5,7,6,5,7,6,5,7,6,5,8,9,9,0,10,0,0,0,10,0,11,12,13,10,11,12,13,10,13,11,12,13,10,11,12,13,10,13,10,10,12,13,10,13,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,13,10,11,12,11,10,11,12,13,10,11,12,13,10,11,12,13,10,13,11,12,13,10,14,14,0,0,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,0,15,16,15,16,15,16,15,16,15,16,17,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,17,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,19,0,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,0,21,22,21,22,21,21,23,22,21,21,0,19,20,21,22,19,24,22,19,20,21,22,19,20,21,22,20,21,22,19,20,21,22,19,20,21,22,24,19,19,20,19,20,24,21,22,19,20,21,22,19,20,21,22,19,20,21,22,21,19,20,21,22,19,19,19,19],"f":[null,null,null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["vec",3,[["u8",15]]],["configurationinfo",3],["logger",3]],["result",6]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[["request",3,[["streaming",3,[["streamingrequest",3]]]]]],["pin",3,[["box",3,[["future",8]]]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["socketaddr",4],["wasmhandler",3],["vec",3,[["u8",15]]],["serverpolicy",3],["configurationinfo",3],["future",8],["logger",3]]],[[["vec",3,[["boxedextensionfactory",6]]],["logger",3]],["result",6,[["wasmhandler",3]]]],null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[],["logger",3]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[["level",4],["str",15]]],[[["level",4],["str",15]]],[[["levelfilter",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[],["result",6,[["boxedextension",6]]]],[[["arc",3,[["lookupdata",3]]],["logger",3]],["result",6,[["boxedextensionfactory",6]]]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[],["request",3]],[[["wasmstate",3],["runtimeargs",3]],["result",4,[["result",4,[["oakstatus",4]]],["trap",3]]]],[[["wasmstate",3],["lookupextension",3],["abipointer",6],["abipointeroffset",6],["abipointer",6],["abipointer",6]],["result",4,[["oakstatus",4]]]],[[],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["lookupdataauth",4]],[[],["lookupdatasource",4]],[[]],[[]],[[]],[[["",26],["",26]],["result",4,[["",26]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["hashmap",3,[["vec",3,[["u8",15]]],["vec",3,[["u8",15]]]]]]],[[]],[[]],[[]],[[],["option",4,[["vec",3,[["u8",15]]]]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["bool",15]],[[],["usize",15]],[[["option",4,[["lookupdatasource",4]]],["logger",3]],["lookupdata",3]],[[["buf",8]],["result",6,[["hashmap",3,[["vec",3,[["u8",15]]],["vec",3,[["u8",15]]]]]]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[["stdrng",3],["f64",15],["i64",15],["f64",15]],["i64",15]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["bucketconfig",4]],[[]],[[],["result",6,[["boxedextension",6]]]],[[["",26],["",26]],["result",4,[["",26]]]],[[["",26],["",26]],["result",4,[["",26]]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["privatemetricsconfig",3]],["result",6]],[[["privatemetricsconfig",3],["logger",3]],["result",6]],[[["hashmap",3,[["string",3],["i64",15]]]],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamingrequest",3]],[[],["streamingresponse",3]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["streamingrequest",3]],["bool",15]],[[["streamingresponse",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[],["request",3]],[[["streamingrequest",3]],["bool",15]],[[["streamingresponse",3]],["bool",15]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,[[],["any",8]],[[],["any",8]],[[]],[[]],[[["request",3]]],[[["request",3]]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[]],[[["context",3]],["poll",4,[["result",4]]]],[[["context",3]],["poll",4,[["result",4]]]],[[["request",3,[["streaming",3,[["streamingrequest",3]]]]]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["",26],["",26],["",26]],["interceptedservice",3,[["",26],["",26],["",26]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["u32",15]],["abipointer",6]],[[["serverpolicy",3],["",26],["",26]]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[],["any",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["policy",3]],[[],["wasmhandler",3]],[[]],[[]],null,null,[[],["result",6,[["boxedextension",6]]]],[[["vec",3,[["boxedextensionfactory",6]]],["logger",3]],["result",6]],[[["",26],["",26]],["result",4,[["",26]]]],[[["formatter",3]],["result",6]],[[],["string",3]],[[]],[[]],[[]],[[]],[[],["memoryref",3]],[[]],[[["request",3]]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["wasmstate",3],["runtimeargs",3]],["result",4,[["result",4,[["oakstatus",4]]],["trap",3]]]],[[["usize",15],["runtimeargs",3]],["result",4,[["option",4,[["runtimevalue",4]]],["trap",3]]]],[[["abipointer",6],["abipointer",6]],["result",4,[["oakstatus",4]]]],null,[[["str",15],["signature",3]],["result",4,[["funcref",3],["error",4]]]],null,[[],["result",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",6,[["serverpolicy",3]]]],[[]],[[]],[[]],[[]],[[["abipointer",6]],["result",4,[["oakstatus",4]]]],[[["abipointer",6],["abipointeroffset",6]],["result",4,[["oakstatus",4]]]],[[["abipointer",6],["abipointeroffset",6]],["result",4,[["oakstatus",4]]]],[[["u32",15],["abipointer",6]],["result",4,[["oakstatus",4]]]]],"p":[[3,"AttestationServer"],[3,"Logger"],[3,"LookupExtension"],[3,"LookupFactory"],[4,"LookupDataSource"],[4,"LookupDataAuth"],[3,"LookupData"],[13,"File"],[13,"Http"],[4,"BucketConfig"],[3,"PrivateMetricsAggregator"],[3,"PrivateMetricsProxyFactory"],[3,"PrivateMetricsConfig"],[13,"Sum"],[3,"StreamingRequest"],[3,"StreamingResponse"],[8,"StreamingSession"],[3,"StreamingSessionServer"],[3,"WasmState"],[3,"Endpoint"],[3,"Policy"],[3,"WasmHandler"],[8,"ExtensionFactory"],[8,"OakApiNativeExtension"]]},\
"oak_functions_sdk_abi_test":{"doc":"Oak Functions ABI test.","t":[5],"n":["main"],"q":["oak_functions_sdk_abi_test"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"test_utils":{"doc":"Test utilities to help with unit testing of Oak-Functions …","t":[3,3,3,3,5,11,11,11,11,11,11,11,11,5,11,12,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Background","MockStaticServer","Term","TestResult","background","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compile_rust_wasm","default","elapsed","free_port","from","from","from","from","get_config_info","into","into","into","into","into_future","into_request","into_request","into_request","into_request","make_request","poll","response","serialize_entries","serve","set_response_body","terminate_and_join","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["test_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wrapper around a termination signal <code>oneshot::Sender</code> and …","A mock implementation of a static server that always …","A wrapper around a termination signal <code>oneshot::Receiver</code>.","","Executes the provided closure passing to it a <code>Term</code> …","","","","","","","","","Uses cargo to compile a Rust manifest to Wasm bytes.","","","","","","","","","","","","","","","","","","","","","Serializes the provided map as a contiguous buffer of …","Starts serving, listening on the provided port.","Sets the content of the response body to return for any …","Sends the termination signal to the background task and …","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,3,4,1,2,3,4,0,4,3,0,1,2,3,4,0,1,2,3,4,2,1,2,3,4,0,2,3,0,4,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[null,null,null,null,[[["",26],["",26]],["background",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["bool",15]],["result",6,[["vec",3,[["u8",15]]]]]],[[],["mockstaticserver",3]],null,[[],["u16",15]],[[]],[[]],[[]],[[]],[[["serverpolicy",3],["bool",15],["option",4,[["privatemetricsconfig",3]]]],["configurationinfo",3]],[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["u16",15]]],[[["pin",3],["context",3]],["poll",4]],null,[[["hashmap",3,[["vec",3,[["u8",15]]],["vec",3,[["u8",15]]]]]],["vec",3,[["u8",15]]]],[[["u16",15],["future",8]]],[[["vec",3,[["u8",15]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"Background"],[3,"Term"],[3,"TestResult"],[3,"MockStaticServer"]]},\
"weather_lookup":{"doc":"Oak Functions weather lookup example.","t":[5],"n":["main"],"q":["weather_lookup"],"d":[""],"i":[0],"f":[[[]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};