/// Represents a request sent to an Oak Functions application. It wraps a byte array that the Wasm
/// module can interpret as a request it can handle.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Request {
    /// The body of the request.
    #[prost(bytes="vec", tag="1")]
    pub body: ::prost::alloc::vec::Vec<u8>,
}
/// Represents the response from an Oak Functions application. This is included in the body of the
/// HTTP response sent to the client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Response {
    /// Status code indicating the success or failure of the operation.
    #[prost(enumeration="StatusCode", tag="1")]
    pub status: i32,
    /// The body of the response generated by the Wasm module, in case of success. Or the reason of the
    /// failure in case of an error. It may contain a number of trailing 0s.
    #[prost(bytes="vec", tag="2")]
    pub body: ::prost::alloc::vec::Vec<u8>,
    /// The effective length of the body, excluding any trailing 0s.
    #[prost(fixed64, tag="3")]
    pub length: u64,
}
/// Status codes for the response.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StatusCode {
    Unspecified = 0,
    /// Indicates success of the operation. Similar to HTTP 200 status code.
    Success = 1,
    /// Indicates a problem with the request. Similar to HTTP 400 status code.
    BadRequest = 2,
    /// Indicates violation of the response size limit specified in the security policy.
    PolicySizeViolation = 3,
    /// Indicates violation of the response processing-time limit specified in the security policy.
    PolicyTimeViolation = 4,
    /// Indicates other internal errors at the server. Similar to HTTP 500 status code.
    InternalServerError = 5,
}
