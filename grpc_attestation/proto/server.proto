//
// Copyright 2021 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.session.v1;

import "google/protobuf/empty.proto";

option java_multiple_files = true;
option java_package = "oak.session.v1";

// A self contained request message sent to the server by a client. Each request
// is part of a distinct request / response pair, regardless of whether it is sent
// as a unary gRPC message or as part of a stream.
message AttestationRequest {
  bytes body = 1;
  // Links a sequence of messages, declaring them as part of a single a session.
  // Note that this byte array is expected to be fixed length, as defined in the
  // service implementation. Protobuf unfortunately does not support declaring
  // the length here.
  bytes session_id = 2;
}

// The correspending response to a request message, sent by the server to a client. Each
// response is part of a distinct request / response pair, regardless of whether it is sent
// as a unary gRPC message or over a stream.
message AttestationResponse {
  bytes body = 1;
}

message PublicKeyInfo {
  // The serialized public key.
  bytes public_key = 1;
  // The serialized attestation report binding the public key.
  bytes attestation = 2;
}

// Service definition to communicate with the server over unary gRPC messages using
// the message types defined above.
service UnarySession {
  // Used to send a sequence of a messages for session key negotiation and
  // encrypted payload exchange.
  //
  // The expected message seqeuence starts with an intial handshake:
  // - Client->Server: `AttestationRequest` with a serialized `ClientHello` message.
  // - Server->Client: `AttestationResponse` with a serialized `ServerIdentity` message.
  // - Client->Server: `AttestationRequest` with a serialized `ClientIdentity` message.
  // - Server->Client: `AttestationResponse` with an empty message, confirming handshake completion.
  //
  // After the handshake, both client and server derive matching session keys
  // and are then able to exchange multiple AttestationRequest/AttestationResponse request
  // pairs that contain a seralized `EncryptedData` message:
  // - Client->Server: `AttestationRequest` with a serialized `EncryptedData` message.
  // - Server->Client: `AttestationResponse` with a serialized `EncryptedData` message.
  //
  // Messages are represented as serialized messages defined in the `remote_attestation::message.rs`
  // and `com.google.oak.remote_attestation.Message`.
  rpc Message(AttestationRequest) returns (AttestationResponse);

  // Gets the public key and the attestation report that binds the public key to a specific instance
  // of the code running in a TEE.
  rpc GetPublicKeyInfo(google.protobuf.Empty) returns (PublicKeyInfo);
}

// Service definition to communicate with the server over using streaming gRPC.
service StreamingSession {
  // Streaming equivalent of the same method on `UnarySession` service. Note
  // that even though messages are exchanged using the streams, commnication
  // logically still follows an "unary" pattern. The client sends self contained
  // requests. The server responds to each request in order using a self contained
  // response.
  // The only advantage the streaming service implementation offers is
  // built-in stickiness. A stream by nature pairs a client with a specific
  // server.
  rpc Message(stream AttestationRequest) returns (stream AttestationResponse);
}
