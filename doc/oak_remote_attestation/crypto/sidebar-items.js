initSidebarItems({"constant":[["AEAD_ALGORITHM_KEY_LENGTH",""],["CLIENT_KEY_PURPOSE","Purpose string used for deriving client session keys with HKDF."],["KEY_AGREEMENT_ALGORITHM_KEY_LENGTH",""],["KEY_DERIVATION_SALT","Salt used for key derivation with HKDF. https://datatracker.ietf.org/doc/html/rfc5869"],["NONCE_LENGTH","Length of the encryption nonce. `ring::aead` uses 96-bit (12-byte) nonces. https://briansmith.org/rustdoc/ring/aead/constant.NONCE_LEN.html"],["SERVER_KEY_PURPOSE","Purpose string used for deriving server session keys with HKDF."],["SHA256_HASH_LENGTH",""],["SIGNATURE_LENGTH","IEEE-P1363 encoded ECDSA-P256 signature length. https://datatracker.ietf.org/doc/html/rfc6979 https://standards.ieee.org/standard/1363-2000.html"],["SIGNING_ALGORITHM_KEY_LENGTH","OpenSSL ECDSA-P256 key public key length, which is represented as `0x04 | X: 32-byte | Y: 32-byte`. Where X and Y are big-endian coordinates of an Elliptic Curve point. https://datatracker.ietf.org/doc/html/rfc6979"]],"enum":[["KeyNegotiatorType","Defines the type of key negotiator and the set of session keys created by it."]],"fn":[["get_random","Generates a random vector of `size` bytes."],["get_sha256","Computes a SHA-256 digest of `input` and returns it in a form of raw bytes."]],"struct":[["AeadEncryptor","Implementation of Authenticated Encryption with Associated Data (AEAD)."],["KeyNegotiator","Implementation of the X25519 Elliptic Curve Diffie-Hellman (ECDH) key negotiation."],["SignatureVerifier",""],["Signer",""]]});