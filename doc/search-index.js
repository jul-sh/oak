var searchIndex = JSON.parse('{\
"benchmark":{"doc":"Oak Functions benchmark example.","t":"FADDMALLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLENLLLLLLLLLLLLLLL","n":["main","proto","BenchmarkRequest","LookupTest","action","benchmark_request","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","iterations","key","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Action","Lookup","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id"],"q":[[0,"benchmark"],[2,"benchmark::proto"],[38,"benchmark::proto::benchmark_request"]],"d":["","","A request to execute a benchmark action a specified number …","Container for the key to use when doing a benchmark lookup.","","Nested message and enum types in <code>BenchmarkRequest</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","",""],"i":[0,0,0,0,1,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9],"f":[[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[2],[1,1],[2,2],[[]],[[]],[[],1],[[],2],[1,3],[2,3],[[1,1],4],[[2,2],4],[[1,5],6],[[2,5],6],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],0,0,[[]],[[]],[9,9],[[]],[[9,10]],[9,3],[[9,9],4],[[9,5],6],[[]],[[]],[[[11,[9]],12,13,14,15],[[7,[16]]]],[[]],[[],7],[[],7],[[],8]],"c":[],"p":[[3,"BenchmarkRequest"],[3,"LookupTest"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[4,"Action"],[8,"BufMut"],[4,"Option"],[15,"u32"],[4,"WireType"],[8,"Buf"],[3,"DecodeContext"],[3,"DecodeError"]]},\
"echo":{"doc":"Oak Functions echo example.","t":"F","n":["main"],"q":[[0,"echo"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"key_value_lookup":{"doc":"Oak Functions key / value lookup example.","t":"F","n":["main"],"q":[[0,"key_value_lookup"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"location_utils":{"doc":"Utilities for finding and comparing longitude- and …","t":"DDIRRDGRLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLKLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLK","n":["Angle","CellID","Context","DEFAULT_CUTOFF_RADIUS_RADIANS","LOCATION_SIZE","LatLng","Result","S2_DEFAULT_LEVEL","abs","add","advance","advance_wrap","all_neighbors","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bound_st","bound_uv","cell_id_from_bytes","cell_id_to_bytes","center_face_siti","center_uv","child_begin","child_begin_at_level","child_end","child_end_at_level","child_iter","child_iter_at_level","child_position","children","clone","clone","clone","clone_into","clone_into","clone_into","cmp","common_ancestor_level","contains","context","deg","distance","distance_from_begin","edge_neighbors","eq","eq","equivalent","face","face_ij_orientation","find_cell","find_covering_cells","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_face","from_face_ij","from_face_pos_level","from_token","hash","immediate_parent","inf","intersects","into","into","into","is_face","is_infinite","is_leaf","is_valid","is_valid","lat","level","lng","location_from_bytes","location_from_degrees","location_to_bytes","lsb","max_tile","mul","new","next","next_wrap","normalized","normalized","parent","partial_cmp","partial_cmp","pos","prev","prev_wrap","rad","range_max","range_min","raw_point","to_owned","to_owned","to_owned","to_string","to_token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertex_neighbors","with_context"],"q":[[0,"location_utils"]],"d":["Angle represents a 1D angle. The internal representation …","CellID uniquely identifies a cell in the S2 cell …","Provides the <code>context</code> method for <code>Result</code>.","The default cutoff radius in radians.","","","<code>Result&lt;T, Error&gt;</code>","The default level to use for S2 Geometry cells. Higher …","abs returns the absolute value of the angle.","","advance advances or retreats the indicated number of steps …","advance_wrap advances or retreats the indicated number of …","all_neighbors returns all neighbors of this cell at the …","","","","","","","bound_st returns the bound of this CellID in (s,t)-space.","bound_uv returns the bound of this CellID in (u,v)-space.","Converts a byte representation to the <code>CellID</code>.","Converts a <code>CellID</code> to a byte representation.","center_face_siti returns the (face, si, ti) coordinates of …","center_uv returns the center of this CellID in …","child_begin returns the first child in a traversal of the …","child_begin_at_level returns the first cell in a traversal …","child_end returns the first cell after a traversal of the …","child_end_at_level returns the first cell after the last …","","","child_position returns the child position (0..3) of this …","children returns the four immediate children of this cell. …","","","","","","","","common_ancestor_level returns the level of the common …","contains returns true iff the CellID contains oci.","Wrap the error value with additional context.","deg returns the angle in degrees.","","distance_from_begin returns the number of steps that this …","edge_neighbors returns the four cells that are adjacent …","","","","face returns the cube face for this cell ID, in the range […","face_ij_orientation uses the global lookupIJ table to …","Finds the cell at the given <code>level</code> that covers the <code>location</code>.","Finds the set of S2 cells at the required <code>level</code> that …","","","","","","","Returns the argument unchanged.","converts this ChordAngle to an Angle.","","","","","converts this ChordAngle to an Angle.","","","","","Returns the argument unchanged.","","","","","","","returns the center of the s2 cell on the sphere as a …","","","","Returns the argument unchanged.","from_face returns the cell corresponding to a given S2 …","","from_pos_level returns a cell given its face in the range […","from_token returns a cell given a hex-encoded string of …","","immediate_parent is cheaper than Parent, but assumes …","inf returns an angle larger than any finite angle.","intersects returns true iff the CellID intersects oci.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","is_face returns whether this is a top-level (face) cell.","is_infinite reports whether this Angle is infinite.","is_leaf returns whether this cell ID is at the deepest …","is_valid reports whether ci represents a valid cell.","","","level returns the subdivision level of this cell ID, in …","","Converts a byte representation of a location into a <code>LatLng</code>.","Converts latitude and longitude values in degrees to a …","Converts a <code>LatLng</code> location to a byte representation.","lsb returns the least significant bit that is set.","max_tile returns the largest cell with the same range_min …","","","next returns the next cell along the Hilbert curve. This …","next_wrap returns the next cell along the Hilbert curve, …","normalized returns an equivalent angle in [0, 2π).","","parent returns the cell at the given level, which must be …","","","pos returns the position along the Hilbert curve of this …","prev returns the previous cell along the Hilbert curve.","prev_wrap returns the previous cell along the Hilbert …","rad returns the angle in radians.","range_max returns the maximum CellID that is contained …","range_min returns the minimum CellID that is contained …","","","","","","to_token returns a hex-encoded string of the uint64 cell …","","","","","","","","","","vertex_neighbors returns the neighboring cellIDs with …","Wrap the error value with additional context that is …"],"i":[0,0,0,0,0,0,0,0,1,1,3,3,3,1,3,15,1,3,15,3,3,0,0,3,3,3,3,3,3,3,3,3,3,1,3,15,1,3,15,3,3,3,41,1,15,3,3,1,3,3,3,3,0,0,1,3,3,15,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,15,15,15,15,15,3,3,3,3,3,3,1,3,1,3,15,3,1,3,3,15,15,3,15,0,0,0,3,3,1,15,3,3,1,15,3,1,3,3,3,3,1,3,3,3,1,3,15,3,3,1,3,15,1,3,15,1,3,15,3,41],"f":[0,0,0,0,0,0,0,0,[1,1],[[1,2],1],[[3,4],3],[[3,4],3],[[3,5],[[7,[3,6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[3,8],[3,8],[[[10,[9]]],[[11,[3]]]],[3,[[7,[9]]]],[3],[3,12],[3,3],[[3,5],3],[3,3],[[3,5],3],[3,13],[[3,5],13],[[3,5],5],[3,[[14,[3]]]],[1,1],[3,3],[15,15],[[]],[[]],[[]],[[3,3],16],[[3,3],[[17,[5]]]],[[3,3],18],[[[0,[19,20,21]]],[[23,[22]]]],[1,2],[[15,15],1],[3,4],[3,[[14,[3]]]],[[1,1],18],[[3,3],18],[[],18],[3,9],[3],[[15,9],[[11,[3]]]],[[15,1,9],[[11,[[7,[3]]]]]],[[1,24],[[23,[25]]]],[[3,24],[[23,[25]]]],[[3,24],[[23,[25]]]],[[15,24],[[23,[25]]]],[26,1],[27,1],[[]],[28,1],[29,1],[30,1],[31,1],[27,1],[28,1],[31,1],[26,1],[29,1],[30,1],[[]],[15,3],[32,3],[33,3],[32,3],[15,3],[33,3],[3,15],[3,15],[32,15],[32,15],[[]],[5,3],[[9,34,34],3],[[5,5,5],3],[35,3],[[3,36]],[3,3],[[],1],[[3,3],18],[[]],[[]],[[]],[3,18],[1,18],[3,18],[3,18],[15,18],0,[3,5],0,[[[10,[9]]],[[11,[15]]]],[[2,2],15],[15,[[14,[9]]]],[3,5],[[3,3],3],[[1,2],1],[[1,1],15],[3,3],[3,3],[1,1],[15,15],[[3,5],3],[[1,1],[[17,[16]]]],[[3,3],[[17,[16]]]],[3,5],[3,3],[3,3],[1,2],[3,3],[3,3],[3,37],[[]],[[]],[[]],[[],38],[3,38],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],39],[[],39],[[],39],[[3,5],[[7,[3,6]]]],[40,[[23,[22]]]]],"c":[],"p":[[3,"Angle"],[15,"f64"],[3,"CellID"],[15,"i64"],[15,"u64"],[3,"Global"],[3,"Vec"],[3,"Rect"],[15,"u8"],[15,"slice"],[6,"Result"],[3,"Point"],[3,"Iter"],[15,"array"],[3,"LatLng"],[4,"Ordering"],[4,"Option"],[15,"bool"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"Error"],[4,"Result"],[3,"Formatter"],[3,"Error"],[3,"Rad"],[3,"Deg"],[3,"ChordAngle"],[3,"E7"],[3,"E6"],[3,"E5"],[3,"Point"],[3,"Cell"],[15,"i32"],[15,"str"],[8,"Hasher"],[3,"Vector"],[3,"String"],[3,"TypeId"],[8,"FnOnce"],[8,"Context"]]},\
"lookup_data_checker":{"doc":"","t":"DLLLLLLLLMLLLLLLFFLLLLLL","n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","file_path","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","parse_lookup_entries","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"lookup_data_checker"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2],"f":[0,[1,1],[1,1],[[]],[[]],[2,2],[[]],[[],1],[[],1],0,[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],[[]],[[],10],[11,[[10,[[14,[[13,[12]],[13,[12]]]]]]]],[[]],[[],7],[[],7],[[],15],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]]],"c":[],"p":[[3,"Command"],[3,"Opt"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[6,"Result"],[8,"Buf"],[15,"u8"],[3,"Vec"],[3,"HashMap"],[3,"TypeId"]]},\
"lookup_data_generator":{"doc":"","t":"AFFF","n":["data","generate_and_serialize_random_entries","generate_and_serialize_sparse_weather_entries","generate_and_serialize_weather_entries"],"q":[[0,"lookup_data_generator"],[1,"lookup_data_generator::data"]],"d":["","Generates random lookup entries with the specified sizes …","Generates a sparse set of random weather lookup entries …","Generates a dense set of random weather lookup entries …"],"i":[0,0,0,0],"f":[0,[[1,2,2,2],[[4,[3]]]],[[1,2],[[4,[3]]]],[1,[[4,[3]]]]],"c":[],"p":[[8,"Rng"],[15,"usize"],[3,"BytesMut"],[6,"Result"]]},\
"micro_rpc":{"doc":"","t":"NNINNNCNQQNNNNCNNNNDNDEDEINNNNDLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLL","n":["Aborted","AlreadyExists","AsyncTransport","Cancelled","DataLoss","DeadlineExceeded","Err","Err","Error","Error","FailedPrecondition","Internal","InvalidArgument","NotFound","Ok","Ok","Ok","OutOfRange","PermissionDenied","Request","ResourceExhausted","Response","Result","Status","StatusCode","Transport","Unauthenticated","Unavailable","Unimplemented","Unknown","Vec","advance_mut","allocator","and","and_then","append","as_deref","as_deref_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_ptr","as_ref","as_ref","as_ref","as_slice","async_client_invoke","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","capacity","chunk_mut","clear","clear","clear","clear","client_invoke","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cloned","cloned","cmp","cmp","code","copied","copied","dedup","dedup_by","dedup_by_key","default","default","default","deref","deref_mut","drain","drop","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","err","error_response","expect","expect_err","extend","extend","extend_from_slice","extend_from_within","extend_one","extend_one","extend_reserve","extend_reserve","extract_if","flatten","flush","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_output","from_raw_parts","from_raw_parts_in","from_residual","from_residual","hash","hash","index","index_mut","insert","inspect","inspect_err","into","into","into","into","into","into","into_boxed_slice","into_err","into_flattened","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_ok","into_raw_parts","into_raw_parts_with_alloc","invoke","invoke","is_empty","is_err","is_err_and","is_ok","is_ok_and","is_write_vectored","iter","iter_mut","leak","len","map","map_err","map_or","map_or_else","message","method_id","ne","ne","ne","ne","ne","ne","new","new","new_in","new_with_message","ok","or","or_else","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","product","push","push_within_capacity","put","put_bytes","put_slice","remaining_mut","remove","report","reserve","reserve_exact","resize","resize_with","response","response","retain","retain_mut","set_len","shrink_to","shrink_to_fit","spare_capacity_mut","splice","split_at_spare_mut","split_off","success_response","sum","swap_remove","to_owned","to_owned","to_owned","to_owned","transpose","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap_err","unwrap_err_unchecked","unwrap_or","unwrap_or_default","unwrap_or_else","unwrap_unchecked","with_capacity","with_capacity_in","write","write_all","write_vectored","Body","Error","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","to_owned","try_from","try_into","type_id"],"q":[[0,"micro_rpc"],[293,"micro_rpc::response"]],"d":["The operation was aborted.","Some entity that we attempted to create already exists.","Same as <code>Transport</code>, but for async use cases.","The operation was cancelled.","Unrecoverable data loss or corruption.","Deadline expired before operation could complete.","","Contains the error value","Type representing any transport-specific errors. By …","See <code>Transport::Error</code>.","The system is not in a state required for the operation’…","Internal error.","Client specified an invalid argument.","Some requested entity was not found.","","The operation completed successfully.","Contains the success value","Operation was attempted past the valid range.","The caller does not have permission to execute the …","A wrapper message representing a request over a transport.","Some resource has been exhausted.","A wrapper message representing a response over a transport.","<code>Result</code> is a type that represents either success (<code>Ok</code>) or …","","gRPC status codes used by <code>Status</code>.","A message-oriented transport that allows performing …","The request does not have valid authentication credentials","The service is currently unavailable.","Operation is not implemented or not supported.","Unknown error.","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","","Returns a reference to the underlying allocator.","Returns <code>res</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Calls <code>op</code> if the result is <code>Ok</code>, otherwise returns the <code>Err</code> …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;Result&lt;T, E&gt;</code>) to …","Converts from <code>Result&lt;T, E&gt;</code> (or <code>&amp;mut Result&lt;T, E&gt;</code>) to …","","","Converts from <code>&amp;mut Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;mut T, &amp;mut E&gt;</code>.","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Returns a raw pointer to the vector’s buffer, or a …","","","Converts from <code>&amp;Result&lt;T, E&gt;</code> to <code>Result&lt;&amp;T, &amp;E&gt;</code>.","Extracts a slice containing the entire vector.","Same as <code>client_invoke</code>, but via an <code>AsyncTransport</code>.","The bytes of the serialized request.","","","","","","","","","","","","","","","","Returns the total number of elements the vector can hold …","","","","Clears the vector, removing all values.","","Invokes the method identified by <code>method_id</code> via the …","","","","","","","","","","","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by cloning the …","","","","Maps a <code>Result&lt;&amp;T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Maps a <code>Result&lt;&amp;mut T, E&gt;</code> to a <code>Result&lt;T, E&gt;</code> by copying the …","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","","","Creates an empty <code>Vec&lt;T&gt;</code>.","","","Removes the specified range from the vector in bulk, …","","","","","","","","","","","","","","","","","","","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>.","Creates a <code>Response</code> representing an error.","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","","","","","Creates an iterator which uses a closure to determine if …","Converts from <code>Result&lt;Result&lt;T, E&gt;, E&gt;</code> to <code>Result&lt;T, E&gt;</code>","","","","","","","","Creates a <code>String</code> using interpolation of runtime …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Returns the argument unchanged.","","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Convert a clone-on-write slice into a vector.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Convert a boxed slice into a vector by transferring …","Returns the argument unchanged.","","","","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","","Creates a <code>Vec&lt;T&gt;</code> directly from a pointer, a capacity, and …","Creates a <code>Vec&lt;T, A&gt;</code> directly from a pointer, a capacity, a …","","","","","","","Inserts an element at position <code>index</code> within the vector, …","Calls the provided closure with a reference to the …","Calls the provided closure with a reference to the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Returns the contained <code>Err</code> value, but never panics.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","Creates a consuming iterator, that is, one that moves each …","","Returns a consuming iterator over the possibly contained …","","","Returns the contained <code>Ok</code> value, but never panics.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","See <code>Transport::invoke</code>.","Returns <code>true</code> if the vector contains no elements.","Returns <code>true</code> if the result is <code>Err</code>.","Returns <code>true</code> if the result is <code>Err</code> and the value inside of …","Returns <code>true</code> if the result is <code>Ok</code>.","Returns <code>true</code> if the result is <code>Ok</code> and the value inside of …","","Returns an iterator over the possibly contained value.","Returns a mutable iterator over the possibly contained …","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the number of elements in the vector, also …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;U, E&gt;</code> by applying a function …","Maps a <code>Result&lt;T, E&gt;</code> to <code>Result&lt;T, F&gt;</code> by applying a function …","Returns the provided default (if <code>Err</code>), or applies a …","Maps a <code>Result&lt;T, E&gt;</code> to <code>U</code> by applying fallback function …","English message that helps developers understand and …","The id of the method to invoke. This is usually specified …","","","","","","","","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","Converts from <code>Result&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>.","Returns <code>res</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","Calls <code>op</code> if the result is <code>Err</code>, otherwise returns the <code>Ok</code> …","","","","","Removes the last element from a vector and returns it, or …","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Appends an element to the back of a collection.","Appends an element if there is sufficient spare capacity, …","","","","","Removes and returns the element at position <code>index</code> within …","","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> more …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Nested message and enum types in <code>Response</code>.","","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate, …","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of the vector as much as possible.","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Creates a <code>Response</code> representing success.","Takes each element in the <code>Iterator</code>: if it is an <code>Err</code>, no …","Removes an element from the vector and returns it.","","","","","Transposes a <code>Result</code> of an <code>Option</code> into an <code>Option</code> of a <code>Result</code>…","Shortens the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","","","","","","","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value.","Returns the contained <code>Err</code> value, consuming the <code>self</code> value, …","Returns the contained <code>Ok</code> value or a provided default.","Returns the contained <code>Ok</code> value or a default","Returns the contained <code>Ok</code> value or computes it from a …","Returns the contained <code>Ok</code> value, consuming the <code>self</code> value, …","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","","","The bytes of the serialized response, if successful.","A status / error message, in case of failure.","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Decodes an instance of the message from a buffer, and …","","","",""],"i":[30,30,0,30,30,30,0,6,20,11,30,30,30,30,0,30,6,30,30,0,30,0,0,0,0,0,30,30,30,30,0,3,3,6,6,3,6,6,3,3,6,3,3,3,3,3,6,3,0,18,18,19,15,30,3,3,6,18,19,15,30,3,3,6,6,3,3,18,19,3,3,0,18,19,3,6,3,6,18,19,3,6,6,6,3,6,15,6,6,3,3,3,18,19,3,3,3,3,3,18,19,3,18,19,15,30,3,3,3,3,3,3,3,3,6,3,6,6,0,6,6,3,3,3,3,3,3,3,3,3,6,3,18,19,15,30,3,6,0,18,19,15,30,30,3,3,3,3,3,3,3,3,3,3,3,3,3,6,6,6,3,6,6,3,3,6,6,3,6,3,3,3,6,6,18,19,15,30,3,6,3,6,3,3,3,3,6,6,6,6,3,3,20,11,3,6,6,6,6,3,6,6,3,3,6,6,6,6,15,18,3,3,3,3,3,3,15,3,3,15,6,6,6,3,3,3,6,3,6,3,3,3,3,3,3,3,6,3,3,3,3,0,19,3,3,3,3,3,3,3,3,3,0,6,3,18,19,3,6,6,3,18,19,15,30,3,6,18,19,15,30,3,6,3,3,18,19,15,30,3,6,6,6,6,6,6,6,6,3,3,3,3,3,78,78,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[1,2]],4]],[[[3,[5]]],5],[[6,6],6],[[6,7],6],[[[3,[5]],[3,[5]]]],[[[6,[8]]],6],[[[6,[9]]],6],[[[3,[5]]],[[3,[5]]]],[[[3,[5]]],10],[6,6],[[[3,[5]]]],[[[3,[5]]],10],[[[3,[5]]]],[[[3,[5]]],[[3,[5]]]],[[[3,[5]]],10],[6,6],[[[3,[5]]],10],[[11,12,13],[[6,[[6,[[0,[13,14]],15]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[[3,[5]]],10],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[5]]],10],[[]],[6,16],[[[3,[5]]],4],[[[3,[1,2]]],17],[18],[19],[[[3,[5]]]],[[[3,[1,2]]]],[[20,12,13],[[6,[[6,[[0,[13,14]],15]]]]]],[18,18],[19,19],[[[3,[21,[0,[5,21]]]]],[[3,[21,[0,[5,21]]]]]],[[[6,[21,21]]],[[6,[21,21]]]],[[[3,[21,[0,[5,21]]]],[3,[21,[0,[5,21]]]]]],[[[6,[21,21]],[6,[21,21]]]],[[]],[[]],[[]],[[]],[[[6,[21]]],[[6,[21]]]],[[[6,[21]]],[[6,[21]]]],[[[3,[22,5]],[3,[22,5]]],23],[[[6,[22,22]],[6,[22,22]]],23],0,[[[6,[24]]],[[6,[24]]]],[[[6,[24]]],[[6,[24]]]],[[[3,[[25,[[25,[[25,[25]]]]]],5]]]],[[[3,[5]],26]],[[[3,[5]],26]],[[],18],[[],19],[[],[[3,[2]]]],[[[3,[5]]],10],[[[3,[5]]],10],[[[3,[5]],[27,[4]]],[[28,[5]]]],[[[3,[5]]]],[18,4],[19,4],[[[3,[1,2]]],4],[[18,18],29],[[19,19],29],[[15,15],29],[[30,30],29],[[[3,[25,5]],31],29],[[[3,[25,5]],[3,[5]]],29],[[[3,[25,5]],10],29],[[[3,[1,2]],32],29],[[[3,[1,2]],33],29],[[[3,[25,5]],10],29],[[[3,[25,5]],10],29],[[[3,[25,5]],31],29],[[[6,[[25,[[25,[[25,[25]]]]]],[25,[[25,[[25,[25]]]]]]]],[6,[[25,[[25,[[25,[25]]]]]],[25,[[25,[[25,[25]]]]]]]]],29],[[],29],[[],29],[6,34],[15,19],[[[6,[35]],36]],[[[6,[35]],36]],[[[3,[24,5]],37]],[[[3,[5]],37]],[[[3,[21,5]],[10,[21]]]],[[[3,[21,5]],[27,[4]]]],[[[3,[24,5]],24]],[[[3,[5]]]],[[[3,[24,5]],4]],[[[3,[5]],4]],[[[3,[5]],26],[[38,[26,5]]]],[[[6,[6]]],6],[[[3,[1,5]]],[[6,[39]]]],[[18,40],41],[[19,40],41],[[15,40],41],[[30,40],41],[[[3,[35,5]],40],[[6,[42]]]],[[[6,[35,35]],40],[[6,[42]]]],0,[[]],[[]],[[]],[[]],[12,30],[[[43,[5]]],[[3,[5]]]],[[[10,[21]]],[[3,[21,2]]]],[[]],[32,[[3,[1,2]]]],[36,[[3,[1,2]]]],[33,[[3,[1,2]]]],[44,[[3,[1,2]]]],[[[10,[21]]],[[3,[21,2]]]],[[[45,[5]]],[[3,[5]]]],[46,[[3,[1,2]]]],[[[47,[10]]],[[3,[2]]]],[31,[[3,[2]]]],[[[48,[10,5]]],[[3,[5]]]],[[]],[49,[[6,[50,51]]]],[49,[[6,[50,51]]]],[37,[[3,[2]]]],[37,[[6,[52]]]],[[],6],[[4,4],[[3,[2]]]],[[4,4,5],[[3,[5]]]],[[[6,[53]]],[[6,[54]]]],[55,[[6,[54]]]],[[[3,[56,5]],57]],[[[6,[56,56]],57]],[[[3,[5]],[58,[10]]]],[[[3,[5]],[58,[10]]]],[[[3,[5]],4]],[[6,7],6],[[6,7],6],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[5]]],[[48,[10,5]]]],[[[6,[[60,[59]]]]]],[[[3,[31,5]]],[[3,[5]]]],[[[3,[5]]]],[[[3,[5]]]],[[[3,[5]]]],[6,61],[6,62],[6,63],[[[6,[[60,[59]]]]]],[[[3,[5]]]],[[[3,[5]]]],[[[10,[1]]],[[6,[[3,[1]]]]]],[[[10,[1]]],[[65,[[48,[64]]]]]],[[[3,[5]]],29],[6,29],[[6,7],29],[6,29],[[6,7],29],[[[3,[1,5]]],29],[6,62],[6,63],[[[3,[5]]],10],[[[3,[5]]],4],[[6,7],6],[[6,7],6],[[6,7]],[[6,7,7]],0,0,[[[3,[25,5]],10],29],[[[3,[25,5]],31],29],[[[3,[25,5]],31],29],[[[3,[25,5]],[3,[5]]],29],[[[3,[25,5]],10],29],[[[3,[25,5]],10],29],[30,15],[[],[[3,[2]]]],[5,[[3,[5]]]],[[30,[60,[46]]],15],[6,34],[[6,6],6],[[6,7],6],[[[3,[1,2]],33],[[34,[23]]]],[[[3,[1,2]],32],[[34,[23]]]],[[[3,[[66,[[66,[[66,[66]]]]]],5]],[3,[[66,[[66,[[66,[66]]]]]],5]]],[[34,[23]]]],[[[6,[[66,[[66,[[66,[66]]]]]],[66,[[66,[[66,[66]]]]]]]],[6,[[66,[[66,[[66,[66]]]]]],[66,[[66,[[66,[66]]]]]]]]],[[34,[23]]]],[[[3,[5]]],34],[67,[[6,[68]]]],[[[3,[5]]]],[[[3,[5]]],6],[[[3,[1,2]],69]],[[[3,[1,2]],1,4]],[[[3,[1,2]],[10,[1]]]],[[[3,[1,2]]],4],[[[3,[5]],4]],[[[6,[70,35]]],71],[[[3,[5]],4]],[[[3,[5]],4]],[[[3,[21,5]],4,21]],[[[3,[5]],4,26]],0,0,[[[3,[5]],26]],[[[3,[5]],26]],[[[3,[5]],4]],[[[3,[5]],4]],[[[3,[5]]]],[[[3,[5]]],[[10,[72]]]],[[[3,[5]],[27,[4]],37],[[73,[5]]]],[[[3,[5]]]],[[[3,[21,5]],4],[[3,[21,5]]]],[[[3,[1]]],19],[67,[[6,[74]]]],[[[3,[5]],4]],[[]],[[]],[[]],[[]],[[[6,[34]]],[[34,[6]]]],[[[3,[5]],4]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[3,[5]],4],[[6,[75]]]],[[[3,[5]],4],[[6,[75]]]],[[],76],[[],76],[[],76],[[],76],[[],76],[[],76],[[[6,[35]]]],[[[6,[35]]]],[6],[6],[[[6,[14]]],14],[[6,7]],[6],[4,[[3,[2]]]],[[4,5],[[3,[5]]]],[[[3,[1,5]],[10,[1]]],[[6,[4,39]]]],[[[3,[1,5]],[10,[1]]],[[6,[39]]]],[[[3,[1,5]],[10,[77]]],[[6,[4,39]]]],0,0,0,[[]],[[]],[78,78],[[]],[[78,79]],[78,4],[[78,78],29],[[78,40],41],[[]],[[]],[[[34,[78]],12,80,69,81],[[6,[82]]]],[[]],[[],6],[[],6],[[],76]],"c":[],"p":[[15,"u8"],[3,"Global"],[3,"Vec"],[15,"usize"],[8,"Allocator"],[4,"Result"],[8,"FnOnce"],[8,"Deref"],[8,"DerefMut"],[15,"slice"],[8,"AsyncTransport"],[15,"u32"],[8,"Message"],[8,"Default"],[3,"Status"],[4,"ControlFlow"],[3,"UninitSlice"],[3,"Request"],[3,"Response"],[8,"Transport"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[8,"Copy"],[8,"PartialEq"],[8,"FnMut"],[8,"RangeBounds"],[3,"Drain"],[15,"bool"],[4,"StatusCode"],[15,"array"],[3,"BytesMut"],[3,"Bytes"],[4,"Option"],[8,"Debug"],[15,"str"],[8,"IntoIterator"],[3,"ExtractIf"],[3,"Error"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"BinaryHeap"],[3,"CString"],[3,"VecDeque"],[3,"String"],[4,"Cow"],[3,"Box"],[3,"StreamResult"],[4,"MZStatus"],[4,"MZError"],[8,"FromIterator"],[4,"Infallible"],[8,"From"],[3,"Yeet"],[8,"Hash"],[8,"Hasher"],[8,"SliceIndex"],[15,"never"],[8,"Into"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[8,"Future"],[3,"Pin"],[8,"PartialOrd"],[8,"Iterator"],[8,"Product"],[8,"Buf"],[8,"Termination"],[3,"ExitCode"],[19,"MaybeUninit"],[3,"Splice"],[8,"Sum"],[3,"TryReserveError"],[3,"TypeId"],[3,"IoSlice"],[4,"Response"],[8,"BufMut"],[4,"WireType"],[3,"DecodeContext"],[3,"DecodeError"]]},\
"micro_rpc_build":{"doc":"This crate allows compiling protobuf services to Rust in …","t":"F","n":["compile"],"q":[[0,"micro_rpc_build"]],"d":["Compile Rust server code from the services in the provided …"],"i":[0],"f":[[[[3,[[2,[1]]]],[3,[[2,[1]]]]]]],"c":[],"p":[[3,"Path"],[8,"AsRef"],[15,"slice"]]},\
"oak_channel":{"doc":"","t":"IIIAKKAKDDLLLLLLLLLLLLLLLLLLLF","n":["Channel","Read","Write","client","flush","read_exact","server","write_all","ClientChannelHandle","RequestEncoder","borrow","borrow","borrow_mut","borrow_mut","default","encode_request","from","from","into","into","new","read_response","try_from","try_from","try_into","try_into","type_id","type_id","write_request","start_blocking_server"],"q":[[0,"oak_channel"],[8,"oak_channel::client"],[29,"oak_channel::server"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Starts a blocking server that listens for requests on the …"],"i":[0,0,0,0,13,14,0,13,0,0,7,4,7,4,4,4,7,4,7,4,7,7,7,4,7,4,7,4,7,0],"f":[0,0,0,0,[[],1],[[[3,[2]]],1],0,[[[3,[2]]],1],0,0,[[]],[[]],[[]],[[]],[[],4],0,[[]],[[]],[[]],[[]],[[[6,[5]]],7],[7,1],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,[[[6,[5]],10,11],[[1,[12]]]]],"c":[],"p":[[6,"Result"],[15,"u8"],[15,"slice"],[3,"RequestEncoder"],[8,"Channel"],[3,"Box"],[3,"ClientChannelHandle"],[4,"Result"],[3,"TypeId"],[8,"Transport"],[8,"SampleStore"],[15,"never"],[8,"Write"],[8,"Read"]]},\
"oak_client":{"doc":"","t":"DLLLLLLLAALLLALAAADDDDDDDDDDDMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMAMAMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLIIQDLLLKLLLKLLLLLLDDIDIMLLLLLLMLLLKLLLLLLLLLLLLLLLKLLLL","n":["OakClient","borrow","borrow_mut","create","from","into","into_request","invoke","proto","transport","try_from","try_into","type_id","verifier","vzip","oak","session","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","BinaryAttestation","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","RequestWrapper","ResponseWrapper","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","base64_pem_encoded_rekor_public_key","binary_attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_body","encrypted_body","encryption_public_key","endorsement_statement","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","rekor_log_entry","request","request_wrapper","response","response_wrapper","signed_application_data","signing_public_key","streaming_session_client","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","GetPublicKeyRequest","InvokeRequest","Request","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetPublicKeyResponse","InvokeResponse","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","StreamingSessionClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","into","into_request","new","send_compressed","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","AsyncEvidenceProvider","AsyncTransport","Error","GrpcStreamingTransport","borrow","borrow_mut","from","get_evidence","get_evidence","into","into_request","invoke","invoke","new","try_from","try_into","type_id","vzip","AmdSevSnpVerifier","Evidence","EvidenceProvider","ReferenceValue","Verifier","binary_hash","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","enclave_public_key","from","from","from","get_evidence","into","into","into","into_request","into_request","into_request","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip"],"q":[[0,"oak_client"],[15,"oak_client::proto"],[16,"oak_client::proto::oak"],[17,"oak_client::proto::oak::session"],[18,"oak_client::proto::oak::session::v1"],[249,"oak_client::proto::oak::session::v1::request_wrapper"],[270,"oak_client::proto::oak::session::v1::response_wrapper"],[291,"oak_client::proto::oak::session::v1::streaming_session_client"],[313,"oak_client::transport"],[331,"oak_client::verifier"]],"d":["Client for connecting to Oak. Represents a Relying Party …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","Public key of rekor at the time of uploading the …","The binary attestation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","","Body of the request, encrypted with the enclave public key.","Body of the request, encrypted with the client public or …","The serialized public key part of the enclave encryption …","The serialized binary endorsement statement from the …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The serialized Rekor LogEntry as proof of the inclusion of …","","Nested message and enum types in <code>RequestWrapper</code>.","","Nested message and enum types in <code>ResponseWrapper</code>.","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","Generated client implementations.","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","Service definition for streaming communication with an Oak …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Compress requests with the given encoding.","Used to send a sequence of messages ensuring that they are …","","","","","","","","","Same as <code>Transport</code>, but for async use cases.","See <code>Transport::Error</code>.","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","See <code>Transport::invoke</code>.","","","","","","","","Attestation evidence used to verify the validity of the …","","Reference values used by the verifier to appraise the …","Verifier that appraises the attestation evidence and …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,0,0,3,3,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,11,17,12,12,14,13,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,15,11,12,13,14,15,16,17,18,19,20,21,15,11,12,13,14,15,16,17,18,19,20,21,18,19,11,14,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,14,20,0,21,0,11,11,0,13,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,11,12,13,14,15,16,17,18,19,20,21,26,26,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,34,34,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,1,0,57,57,57,2,57,57,57,1,57,57,57,57,57,57,0,0,0,0,0,60,59,60,61,59,60,61,59,59,60,61,62,59,60,61,59,60,61,59,60,61,59,60,61,59,60,61,63,61,59,60,61],"f":[0,[[]],[[]],[[[0,[1,2]]],[[4,[[3,[[0,[1,2]]]]]]]],[[]],[[]],[[],5],[[[3,[[0,[1,2]]]],[7,[6]]],[[4,[[8,[6]]]]]],0,0,[[],9],[[],9],[[],10],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],18],[[],19],[[],20],[[],21],0,[11,22],[12,22],[13,22],[14,22],[15,22],[16,22],[17,22],[18,22],[19,22],[20,22],[21,22],0,0,0,0,[[11,11],23],[[12,12],23],[[13,13],23],[[14,14],23],[[15,15],23],[[16,16],23],[[17,17],23],[[18,18],23],[[19,19],23],[[20,20],23],[[21,21],23],[[11,24],25],[[12,24],25],[[13,24],25],[[14,24],25],[[15,24],25],[[16,24],25],[[17,24],25],[[18,24],25],[[19,24],25],[[20,24],25],[[21,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[26,26],[[]],[[26,27]],[26,22],[[26,26],23],[[26,24],25],[[]],[[]],[[]],[[],5],[[[28,[26]],29,30,31,32],[[9,[33]]]],[[]],[[],9],[[],9],[[],10],[[]],0,0,0,[[]],[[]],[34,34],[[]],[[34,27]],[34,22],[[34,34],23],[[34,24],25],[[]],[[]],[[]],[[],5],[[[28,[34]],29,30,31,32],[[9,[33]]]],[[]],[[],9],[[],9],[[],10],[[]],0,[[[37,[[36,[35]]]],38],[[37,[[36,[35]]]]]],[[]],[[]],[[[37,[39]]],[[37,[39]]]],[[]],[[[41,[40]]],[[9,[[37,[42]],43]]]],[[[37,[44]],24],25],[[]],[[]],[[]],[[],5],[[[36,[35]]],[[37,[[36,[35]]]]]],[[[37,[[36,[35]]]],38],[[37,[[36,[35]]]]]],[[[37,[[36,[35]]]],45],[[9,[[47,[[46,[21]]]],48]]]],[[]],[[],9],[[],9],[[],10],[[]],[[[50,[[49,[35]]]],[36,[35]],51],[[37,[[52,[[50,[[49,[35]]]],[36,[35]],51]]]]]],[[[36,[35]],53],[[37,[[36,[35]]]]]],0,0,0,0,[[]],[[]],[[]],[[],[[56,[[55,[54]]]]]],[57,[[56,[[55,[54]]]]]],[[]],[[],5],[[[7,[6]]],[[56,[[55,[54,58]]]]]],[[57,[7,[6]]],[[56,[[55,[54]]]]]],[[[37,[42]]],57],[[],9],[[],9],[[],10],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],[[4,[59]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[59,60],4],[[61,59,60],4],[[]],[[]],[[]]],"c":[],"p":[[8,"AsyncTransport"],[8,"AsyncEvidenceProvider"],[3,"OakClient"],[6,"Result"],[3,"Request"],[15,"u8"],[15,"slice"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"AttestationEvidence"],[3,"AttestationBundle"],[3,"AttestationEndorsement"],[3,"BinaryAttestation"],[3,"ApplicationData"],[3,"GetPublicKeyRequest"],[3,"GetPublicKeyResponse"],[3,"InvokeRequest"],[3,"InvokeResponse"],[3,"RequestWrapper"],[3,"ResponseWrapper"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Request"],[8,"BufMut"],[4,"Option"],[15,"u32"],[4,"WireType"],[8,"Buf"],[3,"DecodeContext"],[3,"DecodeError"],[4,"Response"],[6,"BoxBody"],[8,"GrpcService"],[3,"StreamingSessionClient"],[4,"CompressionEncoding"],[8,"Clone"],[3,"Endpoint"],[8,"TryInto"],[3,"Channel"],[3,"Error"],[8,"Debug"],[8,"IntoStreamingRequest"],[3,"Streaming"],[3,"Response"],[3,"Status"],[3,"Request"],[8,"Service"],[8,"Interceptor"],[3,"InterceptedService"],[3,"Uri"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"GrpcStreamingTransport"],[3,"Global"],[3,"Evidence"],[3,"ReferenceValue"],[3,"AmdSevSnpVerifier"],[8,"EvidenceProvider"],[8,"Verifier"]]},\
"oak_containers_hello_world_trusted_app":{"doc":"","t":"AAFDLLLLLLLLLLLLLLLLL","n":["app_service","orchestrator_client","create","OrchestratorClient","borrow","borrow_mut","clone","clone_into","create","from","from_ref","get_application_config","get_crypto_context","into","into_request","notify_app_ready","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"oak_containers_hello_world_trusted_app"],[2,"oak_containers_hello_world_trusted_app::app_service"],[3,"oak_containers_hello_world_trusted_app::orchestrator_client"]],"d":["","","","Utility struct used to interface with the launcher","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,0,[[1,2,[4,[3]]],[[6,[5]]]],0,[[]],[[]],[2,2],[[]],[[],[[6,[2,[8,[7]]]]]],[[]],[[]],[2,[[6,[[4,[3]],[8,[7]]]]]],[[2,[9,[3]]],[[6,[10,[8,[7]]]]]],[[]],[[],11],[2,[[6,[[8,[7]]]]]],[[]],[[],6],[[],6],[[],12],[[]]],"c":[],"p":[[3,"TcpListener"],[3,"OrchestratorClient"],[15,"u8"],[3,"Vec"],[3,"Error"],[4,"Result"],[8,"Error"],[3,"Box"],[15,"slice"],[3,"CryptoContext"],[3,"Request"],[3,"TypeId"]]},\
"oak_containers_hello_world_untrusted_app":{"doc":"","t":"DLLLLLLLLLLLLL","n":["UntrustedApp","borrow","borrow_mut","create","from","get_endorsed_evidence","hello","into","into_request","kill","try_from","try_into","type_id","vzip"],"q":[[0,"oak_containers_hello_world_untrusted_app"]],"d":["","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[1,[[5,[2,[4,[3]]]]]],[[]],[2,[[7,[6]]]],[[2,8],[[5,[9,[4,[3]]]]]],[[]],[[],10],[2],[[],5],[[],5],[[],11],[[]]],"c":[],"p":[[3,"Args"],[3,"UntrustedApp"],[8,"Error"],[3,"Box"],[4,"Result"],[3,"AttestationBundle"],[6,"Result"],[15,"str"],[3,"String"],[3,"Request"],[3,"TypeId"]]},\
"oak_containers_launcher":{"doc":"","t":"DDLLLLLLLLLLLLLLLLLLLLLLLFALLLLLLLLLLLAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLAAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQIDLLLLLLLLLLLKKKLLLLKLLKLLLLLLLIDLLLLLLLLLLLKKKLLLLKLLLLLLLLLADDDDMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLMLLLLLLLLLLLLLLLLLLLLADDDDDDDDDMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Args","Launcher","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command_for_update","create","default_for_test","fmt","from","from","from_arg_matches","from_arg_matches_mut","get_endorsed_evidence","get_trusted_app_address","group_id","into","into","into_request","into_request","kill","path_exists","proto","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","vzip","wait","oak","containers","crypto","session","GetApplicationConfigResponse","GetAttestationEvidenceResponse","GetCryptoContextRequest","GetCryptoContextResponse","GetImageResponse","SendAttestationEvidenceRequest","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","context","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","evidence","evidence","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","image_chunk","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","launcher_server","orchestrator_server","serialized_encapsulated_public_key","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","GetContainerBundleStream","GetOakSystemImageStream","Launcher","LauncherServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_make_service","into_request","new","notify_app_ready","poll_ready","poll_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","Orchestrator","OrchestratorServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","get_application_config","get_attestation_evidence","get_crypto_context","into","into_make_service","into_request","new","notify_app_ready","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","v1","AeadEncryptedMessage","CryptoContext","EncryptedRequest","EncryptedResponse","associated_data","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into_request","into_request","into_request","into_request","request_base_nonce","request_key","request_sequence_number","response_base_nonce","response_key","response_sequence_number","serialized_encapsulated_public_key","serialized_encapsulated_public_key","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","BinaryAttestation","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","base64_pem_encoded_rekor_public_key","binary_attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_body","encrypted_body","encryption_public_key","endorsement_statement","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","rekor_log_entry","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_containers_launcher"],[38,"oak_containers_launcher::proto"],[39,"oak_containers_launcher::proto::oak"],[42,"oak_containers_launcher::proto::oak::containers"],[164,"oak_containers_launcher::proto::oak::containers::launcher_server"],[197,"oak_containers_launcher::proto::oak::containers::orchestrator_server"],[227,"oak_containers_launcher::proto::oak::crypto"],[228,"oak_containers_launcher::proto::oak::crypto::v1"],[316,"oak_containers_launcher::proto::oak::session"],[317,"oak_containers_launcher::proto::oak::session::v1"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Gets the endorsed attestation evidence that the untrusted …","Gets the address that the untrusted application can use to …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","Session keys for decrypting client requests and encrypting …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Generated server implementations.","Generated server implementations.","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Server streaming response type for the GetContainerBundle …","Server streaming response type for the GetOakSystemImage …","Generated trait containing gRPC methods that should be …","Defines the service exposed by the launcher, that can be …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","","","Notifies the launcher that the trusted app is ready to …","","","Sends Attestation Evidence containing the Attestation …","Compress responses with the given encoding, if the client …","","","","","","","Generated trait containing gRPC methods that should be …","Defines the service exposed by the orchestrator, that can …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Exposes the previously loaded trusted application config …","Returns Attestation Evidence containing the Attestation …","Returns crypto context for decrypting client requests and …","Calls <code>U::from(self)</code>.","","","","Notifies the orchestrator that the trusted app is ready to …","","","Compress responses with the given encoding, if the client …","","","","","","","","Message encrypted with Authenticated Encryption with …","Envelope containing session keys required to …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","AEAD key and nonce for encrypting/decrypting client …","","","Symmetric key and nonce for encrypting/decrypting enclave …","","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","Public key of rekor at the time of uploading the …","The binary attestation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","Body of the request, encrypted with the enclave public key.","Body of the request, encrypted with the client public or …","The serialized public key part of the enclave encryption …","The serialized binary endorsement statement from the …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","The serialized Rekor LogEntry as proof of the inclusion of …","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,2,3,2,3,2,2,2,3,2,2,3,2,2,2,3,3,2,3,2,3,2,3,0,0,3,2,3,2,3,2,2,2,3,2,3,0,0,0,0,0,0,0,0,0,0,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,21,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,22,23,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,20,21,22,23,24,25,20,21,22,23,24,25,0,0,24,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,20,21,22,23,24,25,28,28,0,0,29,29,29,29,29,29,29,29,29,29,29,28,28,28,29,29,29,29,28,29,29,28,29,29,29,29,29,29,29,0,0,45,45,45,45,45,45,45,45,45,45,45,44,44,44,45,45,45,45,44,45,45,45,45,45,45,45,45,45,0,0,0,0,0,48,46,47,48,49,46,47,48,49,48,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,49,49,49,49,49,49,46,46,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,0,0,0,0,0,0,0,0,0,0,54,53,58,10,10,55,54,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,56,53,10,54,55,56,57,58,59,60,56,53,10,54,55,56,57,58,59,60,59,60,53,55,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,55,53,53,54,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60,53,10,54,55,56,57,58,59,60],"f":[0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[[],1],[[],1],[2,[[5,[3,4]]]],[[],2],[[2,6],7],[[]],[[]],[8,[[5,[2,9]]]],[8,[[5,[2,9]]]],[3,[[11,[10]]]],[3,[[5,[12,4]]]],[[],[[14,[13]]]],[[]],[[]],[[],15],[[],15],[3],[16,[[5,[17,18]]]],0,[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[2,8],[[5,[9]]]],[[2,8],[[5,[9]]]],[[]],[[]],[3,[[5,[4]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[21],[22],[23],[24],[25],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],20],[[],21],[[],22],[[],23],[[],24],[[],25],[20,26],[21,26],[22,26],[23,26],[24,26],[25,26],[[20,20],27],[[21,21],27],[[22,22],27],[[23,23],27],[[24,24],27],[[25,25],27],0,0,[[20,6],7],[[21,6],7],[[22,6],7],[[23,6],7],[[24,6],7],[[25,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[[29,[28]],30],[[29,[28]]]],[[]],[[]],[31],[[[29,[28]],[31,[[0,[32,33]]]]]],[[[29,[28]]],[[29,[28]]]],[[]],[[[29,[[0,[34,28]]]],6],7],[[]],[[[35,[28]]],[[29,[28]]]],[[]],[15,[[38,[[37,[36]]]]]],[15,[[38,[[37,[36]]]]]],[15,[[38,[[37,[36]]]]]],[[]],[[],39],[[],15],[28,[[29,[28]]]],[15,[[38,[[37,[36]]]]]],[40,[[41,[5]]]],[[[29,[28]],40],[[41,[5]]]],[[[15,[22]]],[[38,[[37,[36]]]]]],[[[29,[28]],30],[[29,[28]]]],[[]],[[],5],[[],5],[[],19],[[]],[[28,42],[[43,[[29,[28]],42]]]],0,0,[[[45,[44]],30],[[45,[44]]]],[[]],[[]],[[[45,[44]],[31,[[0,[32,33]]]]]],[31],[[[45,[44]]],[[45,[44]]]],[[]],[[[45,[[0,[34,44]]]],6],7],[[]],[[[35,[44]]],[[45,[44]]]],[[]],[15,[[38,[[37,[36]]]]]],[15,[[38,[[37,[36]]]]]],[[[15,[24]]],[[38,[[37,[36]]]]]],[[]],[[],39],[[],15],[44,[[45,[44]]]],[15,[[38,[[37,[36]]]]]],[40,[[41,[5]]]],[[[45,[44]],40],[[41,[5]]]],[[[45,[44]],30],[[45,[44]]]],[[]],[[],5],[[],5],[[],19],[[]],[[44,42],[[43,[[45,[44]],42]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[46],[47],[48],[49],[46,46],[47,47],[48,48],[49,49],[[]],[[]],[[]],[[]],[[],46],[[],47],[[],48],[[],49],[46,26],[47,26],[48,26],[49,26],0,0,[[46,46],27],[[47,47],27],[[48,48],27],[[49,49],27],[[46,6],[[5,[50]]]],[[47,6],[[5,[50]]]],[[48,6],[[5,[50]]]],[[49,6],[[5,[50]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,[46,[[52,[51]]]],0,[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53],[10],[54],[55],[56],[57],[58],[59],[60],[53,53],[10,10],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],53],[[],10],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],0,[53,26],[10,26],[54,26],[55,26],[56,26],[57,26],[58,26],[59,26],[60,26],0,0,0,0,[[53,53],27],[[10,10],27],[[54,54],27],[[55,55],27],[[56,56],27],[[57,57],27],[[58,58],27],[[59,59],27],[[60,60],27],[[53,6],[[5,[50]]]],[[10,6],[[5,[50]]]],[[54,6],[[5,[50]]]],[[55,6],[[5,[50]]]],[[56,6],[[5,[50]]]],[[57,6],[[5,[50]]]],[[58,6],[[5,[50]]]],[[59,6],[[5,[50]]]],[[60,6],[[5,[50]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"Command"],[3,"Args"],[3,"Launcher"],[3,"Error"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"AttestationBundle"],[6,"Result"],[4,"SocketAddr"],[3,"Id"],[4,"Option"],[3,"Request"],[15,"str"],[3,"PathBuf"],[3,"String"],[3,"TypeId"],[3,"GetImageResponse"],[3,"GetApplicationConfigResponse"],[3,"SendAttestationEvidenceRequest"],[3,"GetAttestationEvidenceResponse"],[3,"GetCryptoContextRequest"],[3,"GetCryptoContextResponse"],[15,"usize"],[15,"bool"],[8,"Launcher"],[3,"LauncherServer"],[4,"CompressionEncoding"],[3,"Request"],[8,"Body"],[8,"Send"],[8,"Debug"],[3,"Arc"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"IntoMakeService"],[3,"Context"],[4,"Poll"],[8,"Interceptor"],[3,"InterceptedService"],[8,"Orchestrator"],[3,"OrchestratorServer"],[3,"EncryptedRequest"],[3,"EncryptedResponse"],[3,"AeadEncryptedMessage"],[3,"CryptoContext"],[3,"Error"],[15,"u8"],[15,"slice"],[3,"AttestationEvidence"],[3,"AttestationEndorsement"],[3,"BinaryAttestation"],[3,"ApplicationData"],[3,"GetPublicKeyRequest"],[3,"GetPublicKeyResponse"],[3,"InvokeRequest"],[3,"InvokeResponse"]]},\
"oak_containers_orchestrator":{"doc":"","t":"RRAAAFDLLFLLLLLLLF","n":["IPC_SOCKET_FILE_NAME","UTIL_DIR","container_runtime","ipc_server","logging","run","ServiceImplementation","borrow","borrow_mut","create","from","into","into_request","try_from","try_into","type_id","vzip","setup"],"q":[[0,"oak_containers_orchestrator"],[5,"oak_containers_orchestrator::container_runtime"],[6,"oak_containers_orchestrator::ipc_server"],[17,"oak_containers_orchestrator::logging"]],"d":["","","Minimal implementation of a container runtime using …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Setup logging to syslog."],"i":[0,0,0,0,0,0,0,16,16,0,16,16,16,16,16,16,16,0],"f":[0,0,0,0,0,[[[2,[1]]],[[4,[3]]]],0,[[]],[[]],[[[6,[5]],[8,[7]],9,[10,[1]],11],[[4,[3]]]],[[]],[[]],[[],12],[[],4],[[],4],[[],13],[[]],[[],[[4,[[15,[14]]]]]]],"c":[],"p":[[15,"u8"],[15,"slice"],[3,"Error"],[4,"Result"],[3,"Path"],[8,"AsRef"],[3,"EncryptionKeyProvider"],[3,"Arc"],[3,"Attester"],[3,"Vec"],[3,"LauncherClient"],[3,"Request"],[3,"TypeId"],[8,"Error"],[3,"Box"],[3,"ServiceImplementation"]]},\
"oak_containers_orchestrator_client":{"doc":"","t":"DLLLLLLLLLALLLLLAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLAAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLADDDDMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLMLLLLLLLLLLLLLLLLLLLLADDDDDDDDDMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["LauncherClient","borrow","borrow_mut","create","from","get_application_config","get_container_bundle","into","into_request","notify_app_ready","proto","send_attestation_evidence","try_from","try_into","type_id","vzip","oak","containers","crypto","session","GetApplicationConfigResponse","GetAttestationEvidenceResponse","GetCryptoContextRequest","GetCryptoContextResponse","GetImageResponse","SendAttestationEvidenceRequest","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","context","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","evidence","evidence","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","image_chunk","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","launcher_client","orchestrator_client","serialized_encapsulated_public_key","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","LauncherClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_container_bundle","get_oak_system_image","into","into_request","new","notify_app_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OrchestratorClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_attestation_evidence","get_crypto_context","into","into_request","new","notify_app_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","v1","AeadEncryptedMessage","CryptoContext","EncryptedRequest","EncryptedResponse","associated_data","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into_request","into_request","into_request","into_request","request_base_nonce","request_key","request_sequence_number","response_base_nonce","response_key","response_sequence_number","serialized_encapsulated_public_key","serialized_encapsulated_public_key","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","BinaryAttestation","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","base64_pem_encoded_rekor_public_key","binary_attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_body","encrypted_body","encryption_public_key","endorsement_statement","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","rekor_log_entry","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"oak_containers_orchestrator_client"],[16,"oak_containers_orchestrator_client::proto"],[17,"oak_containers_orchestrator_client::proto::oak"],[20,"oak_containers_orchestrator_client::proto::oak::containers"],[142,"oak_containers_orchestrator_client::proto::oak::containers::launcher_client"],[168,"oak_containers_orchestrator_client::proto::oak::containers::orchestrator_client"],[193,"oak_containers_orchestrator_client::proto::oak::crypto"],[194,"oak_containers_orchestrator_client::proto::oak::crypto::v1"],[282,"oak_containers_orchestrator_client::proto::oak::session"],[283,"oak_containers_orchestrator_client::proto::oak::session::v1"]],"d":["Utility struct used to interface with the launcher","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","Session keys for decrypting client requests and encrypting …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Generated client implementations.","Generated client implementations.","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines the service exposed by the launcher, that can be …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","Calls <code>U::from(self)</code>.","","","Notifies the launcher that the trusted app is ready to …","Sends Attestation Evidence containing the Attestation …","Compress requests with the given encoding.","","","","","","","","Defines the service exposed by the orchestrator, that can …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Exposes the previously loaded trusted application config …","Returns Attestation Evidence containing the Attestation …","Returns crypto context for decrypting client requests and …","Calls <code>U::from(self)</code>.","","","Notifies the orchestrator that the trusted app is ready to …","Compress requests with the given encoding.","","","","","","","","","Message encrypted with Authenticated Encryption with …","Envelope containing session keys required to …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","AEAD key and nonce for encrypting/decrypting client …","","","Symmetric key and nonce for encrypting/decrypting enclave …","","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","Public key of rekor at the time of uploading the …","The binary attestation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","Body of the request, encrypted with the enclave public key.","Body of the request, encrypted with the client public or …","The serialized public key part of the enclave encryption …","The serialized binary endorsement statement from the …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","The serialized Rekor LogEntry as proof of the inclusion of …","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,12,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,13,14,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,11,12,13,14,15,16,11,12,13,14,15,16,0,0,15,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,11,12,13,14,15,16,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,42,40,41,42,43,40,41,42,43,42,40,41,42,43,40,41,42,43,40,41,42,43,40,41,42,43,40,41,42,43,40,41,40,41,42,43,40,41,42,43,40,41,42,43,40,41,42,43,40,41,42,43,40,41,42,43,43,43,43,43,43,43,40,40,40,41,42,43,40,41,42,43,40,41,42,43,40,41,42,43,40,41,42,43,0,0,0,0,0,0,0,0,0,0,47,9,51,46,46,48,47,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,49,9,46,47,48,49,50,51,52,53,49,9,46,47,48,49,50,51,52,53,52,53,9,48,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,48,9,9,47,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53,9,46,47,48,49,50,51,52,53],"f":[0,[[]],[[]],[1,[[5,[2,[4,[3]]]]]],[[]],[2,[[5,[[7,[6]],[4,[3]]]]]],[2,[[5,[[7,[6]],[4,[3]]]]]],[[]],[[],8],[2,[[5,[[4,[3]]]]]],0,[[2,9],[[5,[[4,[3]]]]]],[[],5],[[],5],[[],10],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[12],[13],[14],[15],[16],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[11,17],[12,17],[13,17],[14,17],[15,17],[16,17],[[11,11],18],[[12,12],18],[[13,13],18],[[14,14],18],[[15,15],18],[[16,16],18],0,0,[[11,19],20],[[12,19],20],[[13,19],20],[[14,19],20],[[15,19],20],[[16,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[23,[[22,[21]]]],24],[[23,[[22,[21]]]]]],[[]],[[]],[[[23,[25]]],[[23,[25]]]],[[]],[[[27,[26]]],[[5,[[23,[28]],29]]]],[[[23,[30]],19],20],[[]],[[]],[[[23,[[22,[21]]]],31],[[5,[[32,[12]],33]]]],[[[23,[[22,[21]]]],31],[[5,[[32,[[34,[11]]]],33]]]],[[[23,[[22,[21]]]],31],[[5,[[32,[[34,[11]]]],33]]]],[[]],[[],8],[[[22,[21]]],[[23,[[22,[21]]]]]],[[[23,[[22,[21]]]],31],[[5,[32,33]]]],[[[23,[[22,[21]]]],[31,[13]]],[[5,[32,33]]]],[[[23,[[22,[21]]]],24],[[23,[[22,[21]]]]]],[[]],[[],5],[[],5],[[],10],[[]],[[[36,[[35,[21]]]],[22,[21]],37],[[23,[[38,[[36,[[35,[21]]]],[22,[21]],37]]]]]],[[[22,[21]],1],[[23,[[22,[21]]]]]],0,[[[39,[[22,[21]]]],24],[[39,[[22,[21]]]]]],[[]],[[]],[[[39,[25]]],[[39,[25]]]],[[]],[[[27,[26]]],[[5,[[39,[28]],29]]]],[[[39,[30]],19],20],[[]],[[]],[[[39,[[22,[21]]]],31],[[5,[[32,[12]],33]]]],[[[39,[[22,[21]]]],31],[[5,[[32,[14]],33]]]],[[[39,[[22,[21]]]],[31,[15]]],[[5,[[32,[16]],33]]]],[[]],[[],8],[[[22,[21]]],[[39,[[22,[21]]]]]],[[[39,[[22,[21]]]],31],[[5,[32,33]]]],[[[39,[[22,[21]]]],24],[[39,[[22,[21]]]]]],[[]],[[],5],[[],5],[[],10],[[]],[[[36,[[35,[21]]]],[22,[21]],37],[[39,[[38,[[36,[[35,[21]]]],[22,[21]],37]]]]]],[[[22,[21]],1],[[39,[[22,[21]]]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[40],[41],[42],[43],[40,40],[41,41],[42,42],[43,43],[[]],[[]],[[]],[[]],[[],40],[[],41],[[],42],[[],43],[40,17],[41,17],[42,17],[43,17],0,0,[[40,40],18],[[41,41],18],[[42,42],18],[[43,43],18],[[40,19],[[5,[44]]]],[[41,19],[[5,[44]]]],[[42,19],[[5,[44]]]],[[43,19],[[5,[44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,[40,[[45,[6]]]],0,[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[46],[47],[48],[49],[50],[51],[52],[53],[9,9],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[52,52],[53,53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],9],[[],46],[[],47],[[],48],[[],49],[[],50],[[],51],[[],52],[[],53],0,[9,17],[46,17],[47,17],[48,17],[49,17],[50,17],[51,17],[52,17],[53,17],0,0,0,0,[[9,9],18],[[46,46],18],[[47,47],18],[[48,48],18],[[49,49],18],[[50,50],18],[[51,51],18],[[52,52],18],[[53,53],18],[[9,19],[[5,[44]]]],[[46,19],[[5,[44]]]],[[47,19],[[5,[44]]]],[[48,19],[[5,[44]]]],[[49,19],[[5,[44]]]],[[50,19],[[5,[44]]]],[[51,19],[[5,[44]]]],[[52,19],[[5,[44]]]],[[53,19],[[5,[44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"Uri"],[3,"LauncherClient"],[8,"Error"],[3,"Box"],[4,"Result"],[15,"u8"],[3,"Vec"],[3,"Request"],[3,"AttestationEvidence"],[3,"TypeId"],[3,"GetImageResponse"],[3,"GetApplicationConfigResponse"],[3,"SendAttestationEvidenceRequest"],[3,"GetAttestationEvidenceResponse"],[3,"GetCryptoContextRequest"],[3,"GetCryptoContextResponse"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[6,"BoxBody"],[8,"GrpcService"],[3,"LauncherClient"],[4,"CompressionEncoding"],[8,"Clone"],[3,"Endpoint"],[8,"TryInto"],[3,"Channel"],[3,"Error"],[8,"Debug"],[8,"IntoRequest"],[3,"Response"],[3,"Status"],[3,"Streaming"],[3,"Request"],[8,"Service"],[8,"Interceptor"],[3,"InterceptedService"],[3,"OrchestratorClient"],[3,"EncryptedRequest"],[3,"EncryptedResponse"],[3,"AeadEncryptedMessage"],[3,"CryptoContext"],[3,"Error"],[15,"slice"],[3,"AttestationBundle"],[3,"AttestationEndorsement"],[3,"BinaryAttestation"],[3,"ApplicationData"],[3,"GetPublicKeyRequest"],[3,"GetPublicKeyResponse"],[3,"InvokeRequest"],[3,"InvokeResponse"]]},\
"oak_containers_stage1":{"doc":"","t":"DLLLLALLLLLLLAMLLMFLLLLLLDLLLLMLLLALLLLAAAADDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLAAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLMLLLLLLLLLLLLLDLLLLLLLLLLLLMLLLLLLLLLLLLADDDDMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLMLLLLLLLLLLLLLLLLLLLLADDDDDDDDDMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFF","n":["Args","augment_args","augment_args_for_update","borrow","borrow_mut","client","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","image","init","into","into_request","launcher_addr","main","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vzip","LauncherClient","borrow","borrow_mut","from","get_oak_system_image","inner","into","into_request","new","proto","try_from","try_into","type_id","vzip","oak","containers","crypto","session","GetApplicationConfigResponse","GetAttestationEvidenceResponse","GetCryptoContextRequest","GetCryptoContextResponse","GetImageResponse","SendAttestationEvidenceRequest","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","context","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","evidence","evidence","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","image_chunk","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","launcher_client","orchestrator_client","serialized_encapsulated_public_key","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","LauncherClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_container_bundle","get_oak_system_image","inner","into","into_request","new","notify_app_ready","send_attestation_evidence","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","OrchestratorClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","fmt","from","from_ref","get_application_config","get_attestation_evidence","get_crypto_context","inner","into","into_request","new","notify_app_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","with_origin","v1","AeadEncryptedMessage","CryptoContext","EncryptedRequest","EncryptedResponse","associated_data","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into_request","into_request","into_request","into_request","request_base_nonce","request_key","request_sequence_number","response_base_nonce","response_key","response_sequence_number","serialized_encapsulated_public_key","serialized_encapsulated_public_key","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","BinaryAttestation","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","base64_pem_encoded_rekor_public_key","binary_attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_body","encrypted_body","encryption_public_key","endorsement_statement","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","rekor_log_entry","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","load","switch"],"q":[[0,"oak_containers_stage1"],[25,"oak_containers_stage1::client"],[39,"oak_containers_stage1::client::proto"],[40,"oak_containers_stage1::client::proto::oak"],[43,"oak_containers_stage1::client::proto::oak::containers"],[165,"oak_containers_stage1::client::proto::oak::containers::launcher_client"],[192,"oak_containers_stage1::client::proto::oak::containers::orchestrator_client"],[218,"oak_containers_stage1::client::proto::oak::crypto"],[219,"oak_containers_stage1::client::proto::oak::crypto::v1"],[307,"oak_containers_stage1::client::proto::oak::session"],[308,"oak_containers_stage1::client::proto::oak::session::v1"],[496,"oak_containers_stage1::image"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","As images can be large (hundreds of megabytes), the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Arbitrary config that the container can retrieve from the …","Session keys for decrypting client requests and encrypting …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Generated client implementations.","Generated client implementations.","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines the service exposed by the launcher, that can be …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","This method is used by the orchestrator to load and …","Provides orchestrator with the trusted container image.","Provides stage1 with the Oak system image (which contains …","","Calls <code>U::from(self)</code>.","","","Notifies the launcher that the trusted app is ready to …","Sends Attestation Evidence containing the Attestation …","Compress requests with the given encoding.","","","","","","","","Defines the service exposed by the orchestrator, that can …","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","","Exposes the previously loaded trusted application config …","Returns Attestation Evidence containing the Attestation …","Returns crypto context for decrypting client requests and …","","Calls <code>U::from(self)</code>.","","","Notifies the orchestrator that the trusted app is ready to …","Compress requests with the given encoding.","","","","","","","","","Message encrypted with Authenticated Encryption with …","Envelope containing session keys required to …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","AEAD key and nonce for encrypting/decrypting client …","","","Symmetric key and nonce for encrypting/decrypting enclave …","","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","Public key of rekor at the time of uploading the …","The binary attestation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","Body of the request, encrypted with the enclave public key.","Body of the request, encrypted with the client public or …","The serialized public key part of the enclave encryption …","The serialized binary endorsement statement from the …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","The serialized Rekor LogEntry as proof of the inclusion of …","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,2,2,2,2,0,2,2,2,2,2,2,2,0,2,2,2,2,0,2,2,2,2,2,2,0,14,14,14,14,14,14,14,14,0,14,14,14,14,0,0,0,0,0,0,0,0,0,0,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,20,24,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,21,22,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,19,19,20,21,22,23,24,19,20,21,22,23,24,0,0,23,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,19,20,21,22,23,24,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,48,46,47,48,49,46,47,48,49,48,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,49,49,49,49,49,49,46,46,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,0,0,0,0,0,0,0,0,0,0,54,52,58,53,53,55,54,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,56,52,53,54,55,56,57,58,59,60,56,52,53,54,55,56,57,58,59,60,59,60,52,55,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,55,52,52,54,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,52,53,54,55,56,57,58,59,60,0,0],"f":[0,[1,1],[1,1],[[]],[[]],0,[[],1],[[],1],[[2,3],4],[[]],[5,[[7,[2,6]]]],[5,[[7,[2,6]]]],[[],[[9,[8]]]],0,0,[[]],[[],10],0,[[],[[7,[[12,[11]]]]]],[[],7],[[],7],[[],13],[[2,5],[[7,[6]]]],[[2,5],[[7,[6]]]],[[]],0,[[]],[[]],[[]],[14,[[17,[[16,[15]]]]]],0,[[]],[[],10],[18,[[17,[14]]]],0,[[],7],[[],7],[[],13],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19],[20],[21],[22],[23],[24],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],19],[[],20],[[],21],[[],22],[[],23],[[],24],[19,25],[20,25],[21,25],[22,25],[23,25],[24,25],[[19,19],26],[[20,20],26],[[21,21],26],[[22,22],26],[[23,23],26],[[24,24],26],0,0,[[19,3],4],[[20,3],4],[[21,3],4],[[22,3],4],[[23,3],4],[[24,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[29,[[28,[27]]]],30],[[29,[[28,[27]]]]]],[[]],[[]],[[[29,[31]]],[[29,[31]]]],[[]],[[[33,[32]]],[[7,[[29,[34]],35]]]],[[[29,[36]],3],4],[[]],[[]],[[[29,[[28,[27]]]],37],[[7,[[38,[20]],39]]]],[[[29,[[28,[27]]]],37],[[7,[[38,[[40,[19]]]],39]]]],[[[29,[[28,[27]]]],37],[[7,[[38,[[40,[19]]]],39]]]],0,[[]],[[],10],[[[28,[27]]],[[29,[[28,[27]]]]]],[[[29,[[28,[27]]]],37],[[7,[38,39]]]],[[[29,[[28,[27]]]],[37,[21]]],[[7,[38,39]]]],[[[29,[[28,[27]]]],30],[[29,[[28,[27]]]]]],[[]],[[],7],[[],7],[[],13],[[]],[[[42,[[41,[27]]]],[28,[27]],43],[[29,[[44,[[42,[[41,[27]]]],[28,[27]],43]]]]]],[[[28,[27]],18],[[29,[[28,[27]]]]]],0,[[[45,[[28,[27]]]],30],[[45,[[28,[27]]]]]],[[]],[[]],[[[45,[31]]],[[45,[31]]]],[[]],[[[33,[32]]],[[7,[[45,[34]],35]]]],[[[45,[36]],3],4],[[]],[[]],[[[45,[[28,[27]]]],37],[[7,[[38,[20]],39]]]],[[[45,[[28,[27]]]],37],[[7,[[38,[22]],39]]]],[[[45,[[28,[27]]]],[37,[23]]],[[7,[[38,[24]],39]]]],0,[[]],[[],10],[[[28,[27]]],[[45,[[28,[27]]]]]],[[[45,[[28,[27]]]],37],[[7,[38,39]]]],[[[45,[[28,[27]]]],30],[[45,[[28,[27]]]]]],[[]],[[],7],[[],7],[[],13],[[]],[[[42,[[41,[27]]]],[28,[27]],43],[[45,[[44,[[42,[[41,[27]]]],[28,[27]],43]]]]]],[[[28,[27]],18],[[45,[[28,[27]]]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[46],[47],[48],[49],[46,46],[47,47],[48,48],[49,49],[[]],[[]],[[]],[[]],[[],46],[[],47],[[],48],[[],49],[46,25],[47,25],[48,25],[49,25],0,0,[[46,46],26],[[47,47],26],[[48,48],26],[[49,49],26],[[46,3],[[7,[50]]]],[[47,3],[[7,[50]]]],[[48,3],[[7,[50]]]],[[49,3],[[7,[50]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],0,0,0,0,0,0,[46,[[51,[15]]]],0,[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[52],[53],[54],[55],[56],[57],[58],[59],[60],[52,52],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],52],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],0,[52,25],[53,25],[54,25],[55,25],[56,25],[57,25],[58,25],[59,25],[60,25],0,0,0,0,[[52,52],26],[[53,53],26],[[54,54],26],[[55,55],26],[[56,56],26],[[57,57],26],[[58,58],26],[[59,59],26],[[60,60],26],[[52,3],[[7,[50]]]],[[53,3],[[7,[50]]]],[[54,3],[[7,[50]]]],[[55,3],[[7,[50]]]],[[56,3],[[7,[50]]]],[[57,3],[[7,[50]]]],[[58,3],[[7,[50]]]],[[59,3],[[7,[50]]]],[[60,3],[[7,[50]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,61],17],[62,[[17,[63]]]]],"c":[],"p":[[3,"Command"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[3,"Request"],[8,"Error"],[3,"Box"],[3,"TypeId"],[3,"LauncherClient"],[15,"u8"],[3,"Vec"],[6,"Result"],[3,"Uri"],[3,"GetImageResponse"],[3,"GetApplicationConfigResponse"],[3,"SendAttestationEvidenceRequest"],[3,"GetAttestationEvidenceResponse"],[3,"GetCryptoContextRequest"],[3,"GetCryptoContextResponse"],[15,"usize"],[15,"bool"],[6,"BoxBody"],[8,"GrpcService"],[3,"LauncherClient"],[4,"CompressionEncoding"],[8,"Clone"],[3,"Endpoint"],[8,"TryInto"],[3,"Channel"],[3,"Error"],[8,"Debug"],[8,"IntoRequest"],[3,"Response"],[3,"Status"],[3,"Streaming"],[3,"Request"],[8,"Service"],[8,"Interceptor"],[3,"InterceptedService"],[3,"OrchestratorClient"],[3,"EncryptedRequest"],[3,"EncryptedResponse"],[3,"AeadEncryptedMessage"],[3,"CryptoContext"],[3,"Error"],[15,"slice"],[3,"AttestationEvidence"],[3,"AttestationBundle"],[3,"AttestationEndorsement"],[3,"BinaryAttestation"],[3,"ApplicationData"],[3,"GetPublicKeyRequest"],[3,"GetPublicKeyResponse"],[3,"InvokeRequest"],[3,"InvokeResponse"],[3,"Path"],[15,"str"],[15,"never"]]},\
"oak_core":{"doc":"","t":"AAAIDLLLLLLLKLKLLLLDLLLLLLLLLLDLLLLLLLLFLLLL","n":["samplestore","sync","timer","SampleStore","StaticSampleStore","borrow","borrow_mut","eq","fmt","from","into","new","percentile","percentile","record","record","try_from","try_into","type_id","OnceCell","borrow","borrow_mut","from","get","into","new","set","try_from","try_into","type_id","Timer","borrow","borrow_mut","elapsed","fmt","from","into","new","new_rdtsc","rdtsc","timed","try_from","try_into","type_id"],"q":[[0,"oak_core"],[3,"oak_core::samplestore"],[19,"oak_core::sync"],[30,"oak_core::timer"]],"d":["","","","","Basic probabilisting sample store to compute percentiles …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Gets the n-th percentile. n needs to be between 0 and 100, …","","Records a new data point value.","","","","","A synchronised implementation of a cell that can be …","","","Returns the argument unchanged.","Gets a reference to the inner value if the cell has been …","Calls <code>U::from(self)</code>.","","Sets the inner value of the cell if it has not been …","","","","Measures the number of clock cycles between <code>new()</code> and …","","","Returns the approximate number of clock cycles elapsed …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new timer, recording the current tick counter …","Read the timestamp counter register from the CPU.","Returns the approximate number of clock cycles it took to …","","",""],"i":[0,0,0,0,0,1,1,1,1,1,1,1,13,1,13,1,1,1,1,0,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,0,11,11,11,11],"f":[0,0,0,0,0,[[]],[[]],[[1,1],2],[[1,3],4],[[]],[[]],[[],[[5,[1]]]],[6,[[5,[7]]]],[[1,6],[[5,[7]]]],[7],[[1,7]],[[],8],[[],8],[[],9],0,[[]],[[]],[[]],[10,5],[[]],[[],10],[10,8],[[],8],[[],8],[[],9],0,[[]],[[]],[11,7],[[11,3],4],[[]],[[]],[7,11],[[],11],[[],7],[12,7],[[],8],[[],8],[[],9]],"c":[],"p":[[3,"StaticSampleStore"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"f64"],[15,"u64"],[4,"Result"],[3,"TypeId"],[3,"OnceCell"],[3,"Timer"],[8,"FnOnce"],[8,"SampleStore"]]},\
"oak_crypto":{"doc":"","t":"AAADDIDLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLAAADDDDMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMMMLMLLLLLLLLLLLLLLLLDLLLLLLL","n":["encryptor","proto","signer","ClientEncryptor","EncryptionKeyProvider","RecipientContextGenerator","ServerEncryptor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create","decrypt","decrypt","default","encrypt","encrypt","from","from","from","generate_recipient_context","generate_recipient_context","get_serialized_public_key","into","into","into","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","oak","crypto","v1","AeadEncryptedMessage","CryptoContext","EncryptedRequest","EncryptedResponse","associated_data","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_message","encrypted_message","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","request_base_nonce","request_key","request_sequence_number","response_base_nonce","response_key","response_sequence_number","serialized_encapsulated_public_key","serialized_encapsulated_public_key","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Signer","borrow","borrow_mut","from","into","try_from","try_into","type_id"],"q":[[0,"oak_crypto"],[3,"oak_crypto::encryptor"],[39,"oak_crypto::proto"],[40,"oak_crypto::proto::oak"],[41,"oak_crypto::proto::oak::crypto"],[42,"oak_crypto::proto::oak::crypto::v1"],[118,"oak_crypto::signer"]],"d":["Implementation of the Bidirectional Hybrid Public Key …","","","Encryptor object for encrypting client requests that will …","","","Encryptor object for decrypting client requests that are …","","","","","","","Creates an HPKE crypto context by generating an new …","Decrypts a <code>EncryptedResponse</code> proto message using AEAD. …","Decrypts a <code>EncryptedRequest</code> proto message using AEAD. …","","Encrypts <code>plaintext</code> and authenticates <code>associated_data</code> using …","Encrypts <code>plaintext</code> and authenticates <code>associated_data</code> using …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns a NIST P-256 SEC1 encoded point public key. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a crypto provider with a newly generated key pair.","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Envelope containing session keys required to …","Request message encrypted using Hybrid Public Key …","Response message encrypted Hybrid Public Key Encryption …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Message encrypted with Authenticated Encryption with …","Message encrypted with Authenticated Encryption with …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","AEAD key and nonce for encrypting/decrypting client …","","","Symmetric key and nonce for encrypting/decrypting enclave …","","Returns the value of <code>serialized_encapsulated_public_key</code>, …","Ephemeral Diffie-Hellman client public key that is needed …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,0,0,0,0,0,8,3,6,8,3,6,3,3,6,8,3,6,8,3,6,10,8,8,8,3,6,8,6,8,3,6,8,3,6,8,3,6,0,0,0,0,0,0,0,14,7,5,14,15,7,5,14,15,14,7,5,14,15,7,5,14,15,7,5,14,15,7,5,14,15,7,5,14,15,7,5,7,5,14,15,7,5,14,15,7,5,14,15,7,5,14,15,15,15,15,15,15,15,7,7,7,5,14,15,7,5,14,15,7,5,14,15,7,5,14,15,0,20,20,20,20,20,20,20],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[4,[3]]]],[[3,5],4],[[6,7],4],[[],8],[[3,[2,[1]],[2,[1]]],[[4,[7]]]],[[6,[2,[1]],[2,[1]]],[[4,[5]]]],[[]],[[]],[[]],[[[2,[1]]],[[4,[0]]]],[[8,[2,[1]]],[[4,[0]]]],[8,[[9,[1]]]],[[]],[[]],[[]],[[],8],[[[11,[10]]],6],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[7],[5],[14],[15],[7,7],[5,5],[14,14],[15,15],[[]],[[]],[[]],[[]],[[],7],[[],5],[[],14],[[],15],[7,16],[5,16],[14,16],[15,16],0,0,[[7,7],17],[[5,5],17],[[14,14],17],[[15,15],17],[[7,18],19],[[5,18],19],[[14,18],19],[[15,18],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[7,[[2,[1]]]],0,[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[],12],[[],12],[[],13]],"c":[],"p":[[15,"u8"],[15,"slice"],[3,"ClientEncryptor"],[6,"Result"],[3,"EncryptedResponse"],[3,"ServerEncryptor"],[3,"EncryptedRequest"],[3,"EncryptionKeyProvider"],[3,"Vec"],[8,"RecipientContextGenerator"],[3,"Arc"],[4,"Result"],[3,"TypeId"],[3,"AeadEncryptedMessage"],[3,"CryptoContext"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Signer"]]},\
"oak_docker_linux_init":{"doc":"","t":"RAFF","n":["DOCKER_COMMAND_PATH","init","main","init"],"q":[[0,"oak_docker_linux_init"],[3,"oak_docker_linux_init::init"]],"d":["","","","Performs the minimum initialization required from the …"],"i":[0,0,0,0],"f":[0,0,[[],1],[[],2]],"c":[],"p":[[15,"never"],[6,"Result"]]},\
"oak_echo_linux_init":{"doc":"","t":"RAFFF","n":["DEVICE_PATH","init","main","set_console_to_raw_mode","init"],"q":[[0,"oak_echo_linux_init"],[4,"oak_echo_linux_init::init"]],"d":["","","","","Performs the minimum initialization required from the …"],"i":[0,0,0,0,0],"f":[0,0,[[],1],[2],[[],3]],"c":[],"p":[[15,"never"],[6,"RawFd"],[6,"Result"]]},\
"oak_echo_service":{"doc":"","t":"DLLLLLLALLLIDDDDDMMLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EchoService","borrow","borrow_mut","default","echo","from","into","proto","try_from","try_into","type_id","Echo","EchoAsyncClient","EchoClient","EchoRequest","EchoResponse","EchoServer","body","body","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","echo","echo","echo","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","from","from","from","into","into","into","into","into","invoke","new","new","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"oak_echo_service"],[11,"oak_echo_service::proto"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,2,3,10,12,2,3,8,10,12,2,3,8,2,3,2,3,8,2,3,8,2,3,17,10,12,2,3,2,3,2,3,10,12,2,3,8,10,12,2,3,8,8,10,12,8,2,3,8,10,12,2,3,8,10,12,2,3,8,10,12,2,3,8],"f":[0,[[]],[[]],[[],1],[[1,2],[[5,[3,4]]]],[[]],[[]],0,[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[3],[2,2],[3,3],[[[8,[7]]],[[8,[7]]]],[[]],[[]],[[]],[[],2],[[],3],[2,[[5,[3,4]]]],[[[10,[9]],2],[[5,[[5,[3,4]]]]]],[[[12,[11]],2],[[5,[[5,[3,4]]]]]],[2,13],[3,13],[[2,2],14],[[3,3],14],[[2,15],16],[[3,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[17]],[19,[18]]],[[5,[[20,[18]],21]]]],[9,[[10,[9]]]],[11,[[12,[11]]]],[17,[[8,[17]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6]],"c":[],"p":[[3,"EchoService"],[3,"EchoRequest"],[3,"EchoResponse"],[3,"Status"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"EchoServer"],[8,"Transport"],[3,"EchoClient"],[8,"AsyncTransport"],[3,"EchoAsyncClient"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Echo"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"never"]]},\
"oak_enclave_runtime_support":{"doc":"","t":"F","n":["init"],"q":[[0,"oak_enclave_runtime_support"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"oak_functions_abi":{"doc":"Type, constant and Wasm host function definitions for the …","t":"NNNNRDDENNLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLAMLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLMM","n":["BadRequest","InternalServerError","PolicySizeViolation","PolicyTimeViolation","RESPONSE_BODY_OFFSET","Request","Response","StatusCode","Success","Unspecified","body","body","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","create","decode","encode_to_vec","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_repr","into","into","into","invoke","length","pad","proto","status","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ConfigurationReport","Entry","ServerPolicy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","constant_processing_time_ms","constant_response_size_bytes","default","default","default","encoded_len","encoded_len","encoded_len","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","key","policy","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","wasm_hash"],"q":[[0,"oak_functions_abi"],[60,"oak_functions_abi::proto"]],"d":["","","","","","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","See REQUEST_RESPONSE_ENCODING.MD in the crate root.","","","Returns the body of the response, excluding any trailing …","","body (may include padding 0s)","","","","","","","","","","","","","Creates a new instance of Response.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","See <code>invoke</code>.","The effective length of the body, excluding any padding …","Creates and returns a new <code>Response</code> instance with the same …","","","","","","","","","","","","","","","","The client can check the configuration report for the …","An individual entry to be made available for lookup to an …","/ Server-side policy describing limits on the size of the …","","","","","","","","","","","","","","","","A fixed response time, in milliseconds.","A fixed size for responses returned by the trusted runtime.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The validated server-side policy.","","","","","","","","","","","","","","Hash of the loaded Wasm module."],"i":[7,7,7,7,0,0,0,0,7,7,1,6,1,6,1,7,6,1,7,6,1,7,6,1,7,1,1,1,6,1,7,6,1,7,7,6,1,7,7,6,1,7,0,1,1,0,1,6,1,7,7,6,1,7,6,1,7,6,1,7,0,0,0,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,20,20,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,21,19,19,20,21,19,20,21,19,20,21,19,20,21,21,19],"f":[0,0,0,0,0,0,0,0,0,0,[1,[[5,[[3,[2]],4]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[1,1],[7,7],[[]],[[]],[[]],[[7,[8,[2]]],1],[[[3,[2]]],[[9,[1]]]],[1,[[8,[2]]]],[[6,6],10],[[1,1],10],[[7,7],10],[[6,11],12],[[1,11],12],[[7,11],[[5,[13]]]],[[7,11],12],[[]],[[]],[[]],[14,[[15,[7]]]],[[]],[[]],[[]],0,0,[[1,16],[[9,[1]]]],0,0,[[]],[[]],[[]],[[],17],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],18],[[],18],[[],18],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[19],[20],[21],[19,19],[20,20],[21,21],[[]],[[]],[[]],0,0,[[],19],[[],20],[[],21],[19,16],[20,16],[21,16],[[19,19],10],[[20,20],10],[[21,21],10],[[19,11],12],[[20,11],12],[[21,11],12],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],18],[[],18],[[],18],0,0],"c":[],"p":[[3,"Response"],[15,"u8"],[15,"slice"],[3,"TryFromIntError"],[4,"Result"],[3,"Request"],[4,"StatusCode"],[3,"Vec"],[6,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[15,"u32"],[4,"Option"],[15,"usize"],[3,"String"],[3,"TypeId"],[3,"ConfigurationReport"],[3,"ServerPolicy"],[3,"Entry"]]},\
"oak_functions_client":{"doc":"","t":"DLLLLLLLLLLL","n":["OakFunctionsClient","borrow","borrow_mut","from","into","into_request","invoke","new","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_client"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[]],[[]],[[],1],[[2,[4,[3]]],[[6,[[5,[3]]]]]],[7,[[6,[2]]]],[[],8],[[],8],[[],9],[[]]],"c":[],"p":[[3,"Request"],[3,"OakFunctionsClient"],[15,"u8"],[15,"slice"],[3,"Vec"],[6,"Result"],[15,"str"],[4,"Result"],[3,"TypeId"]]},\
"oak_functions_launcher":{"doc":"","t":"DLLFLLLMMAALLLMFLAAADDDDDDDDDDDDIDDDDKLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMADDDDDDDDDDDMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMAMAMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLLLLLQIDLLLLLLLLLLLLLLLLLLKLLLLLLDLLLLLFLLLLL","n":["LookupDataConfig","borrow","borrow_mut","create","from","into","into_request","lookup_data_path","max_chunk_size","proto","server","try_from","try_into","type_id","update_interval","update_lookup_data","vzip","oak","functions","session","AbortNextLookupDataResponse","Empty","ExtendNextLookupDataRequest","ExtendNextLookupDataResponse","FinishNextLookupDataRequest","FinishNextLookupDataResponse","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","LookupDataChunk","LookupDataEntry","OakFunctions","OakFunctionsAsyncClient","OakFunctionsClient","OakFunctionsServer","PublicKeyInfo","abort_next_lookup_data","abort_next_lookup_data","abort_next_lookup_data","attestation","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constant_response_size","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend_next_lookup_data","extend_next_lookup_data","extend_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","invoke","invoke","invoke","invoke","items","key","new","new","new","public_key","public_key_info","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wasm_module","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","BinaryAttestation","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","RequestWrapper","ResponseWrapper","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","base64_pem_encoded_rekor_public_key","binary_attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_body","encrypted_body","encryption_public_key","endorsement_statement","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","rekor_log_entry","request","request_wrapper","response","response_wrapper","signed_application_data","signing_public_key","streaming_session_server","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","GetPublicKeyRequest","InvokeRequest","Request","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","GetPublicKeyResponse","InvokeResponse","Response","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","from_ref","into","into_request","merge","to_owned","try_from","try_into","type_id","vzip","StreamStream","StreamingSession","StreamingSessionServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","from_ref","into","into_make_service","into_request","new","poll_ready","poll_ready","send_compressed","stream","to_owned","try_from","try_into","type_id","vzip","with_interceptor","SessionProxy","borrow","borrow_mut","from","into","into_request","new","stream","try_from","try_into","type_id","vzip"],"q":[[0,"oak_functions_launcher"],[17,"oak_functions_launcher::proto"],[18,"oak_functions_launcher::proto::oak"],[20,"oak_functions_launcher::proto::oak::functions"],[332,"oak_functions_launcher::proto::oak::session"],[333,"oak_functions_launcher::proto::oak::session::v1"],[564,"oak_functions_launcher::proto::oak::session::v1::request_wrapper"],[585,"oak_functions_launcher::proto::oak::session::v1::response_wrapper"],[606,"oak_functions_launcher::proto::oak::session::v1::streaming_session_server"],[634,"oak_functions_launcher::server"]],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","If the definition of ExtendNextLookupData changes, the …","","","","","","","","","","","","","","","","","","","TODO(#3843): Use explicit <code>oak_crypto</code> messages.","TODO(#3843): Use explicit <code>oak_crypto</code> messages.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","Public key of rekor at the time of uploading the …","The binary attestation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","","","Body of the request, encrypted with the enclave public key.","Body of the request, encrypted with the client public or …","The serialized public key part of the enclave encryption …","The serialized binary endorsement statement from the …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The serialized Rekor LogEntry as proof of the inclusion of …","","Nested message and enum types in <code>RequestWrapper</code>.","","Nested message and enum types in <code>ResponseWrapper</code>.","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","Generated server implementations.","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","","","","","","","","Encodes the message to a buffer.","Returns the encoded length of the message without a length …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Decodes an instance of the message from a buffer, and …","","","","","","Server streaming response type for the Stream method.","Generated trait containing gRPC methods that should be …","Service definition for streaming communication with an Oak …","Enable decompressing requests with the given encoding.","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","Compress responses with the given encoding, if the client …","Used to send a sequence of messages ensuring that they are …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,2,2,0,2,2,2,2,2,0,0,2,2,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,17,11,21,22,23,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,26,19,20,21,22,23,24,25,26,27,28,29,14,13,19,20,21,22,23,24,25,26,27,28,29,14,13,31,19,20,21,22,23,24,25,26,27,28,29,14,13,31,19,19,20,21,22,23,24,25,26,27,28,29,14,13,19,20,21,22,23,24,25,26,27,28,29,14,13,19,20,21,22,23,24,25,26,27,28,29,14,13,36,17,11,36,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,19,20,21,22,23,24,25,26,27,28,29,14,13,31,36,17,11,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,36,17,11,31,25,24,17,11,31,21,20,19,20,21,22,23,24,25,26,27,28,29,14,13,31,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,24,17,11,19,20,21,22,23,24,25,26,27,28,29,14,13,31,19,0,0,0,0,0,0,0,0,0,0,0,0,43,41,47,42,42,44,43,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,45,41,42,43,44,45,46,47,48,49,50,51,45,41,42,43,44,45,46,47,48,49,50,51,48,49,41,44,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,44,50,0,51,0,41,41,0,43,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,41,42,43,44,45,46,47,48,49,50,51,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,59,59,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,60,61,61,61,61,61,61,0,77,77,77,77,77,0,77,77,77,77,77],"f":[0,[[]],[[]],[[1,2,3,4],[[7,[[6,[5]]]]]],[[]],[[]],[[],8],0,0,0,0,[[],7],[[],7],[[],9],0,[[[11,[10]],2],12],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,[[7,[14,15]]]],[[[17,[16]],13],[[7,[[7,[14,15]]]]]],[[[11,[18]],13],[[7,[[7,[14,15]]]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[14],[13],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[14,14],[13,13],[[[31,[30]]],[[31,[30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],19],[[],20],[[],21],[[],22],[[],23],[[],24],[[],25],[[],26],[[],27],[[],28],[[],29],[[],14],[[],13],[19,32],[20,32],[21,32],[22,32],[23,32],[24,32],[25,32],[26,32],[27,32],[28,32],[29,32],[14,32],[13,32],[[19,19],33],[[20,20],33],[[21,21],33],[[22,22],33],[[23,23],33],[[24,24],33],[[25,25],33],[[26,26],33],[[27,27],33],[[28,28],33],[[29,29],33],[[14,14],33],[[13,13],33],[26,[[7,[27,15]]]],[[[17,[16]],26],[[7,[[7,[27,15]]]]]],[[[11,[18]],26],[[7,[[7,[27,15]]]]]],[28,[[7,[29,15]]]],[[[17,[16]],28],[[7,[[7,[29,15]]]]]],[[[11,[18]],28],[[7,[[7,[29,15]]]]]],[[19,34],35],[[20,34],35],[[21,34],35],[[22,34],35],[[23,34],35],[[24,34],35],[[25,34],35],[[26,34],35],[[27,34],35],[[28,34],35],[[29,34],35],[[14,34],35],[[13,34],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[7,[20,15]]]],[[[17,[16]],19],[[7,[[7,[20,15]]]]]],[[[11,[18]],19],[[7,[[7,[20,15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[22,[[7,[23,15]]]],[[[17,[16]],22],[[7,[[7,[23,15]]]]]],[[[11,[18]],22],[[7,[[7,[23,15]]]]]],[[[31,[36]],[38,[37]]],[[7,[[39,[37]],40]]]],0,0,[16,[[17,[16]]]],[18,[[11,[18]]]],[36,[[31,[36]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],41],[[],42],[[],43],[[],44],[[],45],[[],46],[[],47],[[],48],[[],49],[[],50],[[],51],0,[41,32],[42,32],[43,32],[44,32],[45,32],[46,32],[47,32],[48,32],[49,32],[50,32],[51,32],0,0,0,0,[[41,41],33],[[42,42],33],[[43,43],33],[[44,44],33],[[45,45],33],[[46,46],33],[[47,47],33],[[48,48],33],[[49,49],33],[[50,50],33],[[51,51],33],[[41,34],35],[[42,34],35],[[43,34],35],[[44,34],35],[[45,34],35],[[46,34],35],[[47,34],35],[[48,34],35],[[49,34],35],[[50,34],35],[[51,34],35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[52,52],[[]],[[52,53]],[52,32],[[52,52],33],[[52,34],35],[[]],[[]],[[]],[[],8],[[[54,[52]],4,55,56,57],[[7,[58]]]],[[]],[[],7],[[],7],[[],9],[[]],0,0,0,[[]],[[]],[59,59],[[]],[[59,53]],[59,32],[[59,59],33],[[59,34],35],[[]],[[]],[[]],[[],8],[[[54,[59]],4,55,56,57],[[7,[58]]]],[[]],[[],7],[[],7],[[],9],[[]],0,0,0,[[[61,[60]],62],[[61,[60]]]],[[]],[[]],[[[61,[60]],[65,[[0,[63,64]]]]]],[65],[[[61,[60]]],[[61,[60]]]],[[]],[[[61,[[0,[66,60]]]],34],35],[[]],[[[67,[60]]],[[61,[60]]]],[[]],[[]],[[],68],[[],8],[60,[[61,[60]]]],[69,[[70,[7]]]],[[[61,[60]],69],[[70,[7]]]],[[[61,[60]],62],[[61,[60]]]],[[[8,[[71,[50]]]]],[[73,[[6,[72]]]]]],[[]],[[],7],[[],7],[[],9],[[]],[[60,74],[[75,[[61,[60]],74]]]],0,[[]],[[]],[[]],[[]],[[],8],[[76,10,[39,[37]],[39,[37]]],72],[[77,[8,[[71,[50]]]]],[[73,[[6,[72]]]]]],[[],7],[[],7],[[],9],[[]]],"c":[],"p":[[3,"Params"],[3,"LookupDataConfig"],[3,"PathBuf"],[15,"u32"],[8,"Error"],[3,"Box"],[4,"Result"],[3,"Request"],[3,"TypeId"],[3,"ConnectorHandle"],[3,"OakFunctionsAsyncClient"],[6,"Result"],[3,"Empty"],[3,"AbortNextLookupDataResponse"],[3,"Status"],[8,"Transport"],[3,"OakFunctionsClient"],[8,"AsyncTransport"],[3,"InitializeRequest"],[3,"InitializeResponse"],[3,"PublicKeyInfo"],[3,"InvokeRequest"],[3,"InvokeResponse"],[3,"LookupDataEntry"],[3,"LookupDataChunk"],[3,"ExtendNextLookupDataRequest"],[3,"ExtendNextLookupDataResponse"],[3,"FinishNextLookupDataRequest"],[3,"FinishNextLookupDataResponse"],[8,"Clone"],[3,"OakFunctionsServer"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"OakFunctions"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"never"],[3,"AttestationEvidence"],[3,"AttestationBundle"],[3,"AttestationEndorsement"],[3,"BinaryAttestation"],[3,"ApplicationData"],[3,"GetPublicKeyRequest"],[3,"GetPublicKeyResponse"],[3,"InvokeRequest"],[3,"InvokeResponse"],[3,"RequestWrapper"],[3,"ResponseWrapper"],[4,"Request"],[8,"BufMut"],[4,"Option"],[4,"WireType"],[8,"Buf"],[3,"DecodeContext"],[3,"DecodeError"],[4,"Response"],[8,"StreamingSession"],[3,"StreamingSessionServer"],[4,"CompressionEncoding"],[8,"Body"],[8,"Send"],[3,"Request"],[8,"Debug"],[3,"Arc"],[3,"IntoMakeService"],[3,"Context"],[4,"Poll"],[3,"Streaming"],[8,"Future"],[3,"Pin"],[8,"Interceptor"],[3,"InterceptedService"],[4,"SocketAddr"],[3,"SessionProxy"]]},\
"oak_functions_load_test":{"doc":"","t":"RRRF","n":["REQUEST","TOTAL_REQUESTS","URL","main"],"q":[[0,"oak_functions_load_test"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,0,[[],1]],"c":[],"p":[[6,"Result"]]},\
"oak_functions_sdk":{"doc":"Oak Functions SDK","t":"FOAFFFFFAAAADDDDDDIDDDDDDDMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLKLLMLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLL","n":["alloc","log","proto","read_request","storage_get_item","testing","write_log_message","write_response","oak","functions","wasm","v1","LogRequest","LogResponse","LookupDataRequest","LookupDataResponse","ReadRequestRequest","ReadRequestResponse","StdWasmApi","StdWasmApiAsyncClient","StdWasmApiClient","StdWasmApiServer","TestRequest","TestResponse","WriteResponseRequest","WriteResponseResponse","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","echo","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","invoke","key","log","log","log","lookup_data","lookup_data","lookup_data","message","new","new","new","read_request","read_request","read_request","test","test","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","write_response","write_response","write_response"],"q":[[0,"oak_functions_sdk"],[8,"oak_functions_sdk::proto"],[9,"oak_functions_sdk::proto::oak"],[10,"oak_functions_sdk::proto::oak::functions"],[11,"oak_functions_sdk::proto::oak::functions::wasm"],[12,"oak_functions_sdk::proto::oak::functions::wasm::v1"]],"d":["","Logs a debug message.","","See <code>StdWasmApiClient::read_request</code>.","See <code>StdWasmApiClient::lookup_data</code>.","See <code>StdWasmApiClient::test</code>.","See <code>StdWasmApiClient::log</code>.","See <code>StdWasmApiClient::write_response</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to echo the message back. If false, the response …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,13,19,20,29,31,11,12,13,14,15,16,17,18,19,20,22,29,31,11,12,13,14,15,16,17,18,19,20,22,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,19,20,22,11,12,13,14,15,16,17,18,19,20,22,11,12,13,14,15,16,17,18,19,20,19,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,19,20,11,12,13,14,15,16,17,18,19,20,29,31,11,12,13,14,15,16,17,18,19,20,22,29,31,11,12,13,14,15,16,17,18,19,20,22,22,17,26,29,31,26,29,31,15,29,31,22,26,29,31,26,29,31,11,12,13,14,15,16,17,18,19,20,22,29,31,11,12,13,14,15,16,17,18,19,20,22,29,31,11,12,13,14,15,16,17,18,19,20,22,29,31,11,12,13,14,15,16,17,18,19,20,22,18,26,29,31],"f":[[1,2],0,0,[[],[[5,[[3,[2]],4]]]],[[[6,[2]]],[[5,[[7,[[3,[2]]]],4]]]],[[[6,[2]],8],[[5,[[3,[2]],4]]]],[[[10,[9]]],[[5,[4]]]],[[[6,[2]]],[[5,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[[[22,[21]]],[[22,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],18],[[],19],[[],20],0,[11,23],[12,23],[13,23],[14,23],[15,23],[16,23],[17,23],[18,23],[19,23],[20,23],[[11,11],8],[[12,12],8],[[13,13],8],[[14,14],8],[[15,15],8],[[16,16],8],[[17,17],8],[[18,18],8],[[19,19],8],[[20,20],8],[[11,24],25],[[12,24],25],[[13,24],25],[[14,24],25],[[15,24],25],[[16,24],25],[[17,24],25],[[18,24],25],[[19,24],25],[[20,24],25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[22,[26]],[6,[2]]],[[5,[[3,[2]],27]]]],0,[15,[[5,[16,4]]]],[[[29,[28]],15],[[5,[[5,[16,4]]]]]],[[[31,[30]],15],[[5,[[5,[16,4]]]]]],[17,[[5,[18,4]]]],[[[29,[28]],17],[[5,[[5,[18,4]]]]]],[[[31,[30]],17],[[5,[[5,[18,4]]]]]],0,[28,[[29,[28]]]],[30,[[31,[30]]]],[26,[[22,[26]]]],[11,[[5,[12,4]]]],[[[29,[28]],11],[[5,[[5,[12,4]]]]]],[[[31,[30]],11],[[5,[[5,[12,4]]]]]],[19,[[5,[20,4]]]],[[[29,[28]],19],[[5,[[5,[20,4]]]]]],[[[31,[30]],19],[[5,[[5,[20,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,[13,[[5,[14,4]]]],[[[29,[28]],13],[[5,[[5,[14,4]]]]]],[[[31,[30]],13],[[5,[[5,[14,4]]]]]]],"c":[],"p":[[15,"u32"],[15,"u8"],[3,"Vec"],[3,"Status"],[4,"Result"],[15,"slice"],[4,"Option"],[15,"bool"],[15,"str"],[8,"AsRef"],[3,"ReadRequestRequest"],[3,"ReadRequestResponse"],[3,"WriteResponseRequest"],[3,"WriteResponseResponse"],[3,"LogRequest"],[3,"LogResponse"],[3,"LookupDataRequest"],[3,"LookupDataResponse"],[3,"TestRequest"],[3,"TestResponse"],[8,"Clone"],[3,"StdWasmApiServer"],[15,"usize"],[3,"Formatter"],[6,"Result"],[8,"StdWasmApi"],[15,"never"],[8,"Transport"],[3,"StdWasmApiClient"],[8,"AsyncTransport"],[3,"StdWasmApiAsyncClient"],[3,"TypeId"]]},\
"oak_functions_sdk_abi_test_get_storage_item":{"doc":"Oak Functions ABI test.","t":"F","n":["main"],"q":[[0,"oak_functions_sdk_abi_test_get_storage_item"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"oak_functions_sdk_abi_test_invoke_testing":{"doc":"Oak Functions ABI test for Testing Extension.","t":"F","n":["main"],"q":[[0,"oak_functions_sdk_abi_test_invoke_testing"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"oak_functions_service":{"doc":"","t":"DLLLLLLLLLLLLLAALALLLANNNEIDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLGDDLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLAADDDDDDDDDDDDIDDDDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMRGGRRDIIDALLLLLLLLLLLKLLLLLLLLLLLFLKLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLL","n":["OakFunctionsService","abort_next_lookup_data","as_any","as_any_mut","borrow","borrow_mut","extend_next_lookup_data","finish_next_lookup_data","from","initialize","into","into_any","into_any_rc","invoke","logger","lookup","new","proto","try_from","try_into","type_id","wasm","Debug","Error","Info","Level","OakLogger","StandaloneLogger","Trace","Warn","as_any","as_any","as_any_mut","as_any_mut","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_str","ge","ge","gt","gt","hash","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","iter","le","le","log_public","log_public","log_sensitive","log_sensitive","lt","lt","max","partial_cmp","partial_cmp","to_level_filter","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Data","LookupData","LookupDataManager","abort_next_lookup_data","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_lookup_data","extend_next_lookup_data","finish_next_lookup_data","for_test","format_bytes","from","from","get","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","is_empty","len","log_debug","log_error","new_empty","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","oak","functions","AbortNextLookupDataResponse","Empty","ExtendNextLookupDataRequest","ExtendNextLookupDataResponse","FinishNextLookupDataRequest","FinishNextLookupDataResponse","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","LookupDataChunk","LookupDataEntry","OakFunctions","OakFunctionsAsyncClient","OakFunctionsClient","OakFunctionsServer","PublicKeyInfo","abort_next_lookup_data","abort_next_lookup_data","abort_next_lookup_data","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","attestation","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","constant_response_size","default","default","default","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend_next_lookup_data","extend_next_lookup_data","extend_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","finish_next_lookup_data","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","invoke","invoke","invoke","invoke","items","key","new","new","new","public_key","public_key_info","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","wasm_module","ALLOC_FUNCTION_NAME","AbiPointer","AbiPointerOffset","MAIN_FUNCTION_NAME","MEMORY_NAME","UserState","WasmApi","WasmApiFactory","WasmHandler","api","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create","create_wasm_api","from","from","handle_invoke","into","into","into_any","into_any","into_any_arc","into_any_rc","into_any_rc","invoke","new_wasm_handler","to_owned","transport","try_from","try_from","try_into","try_into","type_id","type_id","StdWasmApiFactory","StdWasmApiImpl","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create_wasm_api","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","log","lookup_data","lookup_data_manager","read_request","test","to_owned","transport","try_from","try_from","try_into","try_into","type_id","type_id","write_response"],"q":[[0,"oak_functions_service"],[22,"oak_functions_service::logger"],[89,"oak_functions_service::lookup"],[131,"oak_functions_service::proto"],[132,"oak_functions_service::proto::oak"],[133,"oak_functions_service::proto::oak::functions"],[479,"oak_functions_service::wasm"],[521,"oak_functions_service::wasm::api"]],"d":["","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Wasm business logic provider based on Wasmi.","The “debug” level.","The “error” level.","The “info” level.","An enum representing the available verbosity levels of the …","","Temporary OakLogger implementation using the <code>log</code> crate.","The “trace” level.","The “warn” level.","","","","","Returns the string representation of the <code>Level</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Iterate through all supported logging levels.","","","Logs a message that contains only public, non-sensitive …","","Logs the message, which might contain sensitive …","","","","Returns the most verbose logging level.","","","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","","","Provides access to shared lookup data.","Utility for managing lookup data.","","","","","","","","","","","","Creates a new <code>LookupData</code> instance with a reference to the …","","","Creates an instance of LookupData populated with the given …","Converts a binary sequence to a string if it is a valid …","Returns the argument unchanged.","Returns the argument unchanged.","Gets an individual entry from the backing data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Whether the backing data is empty.","Gets the number of entries in the backing data.","Logs a debug message.","Logs an error message.","Creates a new instance with empty backing data.","","","","","","","","","","","","If the definition of ExtendNextLookupData changes, the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","TODO(#3843): Use explicit <code>oak_crypto</code> messages.","TODO(#3843): Use explicit <code>oak_crypto</code> messages.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fixed name of the function to allocate memory. Every Oak …","Type aliases for positions in Wasm linear memory. Any …","Type aliases for offsets in Wasm linear memory.","Fixed name of the function to start a Wasm. Every Oak Wasm …","The name of the memory every Oak Wasm module has.","<code>UserState</code> holds the user request bytes and response bytes …","A trait for Wasm APIs that can be called from Wasm modules.","A trait for creating Wasm APIs that can be called from …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Handles a call to invoke by getting the raw request bytes …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a new <code>WasmHandler</code> instance.","","","","","","","","","The main purpose of this factory is to allow creating a …","Implementation of the standard Oak Functions API.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,21,21,21,0,0,0,21,21,21,23,21,23,21,21,23,21,23,21,23,21,23,21,23,21,21,21,21,21,21,21,23,21,21,21,21,21,21,21,23,21,23,21,23,21,23,21,21,21,33,23,33,23,21,21,21,21,21,21,21,23,21,21,23,21,23,21,23,0,0,0,35,35,36,35,36,35,36,35,36,36,36,35,35,35,35,0,35,36,36,35,36,35,36,35,36,35,36,36,36,36,36,35,36,35,36,35,36,35,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,43,45,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,46,16,17,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,7,11,12,46,16,17,47,48,7,8,9,10,3,2,11,12,46,16,17,47,48,7,8,9,10,3,2,49,11,12,46,16,17,47,48,7,8,9,10,3,2,49,11,11,12,46,16,17,47,48,7,8,9,10,3,2,11,12,46,16,17,47,48,7,8,9,10,3,2,11,12,46,16,17,47,48,7,8,9,10,3,2,51,43,45,51,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,51,43,45,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,51,43,45,49,48,47,43,45,49,46,12,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,43,45,11,12,46,16,17,47,48,7,8,9,10,3,2,49,47,11,0,0,0,0,0,0,0,0,0,0,72,53,72,53,72,53,72,53,53,53,53,54,72,53,53,72,53,72,53,72,72,53,53,0,53,57,72,53,72,53,72,53,0,0,61,60,61,60,61,60,61,60,60,60,61,61,60,61,60,61,60,61,60,61,60,60,60,61,60,60,60,60,61,60,61,60,61,60,60],"f":[0,[[1,2],[[5,[3,4]]]],[[],6],[[],6],[[]],[[]],[[1,7],[[5,[8,4]]]],[[1,9],[[5,[10,4]]]],[[]],[[1,11],[[5,[12,4]]]],[[]],[[[14,[13]]],[[14,[6,13]]]],[15,[[15,[6]]]],[[1,16],[[5,[17,4]]]],0,0,[[[19,[18]]],1],0,[[],5],[[],5],[[],20],0,0,0,0,0,0,0,0,0,[[],6],[[],6],[[],6],[[],6],[21,22],[[]],[[]],[[]],[[]],[21,21],[23,23],[[]],[[]],[[21,21],24],[[],23],[[21,25],26],[[21,21],26],[[],26],[[],26],[[21,27],[[5,[28]]]],[[21,27],[[5,[28]]]],[[]],[[]],[22,[[5,[21]]]],[[21,25],26],[[21,21],26],[[21,21],26],[[21,25],26],[[21,29]],[[]],[[]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[[],30],[[21,25],26],[[21,21],26],[[21,22]],[[23,21,22]],[[21,22]],[[23,21,22]],[[21,21],26],[[21,25],26],[[],21],[[21,21],[[31,[24]]]],[[21,25],[[31,[24]]]],[21,25],[[]],[[]],[[],32],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],0,0,0,[[[35,[[0,[33,34]]]]]],[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[[36,[[0,[34,33,34]]]]],[[36,[[0,[34,33,34]]]]]],[[]],[[[35,[[0,[33,34]]]]],[[36,[[0,[33,34]]]]]],[[[35,[[0,[33,34]]]],37]],[[[35,[[0,[33,34]]]]]],[[37,[0,[33,34]]],[[35,[[0,[33,34]]]]]],[[[39,[38]]],32],[[]],[[]],[[[36,[[0,[33,34]]]],[39,[38]]],[[31,[[40,[38]]]]]],[[]],[[]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[[[36,[[0,[33,34]]]]],26],[[[36,[[0,[33,34]]]]],41],[[[36,[[0,[33,34]]]],22]],[[[36,[[0,[33,34]]]],22]],[[[0,[33,34]]],[[35,[[0,[33,34]]]]]],[[]],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2,[[5,[3,4]]]],[[[43,[42]],2],[[5,[[5,[3,4]]]]]],[[[45,[44]],2],[[5,[[5,[3,4]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[11],[12],[46],[16],[17],[47],[48],[7],[8],[9],[10],[3],[2],[11,11],[12,12],[46,46],[16,16],[17,17],[47,47],[48,48],[7,7],[8,8],[9,9],[10,10],[3,3],[2,2],[[[49,[34]]],[[49,[34]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],11],[[],12],[[],46],[[],16],[[],17],[[],47],[[],48],[[],7],[[],8],[[],9],[[],10],[[],3],[[],2],[11,41],[12,41],[46,41],[16,41],[17,41],[47,41],[48,41],[7,41],[8,41],[9,41],[10,41],[3,41],[2,41],[[11,11],26],[[12,12],26],[[46,46],26],[[16,16],26],[[17,17],26],[[47,47],26],[[48,48],26],[[7,7],26],[[8,8],26],[[9,9],26],[[10,10],26],[[3,3],26],[[2,2],26],[7,[[5,[8,4]]]],[[[43,[42]],7],[[5,[[5,[8,4]]]]]],[[[45,[44]],7],[[5,[[5,[8,4]]]]]],[9,[[5,[10,4]]]],[[[43,[42]],9],[[5,[[5,[10,4]]]]]],[[[45,[44]],9],[[5,[[5,[10,4]]]]]],[[11,27],50],[[12,27],50],[[46,27],50],[[16,27],50],[[17,27],50],[[47,27],50],[[48,27],50],[[7,27],50],[[8,27],50],[[9,27],50],[[10,27],50],[[3,27],50],[[2,27],50],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,[[5,[12,4]]]],[[[43,[42]],11],[[5,[[5,[12,4]]]]]],[[[45,[44]],11],[[5,[[5,[12,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[16,[[5,[17,4]]]],[[[43,[42]],16],[[5,[[5,[17,4]]]]]],[[[45,[44]],16],[[5,[[5,[17,4]]]]]],[[[49,[51]],[39,[38]]],[[5,[[40,[38]],52]]]],0,0,[42,[[43,[42]]]],[44,[[45,[44]]]],[51,[[49,[51]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[[53,[[0,[34,33]]]]],[[53,[[0,[34,33]]]]]],[[]],[[[39,[38]],[19,[54]],33],[[55,[[53,[33]]]]]],[[[40,[38]],[19,[[56,[[40,[38]]]]]]],[[14,[57]]]],[[]],[[]],[[[53,[33]],58],[[55,[59]]]],[[]],[[]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[19,[[19,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[[[53,[33]],[39,[38]]],[[55,[[40,[38]]]]]],[[[39,[38]],[19,[[35,[23]]]]],[[55,[[53,[23]]]]]],[[]],[[],[[14,[42]]]],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],0,0,[[],6],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[60,60],[[]],[[61,[40,[38]],[19,[[56,[[40,[38]]]]]]],[[14,[57]]]],[[]],[[]],[[]],[[]],[[[14,[13]]],[[14,[6,13]]]],[[[14,[13]]],[[14,[6,13]]]],[19,[[19,[6]]]],[19,[[19,[6]]]],[15,[[15,[6]]]],[15,[[15,[6]]]],[[60,62],[[5,[63,4]]]],[[60,64],[[5,[65,4]]]],0,[[60,66],[[5,[67,4]]]],[[60,68],[[5,[69,4]]]],[[]],[60,[[14,[42]]]],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],[[60,70],[[5,[71,4]]]]],"c":[],"p":[[3,"OakFunctionsService"],[3,"Empty"],[3,"AbortNextLookupDataResponse"],[3,"Status"],[4,"Result"],[8,"Any"],[3,"ExtendNextLookupDataRequest"],[3,"ExtendNextLookupDataResponse"],[3,"FinishNextLookupDataRequest"],[3,"FinishNextLookupDataResponse"],[3,"InitializeRequest"],[3,"InitializeResponse"],[3,"Global"],[3,"Box"],[3,"Rc"],[3,"InvokeRequest"],[3,"InvokeResponse"],[8,"AttestationReportGenerator"],[3,"Arc"],[3,"TypeId"],[4,"Level"],[15,"str"],[3,"StandaloneLogger"],[4,"Ordering"],[4,"LevelFilter"],[15,"bool"],[3,"Formatter"],[3,"Error"],[8,"Hasher"],[8,"Iterator"],[4,"Option"],[3,"String"],[8,"OakLogger"],[8,"Clone"],[3,"LookupDataManager"],[3,"LookupData"],[6,"Data"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"usize"],[8,"Transport"],[3,"OakFunctionsClient"],[8,"AsyncTransport"],[3,"OakFunctionsAsyncClient"],[3,"PublicKeyInfo"],[3,"LookupDataEntry"],[3,"LookupDataChunk"],[3,"OakFunctionsServer"],[6,"Result"],[8,"OakFunctions"],[15,"never"],[3,"WasmHandler"],[8,"WasmApiFactory"],[6,"Result"],[6,"Spinlock"],[8,"WasmApi"],[3,"Request"],[3,"Response"],[3,"StdWasmApiImpl"],[3,"StdWasmApiFactory"],[3,"LogRequest"],[3,"LogResponse"],[3,"LookupDataRequest"],[3,"LookupDataResponse"],[3,"ReadRequestRequest"],[3,"ReadRequestResponse"],[3,"TestRequest"],[3,"TestResponse"],[3,"WriteResponseRequest"],[3,"WriteResponseResponse"],[3,"UserState"]]},\
"oak_functions_test_utils":{"doc":"Test utilities to help with unit testing of Oak Functions …","t":"DDFFLLLLFFFFFFLLLLLLLFFLFFLLLLLLLLLF","n":["Background","Term","assert_response_body","background","borrow","borrow","borrow_mut","borrow_mut","build_rust_crate_enclave","build_rust_crate_linux","build_rust_crate_wasm","compile_rust_wasm","create_test_lookup_data","free_port","from","from","into","into","into_future","into_request","into_request","kill_process","make_request","poll","rust_crate_wasm_out_path","serialize_entries","terminate_and_join","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_temp_file"],"q":[[0,"oak_functions_test_utils"]],"d":["Wrapper around a termination signal <code>oneshot::Sender</code> and …","A wrapper around a termination signal <code>oneshot::Receiver</code>.","","Executes the provided closure passing to it a <code>Term</code> …","","","","","","Builds the crate identified by the given package name (as …","Builds the crate identified by the given package name (as …","Uses cargo to compile a Rust manifest to Wasm bytes.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Kills all the processes identified by the provided handle.","","","Returns the path of the Wasm module generated by the crate …","Serializes the provided map as a contiguous buffer of …","Sends the termination signal to the background task and …","","","","","","","","",""],"i":[0,0,0,0,4,17,4,17,0,0,0,0,0,0,4,17,4,17,17,4,17,0,0,17,0,0,4,4,17,4,17,4,17,4,17,0],"f":[0,0,[[1,2]],[3,4],[[]],[[]],[[]],[[]],[2,[[6,[5]]]],[2,[[6,[5]]]],[2,[[6,[5]]]],[[2,7],[[6,[[9,[8]]]]]],[[10,11],[[12,[[9,[8]],[9,[8]]]]]],[[],13],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[15],[[13,[16,[8]]],[[9,[8]]]],[[[18,[17]],19],20],[2,5],[[[12,[[9,[8]],[9,[8]]]]],[[9,[8]]]],[4],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[]],[[]],[[[16,[8]]],23]],"c":[],"p":[[3,"Response"],[15,"str"],[8,"FnOnce"],[3,"Background"],[3,"String"],[6,"Result"],[15,"bool"],[15,"u8"],[3,"Vec"],[3,"ByteUnit"],[15,"u32"],[3,"HashMap"],[15,"u16"],[3,"Request"],[3,"ReaderHandle"],[15,"slice"],[3,"Term"],[3,"Pin"],[3,"Context"],[4,"Poll"],[4,"Result"],[3,"TypeId"],[3,"NamedTempFile"]]},\
"oak_grpc_utils":{"doc":"","t":"DDLLLLMMLLMLLFLLLLLLLLL","n":["CodegenOptions","ExternPath","borrow","borrow","borrow_mut","borrow_mut","build_client","build_server","default","default","extern_paths","from","from","generate_grpc_code","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"oak_grpc_utils"]],"d":["Options for building gRPC code.","","","","","","Specify whether to build client related code.","Specify whether to build server related code.","","","Specify externally provided Protobuf packages or types.","Returns the argument unchanged.","Returns the argument unchanged.","Generate gRPC code from Protobuf using <code>tonic</code> library.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,1,2,1,2,1,1,1,2,1,1,2,0,1,2,2,1,2,1,2,1,2],"f":[0,0,[[]],[[]],[[]],[[]],0,0,[[],1],[[],2],0,[[]],[[]],[[3,[4,[3]],1],5],[[]],[[]],[[3,3],2],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7]],"c":[],"p":[[3,"CodegenOptions"],[3,"ExternPath"],[15,"str"],[15,"slice"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"oak_hello_world_linux_init":{"doc":"","t":"AFF","n":["init","main","init"],"q":[[0,"oak_hello_world_linux_init"],[2,"oak_hello_world_linux_init::init"]],"d":["","","Performs the minimum initialization required from the …"],"i":[0,0,0],"f":[0,[[],1],[[],2]],"c":[],"p":[[15,"never"],[6,"Result"]]},\
"oak_iree_service":{"doc":"","t":"DLLLLLLLALLLAADDDDDIDDDDMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["IreeService","borrow","borrow_mut","from","initialize","into","invoke","new","proto","try_from","try_into","type_id","oak","iree","AttestationEvidence","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","Iree","IreeAsyncClient","IreeClient","IreeServer","SessionId","attestation_evidence","attestation_report","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","initialize","initialize","initialize","into","into","into","into","into","into","into","into","into","invoke","invoke","invoke","invoke","new","new","new","public_key","session_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value"],"q":[[0,"oak_iree_service"],[12,"oak_iree_service::proto"],[13,"oak_iree_service::proto::oak"],[14,"oak_iree_service::proto::oak::iree"]],"d":["","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,11,6,7,20,22,2,3,11,12,6,7,14,20,22,2,3,11,12,6,7,14,2,3,11,12,6,7,2,3,11,12,6,7,14,2,3,11,12,6,7,14,2,3,11,12,6,7,2,3,11,12,6,7,2,3,11,12,6,7,2,3,11,12,6,7,20,22,2,3,11,12,6,7,14,23,20,22,20,22,2,3,11,12,6,7,14,23,20,22,14,20,22,14,11,6,2,3,11,12,6,7,14,20,22,2,3,11,12,6,7,14,20,22,2,3,11,12,6,7,14,20,22,2,3,11,12,6,7,14,12],"f":[0,[[]],[[]],[[]],[[1,2],[[5,[3,4]]]],[[]],[[1,6],[[5,[7,4]]]],[[[9,[8]]],1],0,[[],5],[[],5],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[3],[11],[12],[6],[7],[2,2],[3,3],[11,11],[12,12],[6,6],[7,7],[[[14,[13]]],[[14,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],3],[[],11],[[],12],[[],6],[[],7],[2,15],[3,15],[11,15],[12,15],[6,15],[7,15],[[2,2],16],[[3,3],16],[[11,11],16],[[12,12],16],[[6,6],16],[[7,7],16],[[2,17],18],[[3,17],18],[[11,17],18],[[12,17],18],[[6,17],18],[[7,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[5,[3,4]]]],[[[20,[19]],2],[[5,[[5,[3,4]]]]]],[[[22,[21]],2],[[5,[[5,[3,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[5,[7,4]]]],[[[20,[19]],6],[[5,[[5,[7,4]]]]]],[[[22,[21]],6],[[5,[[5,[7,4]]]]]],[[[14,[23]],[25,[24]]],[[5,[[26,[24]],27]]]],[19,[[20,[19]]]],[21,[[22,[21]]]],[23,[[14,[23]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0],"c":[],"p":[[3,"IreeService"],[3,"InitializeRequest"],[3,"InitializeResponse"],[3,"Status"],[4,"Result"],[3,"InvokeRequest"],[3,"InvokeResponse"],[8,"AttestationReportGenerator"],[3,"Arc"],[3,"TypeId"],[3,"AttestationEvidence"],[3,"SessionId"],[8,"Clone"],[3,"IreeServer"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Transport"],[3,"IreeClient"],[8,"AsyncTransport"],[3,"IreeAsyncClient"],[8,"Iree"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"never"]]},\
"oak_launcher_utils":{"doc":"","t":"AADDLLLLLLLLLLLLLLLLLLLIDDMLLMLLLLLLLLKLMLLLLLLMLLLKLFMLLLLLLLLLLMKL","n":["channel","launcher","Connector","ConnectorHandle","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","into","into","invoke","spawn","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","GuestInstance","Instance","Params","app_binary","augment_args","augment_args_for_update","bios_binary","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command_for_update","connect","connect","enclave_binary","eq","fmt","from","from","from_arg_matches","from_arg_matches_mut","gdb","group_id","into","into","kill","kill","launch","memory_size","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vmm_binary","wait","wait"],"q":[[0,"oak_launcher_utils"],[2,"oak_launcher_utils::channel"],[23,"oak_launcher_utils::launcher"]],"d":["","","Singleton responsible for sending requests, and receiving …","Implementation of an <code>micro_rpc::AsyncTransport</code> that …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Spawn an instance of the <code>Connector</code> in a seperate task, and …","","","","","","","","Defines the interface of a launched guest instance. …","Represents an a guest instance launched in virtualized …","Represents parameters used for launching VM instances.","Path to the Oak Functions application binary to be loaded …","","","Path to the BIOS image to use.","","","","","","","","","Creates a channel to communicate with the guest instance.","","Path to the enclave binary to load into the VM.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Port to use for debugging with gdb","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kill the guest instance.","","Launches a new guest instance in given mode.","How much memory to give to the enclave binary, e.g., 256M …","Starts virtualized instance with given parameters and …","","","","","","","","","","Path to the VMM binary to execute.","Wait for the guest instance process to finish.",""],"i":[0,0,0,0,23,1,23,1,1,1,23,1,23,1,1,23,1,23,1,23,1,23,1,0,0,0,11,11,11,11,12,11,12,11,11,11,11,11,24,12,11,11,11,12,11,11,11,11,11,12,11,24,12,0,11,12,11,12,11,12,11,12,11,11,11,11,24,12],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[[]],[[]],[[]],[[]],[[1,[3,[2]]],[[6,[[5,[4]]]]]],[[[5,[7]]],1],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,[10,10],[10,10],0,[[]],[[]],[[]],[[]],[11,11],[[]],[[],10],[[],10],[[],[[6,[[5,[4]]]]]],[12,[[6,[[5,[4]]]]]],0,[[11,11],13],[[11,14],15],[[]],[[]],[16,[[8,[11,17]]]],[16,[[8,[11,17]]]],0,[[],[[19,[18]]]],[[]],[[]],[5,[[6,[[5,[4]]]]]],[[[5,[12]]],[[6,[[5,[4]]]]]],[11,[[21,[[5,[20]]]]]],0,[[11,22],[[21,[12]]]],[[]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],[[11,16],[[8,[17]]]],[[11,16],[[8,[17]]]],0,[[],[[6,[[5,[4]]]]]],[12,[[6,[[5,[4]]]]]]],"c":[],"p":[[3,"ConnectorHandle"],[15,"u8"],[15,"slice"],[8,"Future"],[3,"Box"],[3,"Pin"],[8,"Channel"],[4,"Result"],[3,"TypeId"],[3,"Command"],[3,"Params"],[3,"Instance"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[8,"Error"],[6,"Result"],[3,"UnixStream"],[3,"Connector"],[8,"GuestInstance"]]},\
"oak_linux_boot_params":{"doc":"","t":"NDNDDSNDDRNNENDNDNDNSSSDNNDNNSNNNDDEDDNSSSSSDMMMMMMMMMMMMMMLLLMMLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLMMMMMMLLMMMMLMMMMMMMMMMMMMMLLLLLLLMMMMMMMMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLMMMMMMMMMMMMMLMMMLLLMLLMMMMMMMMMMMMMMMMMMLMMMMMMMLLMMMMMMMMMMLLLMMMMLMLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLMMMMMMMMMLML","n":["ACPI","APMBiosInfo","AppleProperties","BootE820Entry","BootParams","CAN_USE_HEAP","CCBlob","CCBlobSevInfo","CCSetupData","CC_BLOB_SEV_INFO_MAGIC","DISABLED","DTB","E820EntryType","E820Ext","EDIDInfo","EFI","EFIInfo","IMA","ISTInfo","Jailhouse","KASLR_FLAG","KEEP_SEGMENTS","LOADED_HIGH","LoadFlags","NVS","None","OLPCOfwHeader","PCI","PMEM","QUIET_FLAG","RAM","RESERVED","RngSeed","ScreenInfo","SetupData","SetupDataType","SetupHeader","SysDescTable","UNUSABLE","XLF_CAN_BE_LOADED_ABOVE_4G","XLF_EFI_HANDOVER_32","XLF_EFI_HANDOVER_64","XLF_EFI_KEXEC","XLF_KERNEL_64","XLoadFlags","_eddbuf","_pad2","_pad3","_pad4","_pad5","_pad6","_pad7","_pad8","_pad9","_reserved","_reserved","_rsvd1","_rsvd2","acpi_rsdp_addr","addr","all","all","alt_mem_k","apm_bios_info","args","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","blue_pos","blue_size","boot_flag","bootsect_kludge","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capabilities","cc_blob_address","cc_blob_address","cif_handler","cl_magic","cl_offset","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd_line_ptr","cmdline_size","code32_start","command","complement","complement","contains","contains","cpuid_len","cpuid_phys","cseg","cseg_16","cseg_16_len","cseg_len","difference","difference","dseg","dseg_len","dummy","e820_entries","e820_table","e820_table","edd_mbr_sig_buf_entries","edd_mbr_sig_buffer","eddbuf_entries","edid_info","efi_info","efi_loader_signature","efi_memdesc_size","efi_memdesc_version","efi_memmap","efi_memmap_hi","efi_memmap_size","efi_systab","efi_systab_hi","empty","empty","entry_type","eq","eq","equivalent","equivalent","event","ext_cmd_line_ptr","ext_lfb_base","ext_loader_type","ext_loader_ver","ext_mem_k","ext_ramdisk_image","ext_ramdisk_size","extend","extend","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","from_repr","green_pos","green_size","handover_offset","hardware_subarch","hardware_subarch_data","hd0_info","hd1_info","hdr","header","header","heap_end_ptr","init_size","initrd_addr_max","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","irq_desc_table","is_all","is_all","is_empty","is_empty","ist_info","iter","iter","iter_names","iter_names","jump","kbd_status","kernel_alignment","kernel_info_offset","kernel_version","len","length","lfb_base","lfb_depth","lfb_height","lfb_linelength","lfb_size","lfb_width","load_flags","loadflags","magic","min_alignment","new","new","new","next","not","not","offset","ofw_magic","ofw_version","olpc_ofw_header","orig_video_cols","orig_video_ega_bx","orig_video_is_vga","orig_video_lines","orig_video_mode","orig_video_page","orig_video_points","orig_x","orig_y","pages","payload_length","payload_offset","perf_level","pref_address","protocol","ram_size","ramdisk_image","ramdisk_size","realmode_swtch","red_pos","red_size","relocatable_kernel","remove","remove","root_dev","root_flags","rsvd_pos","rsvd_size","scratch","screen_info","secrets_len","secrets_phys","secure_boot","sentinel","set","set","setup_data","setup_data","setup_move_size","setup_sects","signature","size","start_sys_seg","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","sys_desc_table","syssize","table","tboot_addr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of_loader","union","union","unused2","unused3","version","version","version","vesa_attributes","vesapm_off","vesapm_seg","vid_mode","x_load_flags","xloadflags","zeroed"],"q":[[0,"oak_linux_boot_params"]],"d":["ACPI Reclaim Memory. Available after the OS reads the ACPI …","","","","","Indicates that the value entered in …","","","","","Memory that is not enabled.","","E820 address range types according to Chapter 15 of the …","","","","","","","","Used internally by the compressed kernel to communicate …","","If <code>0</code>, the protected-mode code is loaded at <code>0x10000</code>.If <code>1</code>, …","Boot protocol option flags.","ACPI NVS memory; in use or reserved by the system.","","","","Persistent memory: must be handled distinct from …","Requests the kernel to not write early messages that …","Available RAM usable by the operating system.","In use or reserved by the system.","","","","","Real-mode Kernel Header.","","Memory in which errors have been detected.","The kernel/boot_params/cmdline/ramdisk can be above 4G.","The kernel supports the 32-bit EFI handoff entry point …","The kernel supports the 64-bit EFI handoff entry point …","The kernel supports kexec EFI boot with EFI runtime …","This kernel has the legacy 64-bit entry point at <code>0x200</code>.","Extended Boot protocol option flags.","","","","","","","","","","","","","","","","Returns the set containing all flags.","Returns the set containing all flags.","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","0xAA55 magic number","DO NOT USE - for bootsect.S use only","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","32-bit pointer to the kernel command line","Maximum size of the kernel command line","Boot loader hook","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","Extended boot laoder ID","Extended boot loader version","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Try to create Self from the raw representation","Try to create Self from the raw representation","","","Offset of handover entry point","Hardware subarchitecture","Subarchitecture-specific data","","","","","Magic signature “HdrS”","Free memory after setup end","Linear memory required during initialization","Highest legal initrd address","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","Jump instruction","","Physical addr alignment required for kernel","Offset of the kernel_info","Pointer to kernel version string","","","","","","","","","","Boot protocol option flags","","Minimum alignment, as a power of two","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","","","","","","","","","","","","","Length of kernel payload","Offset of kernel payload","","Preferred loading address","","DO NOT USE - for bootsect.S use only","initrd load address (set by boot loader)","initrd size (set by boot loader)","Boot loader hook","","","Whether kernel is relocatable or not","Removes the specified flags in-place.","Removes the specified flags in-place.","Default root device number","If this field is nonzero, the root defaults to readonly.","","","","","","","","","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","","64-bit physical pointer to linked list of struct setup_data","Move to high memory size (used with hooks)","The size of the setup code in 512-byte sectors.","","","The load-low segment (<code>0x1000</code>) (obsolete)","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","The size of the protected-mode code in units of 16-byte …","","","","","","","","","","","","","","","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Boot loader identifier","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","","Boot protocol version supported","","","","","","Video mode control","","Boot protocol option flags",""],"i":[9,0,10,0,0,3,10,0,0,0,9,10,0,10,0,10,0,10,0,10,3,3,3,0,9,10,0,10,9,3,9,9,10,0,0,0,0,0,9,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,14,21,21,21,5,1,3,4,5,5,5,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,14,14,13,13,9,3,4,10,11,12,13,1,14,15,16,17,18,19,20,5,21,9,3,4,10,11,12,13,1,14,15,16,17,18,19,20,5,21,14,12,5,18,14,14,9,10,11,12,13,1,14,15,16,17,18,19,20,5,21,9,10,11,12,13,1,14,15,16,17,18,19,20,5,21,13,13,13,16,3,4,3,4,21,21,15,15,15,15,3,4,15,15,20,5,5,5,5,5,5,5,5,19,19,19,19,19,19,19,19,3,4,1,9,10,9,10,16,5,14,13,13,14,5,5,3,4,14,15,9,9,3,3,3,3,4,4,4,4,10,10,11,12,13,1,14,15,16,17,18,19,20,5,21,9,3,4,10,11,12,13,1,14,15,16,17,18,19,20,5,21,3,4,3,3,4,4,3,4,3,4,3,4,9,10,14,14,13,13,13,5,5,5,12,13,13,13,13,3,4,3,4,3,4,9,3,4,10,11,12,13,1,14,15,16,17,18,19,20,5,21,3,4,18,3,4,3,4,5,3,4,3,4,13,5,13,13,13,11,17,14,14,14,14,14,14,13,13,21,13,12,1,21,11,3,4,15,18,18,5,14,14,14,14,14,14,14,14,14,14,13,13,16,13,5,13,13,13,13,14,14,13,3,4,13,13,14,14,5,5,21,21,5,5,3,4,13,13,13,13,16,1,13,3,4,3,4,3,4,5,13,17,5,9,10,11,12,13,1,14,15,16,17,18,19,20,5,21,9,10,3,4,9,3,4,10,11,12,13,1,14,15,16,17,18,19,20,5,21,9,3,4,10,11,12,13,1,14,15,16,17,18,19,20,5,21,11,9,3,4,10,11,12,13,1,14,15,16,17,18,19,20,5,21,13,3,4,14,14,13,15,21,14,14,14,13,13,13,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[],3],[[],4],0,0,[5,6],[[3,3],3],[[4,4],4],[[3,3]],[[4,4]],[[3,3],3],[[4,4],4],[[3,3]],[[4,4]],[3,7],[3,7],[4,8],[4,8],[[3,3],3],[[4,4],4],[[3,3]],[[4,4]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[9,9],[10,10],[11,11],[12,12],[13,13],[1,1],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[5,5],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[3,3],[4,4],[[3,3],22],[[4,4],22],0,0,0,0,0,0,[[3,3],3],[[4,4],4],0,0,0,0,[5,[[23,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[],4],[1,[[24,[9]]]],[[9,9],22],[[10,10],22],[[],22],[[],22],0,0,0,0,0,0,0,0,[[3,25]],[[4,25]],0,0,[[9,26],27],[[9,26],[[29,[28]]]],[[3,26],27],[[3,26],27],[[3,26],27],[[3,26],27],[[4,26],27],[[4,26],27],[[4,26],27],[[4,26],27],[[10,26],[[29,[28]]]],[[10,26],27],[[11,26],27],[[12,26],27],[[13,26],27],[[1,26],27],[[14,26],27],[[15,26],27],[[16,26],27],[[17,26],27],[[18,26],27],[[19,26],27],[[20,26],27],[[5,26],27],[[21,26],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[24,[3]]]],[8,[[24,[4]]]],[7,3],[7,3],[8,4],[8,4],[7,3],[8,4],[25,3],[25,4],[30,[[24,[3]]]],[30,[[24,[4]]]],[31,[[24,[9]]]],[31,[[24,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[3,3]],[[4,4]],[[3,3],3],[[4,4],4],[[3,3],22],[[4,4],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[4],0,[3,22],[4,22],[3,22],[4,22],0,[3,[[32,[3]]]],[4,[[32,[4]]]],[3,[[33,[3]]]],[4,[[33,[4]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[13,[[24,[3]]]],0,0,0,[21,12],[[2,2,9],1],[[],21],0,[3,3],[4,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[5,30],0,0,0,0,0,0,0,[[3,3]],[[4,4]],0,0,0,0,0,0,0,0,0,0,[[3,3,22]],[[4,4,22]],[13,11],0,0,0,0,[1,2],0,[[3,3],3],[[4,4],4],[[3,3]],[[4,4]],[[3,3],3],[[4,4],4],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[[3,3]],[[4,4]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],0,[[3,3],3],[[4,4],4],0,0,0,0,0,0,0,0,0,[13,[[24,[4]]]],0,[[],5]],"c":[21,84,270,271,355,364,365,382,389],"p":[[3,"BootE820Entry"],[15,"usize"],[3,"LoadFlags"],[3,"XLoadFlags"],[3,"BootParams"],[3,"CStr"],[15,"u8"],[15,"u16"],[4,"E820EntryType"],[4,"SetupDataType"],[3,"SetupData"],[3,"CCSetupData"],[3,"SetupHeader"],[3,"ScreenInfo"],[3,"APMBiosInfo"],[3,"ISTInfo"],[3,"SysDescTable"],[3,"OLPCOfwHeader"],[3,"EFIInfo"],[3,"EDIDInfo"],[3,"CCBlobSevInfo"],[15,"bool"],[15,"slice"],[4,"Option"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[15,"str"],[15,"u32"],[3,"Iter"],[3,"IterNames"],[3,"String"],[3,"TypeId"]]},\
"oak_remote_attestation":{"doc":"","t":"AAAIDDLLLLLLLLLKLLLLLLLLLLLIDDMLLLLLLLLLLKLLLLMLLLLLLLAAADDDDDDDDDMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["attester","handler","proto","AttestationReportGenerator","Attester","EmptyAttestationReportGenerator","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","generate_attestation_evidence","generate_attestation_report","generate_attestation_report","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AttestationHandler","AttestationSessionHandler","PublicKeyInfo","attestation","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create","fmt","from","from","get_attestation_evidence","get_attestation_evidence","into","into","invoke","public_key","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","oak","session","v1","ApplicationData","AttestationBundle","AttestationEndorsement","AttestationEvidence","BinaryAttestation","GetPublicKeyRequest","GetPublicKeyResponse","InvokeRequest","InvokeResponse","application_data","attestation","attestation_bundle","attestation_endorsement","attestation_evidence","base64_pem_encoded_rekor_public_key","binary_attestation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","config","default","default","default","default","default","default","default","default","default","digest","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encrypted_body","encrypted_body","encryption_public_key","endorsement_statement","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","rekor_log_entry","signed_application_data","signing_public_key","tee_certificates","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"oak_remote_attestation"],[3,"oak_remote_attestation::attester"],[27,"oak_remote_attestation::handler"],[54,"oak_remote_attestation::proto"],[55,"oak_remote_attestation::proto::oak"],[56,"oak_remote_attestation::proto::oak::session"],[57,"oak_remote_attestation::proto::oak::session::v1"]],"d":["","","","A trait implementing the functionality of generating a …","A struct implementing the functionality of an attester …","An instance of <code>AttestationReportGenerator</code> that always …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate an attestation evidence containing a remote …","Generate a remote attestation report, ensuring that …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Information about a public key.","The serialized attestation report that binds the public …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The serialized public key.","","","","","","","","","","","","AttestationBundle contains the information that the …","AttestationEndorsement contains statements that some …","AttestationEvidence contains all the information that …","","","","","","The optional application-specific data.","The serialized attestation report binding the public key.","The enclave’s signing and encryption public keys and …","Supporting evidence required for verifying the integrity …","Attestation evidence from the enclave.","Public key of rekor at the time of uploading the …","The binary attestation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The serialized application configuration. The format of …","","","","","","","","","","The cryptographic digest of the application, of the form …","","","","","","","","","","Body of the request, encrypted with the enclave public key.","Body of the request, encrypted with the client public or …","The serialized public key part of the enclave encryption …","The serialized binary endorsement statement from the …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The serialized Rekor LogEntry as proof of the inclusion of …","The signature over the application_data, signed by the …","The serialized public key part of the enclave signing key. …","The serialized TEE certificate(s). The details of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,1,2,1,1,1,2,1,2,8,1,2,1,2,1,2,1,2,1,2,1,0,0,0,13,15,13,15,13,13,13,15,13,15,13,28,15,15,13,15,13,13,15,13,15,13,15,13,0,0,0,0,0,0,0,0,0,0,0,0,19,3,23,18,18,20,19,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,21,3,18,19,20,21,22,23,24,25,21,3,18,19,20,21,22,23,24,25,24,25,3,20,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,20,3,3,19,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25,3,18,19,20,21,22,23,24,25],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[[]],[[]],[2,[[4,[3]]]],[[[6,[5]]],[[4,[[7,[5]]]]]],[[1,[6,[5]]],[[4,[[7,[5]]]]]],[[]],[[]],[[[9,[8]],[9,[10]]],2],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,[[]],[[]],[[]],[[]],[13,13],[[]],[[[9,[8]],14],[[4,[[15,[14]]]]]],[[13,16],17],[[]],[[]],[[],[[4,[3]]]],[[[15,[14]]],[[4,[3]]]],[[]],[[]],[[[15,[14]],[6,[5]]],[[4,[[7,[5]]]]]],0,[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[18],[19],[20],[21],[22],[23],[24],[25],[3,3],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],3],[[],18],[[],19],[[],20],[[],21],[[],22],[[],23],[[],24],[[],25],0,[3,26],[18,26],[19,26],[20,26],[21,26],[22,26],[23,26],[24,26],[25,26],0,0,0,0,[[3,3],27],[[18,18],27],[[19,19],27],[[20,20],27],[[21,21],27],[[22,22],27],[[23,23],27],[[24,24],27],[[25,25],27],[[3,16],17],[[18,16],17],[[19,16],17],[[20,16],17],[[21,16],17],[[22,16],17],[[23,16],17],[[24,16],17],[[25,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12]],"c":[],"p":[[3,"EmptyAttestationReportGenerator"],[3,"Attester"],[3,"AttestationEvidence"],[6,"Result"],[15,"u8"],[15,"slice"],[3,"Vec"],[8,"AttestationReportGenerator"],[3,"Arc"],[3,"EncryptionKeyProvider"],[4,"Result"],[3,"TypeId"],[3,"PublicKeyInfo"],[8,"Transport"],[3,"AttestationSessionHandler"],[3,"Formatter"],[6,"Result"],[3,"AttestationBundle"],[3,"AttestationEndorsement"],[3,"BinaryAttestation"],[3,"ApplicationData"],[3,"GetPublicKeyRequest"],[3,"GetPublicKeyResponse"],[3,"InvokeRequest"],[3,"InvokeResponse"],[15,"usize"],[15,"bool"],[8,"AttestationHandler"]]},\
"oak_remote_attestation_verification":{"doc":"","t":"AADDDDDDDDDMMMMLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLFFMMLLLLLLLLLMMMMLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMMFFFFIDDMLLLLLLLLLLLLLLLLLKLFF","n":["rekor","verifier","Body","Data","GenericSignature","Hash","LogEntry","LogEntryVerification","PublicKey","RekorSignatureBundle","Spec","algorithm","api_version","base64_signature","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalized","content","content","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","get_rekor_log_entry_body","get_sha256","hash","integrated_time","into","into","into","into","into","into","into","into","into","kind","log_id","log_index","public_key","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signed_entry_timestamp","spec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmarshal_pem_to_p256_public_key","value","verification","verify_rekor_body","verify_rekor_log_entry","verify_rekor_signature","verify_signature","AttestationVerifier","InsecureAttestationVerifier","ReferenceValue","binary_hash","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","from","from","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify","verify","verify_binary_attestation","verify_endorsement_statement"],"q":[[0,"oak_remote_attestation_verification"],[2,"oak_remote_attestation_verification::rekor"],[134,"oak_remote_attestation_verification::verifier"]],"d":["This module provides structs for representing a Rekor …","","Struct representing the body in a Rekor LogEntry.","Struct representing the hashed data in the body of a Rekor …","Struct representing a signature in the body of a Rekor …","Struct representing a hash digest. Based on …","Struct representing a Rekor LogEntry. Based on …","Struct representing a verification object in a Rekor …","Struct representing a public key included in the body of a …","Convenient struct for verifying the <code>signedEntryTimestamp</code> …","Struct representing the <code>spec</code> in the body of a Rekor …","","","Base64-encoded signature over the canonicalized JSON …","We cannot directly use the type <code>Body</code> here, since body is …","","","","","","","","","","","","","","","","","","","Canonicalized JSON representation, based on RFC 8785 …","Base64 content that is signed.","Base64 content of a public key.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Parses the given bytes into a Rekor <code>LogEntry</code> object, and …","Computes a SHA-256 digest of <code>input</code> and returns it in a …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This is the SHA256 hash of the DER-encoded public key for …","Minimum: 0","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a PEM-encoded x509/PKIX public key into a …","","Includes a signature over the body, integratedTime, logID, …","Verifies the signature in the <code>body</code> over the <code>contents_bytes</code>…","Verifies a Rekor LogEntry.","Parses <code>log_entry_bytes</code> into a Rekor LogEntry, and verifies …","Verifies the given base64-encoded signature over the given …","A trait implementing the functionality of a verifier that …","An instance of <code>AttestationVerifier</code> that succeeds iff the …","Reference values used by the verifier to appraise the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Verify that the provided evidence was endorsed and …","","","Parses the given bytes into an endorsement statement and …"],"i":[0,0,0,0,0,0,0,0,0,0,0,7,4,19,2,19,2,4,5,6,7,8,9,10,19,2,4,5,6,7,8,9,10,19,8,9,5,2,4,5,6,7,8,9,10,2,4,5,6,7,8,9,10,2,4,5,6,7,8,9,10,8,19,2,4,5,6,7,8,9,10,0,0,6,2,19,2,4,5,6,7,8,9,10,4,2,2,8,2,4,5,6,7,8,9,10,5,10,4,19,19,2,4,5,6,7,8,9,10,19,2,4,5,6,7,8,9,10,19,2,4,5,6,7,8,9,10,0,7,2,0,0,0,0,0,0,0,25,25,22,25,22,22,22,25,22,25,22,22,25,22,25,22,25,22,27,22,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[1,[[3,[2]]]],[1,[[3,[4]]]],[1,[[3,[5]]]],[1,[[3,[6]]]],[1,[[3,[7]]]],[1,[[3,[8]]]],[1,[[3,[9]]]],[1,[[3,[10]]]],[[2,2],11],[[4,4],11],[[5,5],11],[[6,6],11],[[7,7],11],[[8,8],11],[[9,9],11],[[10,10],11],[[2,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[[8,12],13],[[9,12],13],[[10,12],13],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[14]]],[[16,[4]]]],[[[15,[14]]],[[17,[14]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[2,18],3],[[4,18],3],[[5,18],3],[[6,18],3],[[7,18],3],[[8,18],3],[[9,18],3],[[10,18],3],0,0,0,[[],3],[2,[[16,[19]]]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[15,[14]]],[[16,[21]]]],0,0,[[4,[15,[14]],[15,[14]]],16],[[[15,[14]],[15,[14]],[15,[14]]],16],[[[15,[14]],[15,[14]]],16],[[[15,[14]],[15,[14]],[15,[14]]],16],0,0,0,0,[[]],[[]],[[]],[[]],[22,22],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],20],[[],20],[[23,24,25],16],[[23,24,25],16],[[26,25,[15,[14]],[15,[14]]],16],[[[15,[14]],25],16]],"c":[],"p":[[8,"Deserializer"],[3,"LogEntry"],[4,"Result"],[3,"Body"],[3,"Spec"],[3,"Data"],[3,"Hash"],[3,"GenericSignature"],[3,"PublicKey"],[3,"LogEntryVerification"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"u8"],[15,"slice"],[6,"Result"],[15,"array"],[8,"Serializer"],[3,"RekorSignatureBundle"],[3,"TypeId"],[6,"VerifyingKey"],[3,"InsecureAttestationVerifier"],[3,"AttestationEvidence"],[3,"AttestationEndorsement"],[3,"ReferenceValue"],[3,"BinaryAttestation"],[8,"AttestationVerifier"]]},\
"oak_restricted_kernel":{"doc":"Main ‘kernel’ for baremetal Oak Functions.","t":"HHHHFAAFFDDEGDDNDNMMMMMLLLLLLLLLLLLMMMMMMMMMMMMLLLLLLLLLLLLLFLFLLLMMMMLLLLLLMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLMM","n":["FRAME_ALLOCATOR","GUEST_HOST_HEAP","PAGE_TABLES","VMA_ALLOCATOR","panic","shutdown","snp_guest","start_kernel","shutdown","AttestationReport","AttestationReportData","AuthorKey","DerivedKey","EcdsaSignature","GuestPolicy","No","TcbVersion","Yes","abi_major","abi_minor","author_key_digest","author_key_en","boot_loader","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chip_id","committed_build","committed_major","committed_minor","committed_tcb","current_build","current_major","current_minor","current_tcb","data","family_id","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_repr","get_attestation","get_author_key_en","get_derived_key","get_flags","get_platform_info","get_signature_algo","guest_svn","host_data","id_key_digest","image_id","into","into","into","into","into","into","launch_tcb","measurement","microcode","platform_info","policy","r","report_data","report_id","report_id_ma","reported_tcb","s","signature","signature_algo","snp","tee","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","validate","validate","validate_format","version","vmpl"],"q":[[0,"oak_restricted_kernel"],[8,"oak_restricted_kernel::shutdown"],[9,"oak_restricted_kernel::snp_guest"]],"d":["Allocator for physical memory frames in the system. We …","The allocator for allocating space in the memory area that …","Active page tables.","Allocator for long-lived pages in the kernel.","Common panic routine for the kernel. This needs to be …","","","Main entry point for the kernel, to be called from …","Tries various ways to shut down the machine.","A signed attestation report.","The data contained in an attestation report.","Whether the author key digest is included in the report.","","An ECDSA signature.","The required policy for a guest to run.","The author key digest is not present.","The version of all the components in the Trusted Computing …","The author key digest is present.","The minimum ABI major version required to launch the guest.","The minimum ABI minor version required to launch the guest.","The SHA-384 digest of the author public key used to …","The least significant bit indicates Whether the digest of …","The current security version number (SVN) of the secure …","","","","","","","","","","","","","Identifier unique to the chip, unless the ID has been …","The build number of the committed secure firmware ABI …","The major number of the committed secure firmware ABI …","The minor number of the committed secure firmware ABI …","The committed TCB version.","The build number of the current secure firmware ABI …","The major number of the current secure firmware ABI …","The minor number of the current secure firmware ABI …","The current version of each of the components in the …","The data contained in the report.","The family ID provided at launch.","The allowed settings for the guest.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Requests an attestation report.","Gets the author key enabled field as an <code>AuthorKey</code> enum if …","Requests a derived key.","Gets the flags field as a <code>PolicyFlags</code> representation if …","Gets the platform info field as a <code>PlatformInfo</code> …","Gets the signing algorithm field as a <code>SigningAlgorithm</code> …","The guest security version number.","Custom data provided by the hypervisor at launch.","The SHA-384 digest of the ID public key used to sign the …","The image ID provided at launch.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The value of the current TCB version when the guest was …","The measurement of the VM memory calculated at launch.","The lowest current patch level of all the CPU cores.","Information about the platform.","The policy required by the guest VM to be launched.","The R component of this signature. The value is …","The custom data provided in the attestation request.","The report ID of this guest.","The report ID of this guest’s migration agent.","The reported TCB version that was used to generate the …","The S component of this signature. The value is …","The signature over the data.","The algorithm used to sign the report.","The current SVN of the SNP firmware.","The current SVN of the PSP operating system.","","","","","","","","","","","","","","","","","","","Checks that the report data is valid and the signature has …","Checks that fields with specific expected values or ranges …","Checks that the flags are valid and the reserved bytes are …","Checks that the reserved bytes are all zero.","Checks that the reserved bytes are all zero.","The version of the attestation report format.","The VMPL value that was passed in the request."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,11,9,9,8,8,10,4,8,9,10,11,12,4,8,9,10,11,12,8,8,8,8,8,8,8,8,8,4,8,9,4,8,9,10,11,12,4,8,9,10,11,12,11,0,8,0,9,8,8,8,8,8,8,4,8,9,10,11,12,8,8,10,8,8,12,8,8,8,8,12,4,8,10,10,4,8,9,10,11,12,4,8,9,10,11,12,4,8,9,10,11,12,4,8,9,10,12,8,8],"f":[0,0,0,0,[1,2],0,0,[3,2],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[4,5],[[7,[6]]]],[[8,5],[[7,[6]]]],[[9,5],[[7,[6]]]],[[10,5],[[7,[6]]]],[[11,5],[[7,[6]]]],[[12,5],[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[14,[11]]]],[[[16,[15]]],[[17,[4]]]],[8,[[14,[11]]]],[[],[[17,[18]]]],[9,[[14,[19]]]],[8,[[14,[20]]]],[8,[[14,[21]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[4,[[7,[23]]]],[8,[[7,[23]]]],[9,[[7,[23]]]],[10,[[7,[23]]]],[12,[[7,[23]]]],0,0],"c":[],"p":[[3,"PanicInfo"],[15,"never"],[3,"BootParams"],[3,"AttestationReport"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"AttestationReportData"],[3,"GuestPolicy"],[3,"TcbVersion"],[4,"AuthorKey"],[3,"EcdsaSignature"],[15,"u64"],[4,"Option"],[15,"u8"],[15,"array"],[6,"Result"],[6,"DerivedKey"],[3,"PolicyFlags"],[3,"PlatformInfo"],[4,"SigningAlgorithm"],[3,"TypeId"],[15,"str"]]},\
"oak_restricted_kernel_api":{"doc":"","t":"DDLLLLLLLLLLLLLLLAOLLLLLLLFFFFFFFFFF","n":["FileDescriptorChannel","StderrLogger","borrow","borrow","borrow_mut","borrow_mut","default","enabled","flush","flush","from","from","into","into","log","new","read_exact","syscall","syscall","try_from","try_from","try_into","try_into","type_id","type_id","write_all","exit","fsync","mmap","read","sys_exit","sys_fsync","sys_mmap","sys_read","sys_write","write"],"q":[[0,"oak_restricted_kernel_api"],[26,"oak_restricted_kernel_api::syscall"]],"d":["Channel that communicates over a file descriptor.","","","","","","Constructs a new FileDescriptorChannel that assumes we’…","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Invoke system calls based on the Linux calling convention …","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,2,1,1,0,0,1,2,1,2,1,2,1,0,0,0,0,0,0,0,0,0,0],"f":[0,0,[[]],[[]],[[]],[[]],[[],1],[[2,3],4],[1,5],[2],[[]],[[]],[[]],[[]],[[2,6]],[7,1],[[1,[9,[8]]],5],0,0,[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[1,[9,[8]]],5],[7,12],[7,[[10,[13]]]],[[[15,[14]],16,17,18,7,19],[[10,[[9,[8]],13]]]],[[7,[9,[8]]],[[10,[20,13]]]],[19],[19,21],[[14,22,19,19,19,19],16],[[19,14,22],21],[[19,14,22],21],[[7,[9,[8]]],[[10,[20,13]]]]],"c":[],"p":[[3,"FileDescriptorChannel"],[3,"StderrLogger"],[3,"Metadata"],[15,"bool"],[6,"Result"],[3,"Record"],[15,"i32"],[15,"u8"],[15,"slice"],[4,"Result"],[3,"TypeId"],[15,"never"],[4,"Errno"],[4,"c_void"],[4,"Option"],[15,"isize"],[3,"MmapProtection"],[3,"MmapFlags"],[6,"c_int"],[15,"usize"],[6,"c_ssize_t"],[6,"c_size_t"]]},\
"oak_restricted_kernel_interface":{"doc":"","t":"RCRCAANNNNNNELLLLLLLLLLLLLNNSSSNDDSSSNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["DERIVED_KEY_FD","Errno","OAK_CHANNEL_FD","Syscall","errno","syscalls","EBADF","EFAULT","EINVAL","EIO","ENOMEM","ENOSYS","Errno","borrow","borrow_mut","eq","equivalent","fmt","fmt","from","from_repr","into","to_string","try_from","try_into","type_id","Exit","Fsync","MAP_ANONYMOUS","MAP_FIXED","MAP_PRIVATE","Mmap","MmapFlags","MmapProtection","PROT_EXEC","PROT_READ","PROT_WRITE","Read","Syscall","Write","all","all","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","complement","contains","contains","difference","difference","empty","empty","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","not","not","remove","remove","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","toggle","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","union"],"q":[[0,"oak_restricted_kernel_interface"],[6,"oak_restricted_kernel_interface::errno"],[26,"oak_restricted_kernel_interface::syscalls"]],"d":["Predefined file descriptor for reading a derived key.","","Predefined file descriptor for the Oak communication …","","","","Bad file descriptor","Bad address","Invalid argument","Input/output error","Cannot allocate memory","Function not implemented","Possible error values returned by Oak Restricted Kernel …","","","","","","","Returns the argument unchanged.","Try to create Self from the raw representation","Calls <code>U::from(self)</code>.","","","","","Terminates he calling process. Arguments:","Flush a file descriptor. Arguments:","The mapping is not backed by any file; contents are …","Don’t interpret addr as a hint, but require mapping at …","Private copy-on-write mapping.","Creates a mapping for memory. Arguments:","","","Pages may be executed.","Pages may be read.","","Read from a file descriptor.","System calls implemented by Oak Restricted Kernel.","Write to a file descriptor.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Try to create Self from the raw representation","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Removes the specified flags in-place.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,12,12,12,15,0,0,11,11,11,15,0,15,11,12,11,12,11,12,11,12,11,12,11,11,12,12,11,12,11,12,15,11,12,15,11,12,11,12,11,12,11,12,11,12,11,12,15,11,11,11,11,12,12,12,12,12,15,11,12,11,12,11,11,12,12,11,12,11,12,11,12,15,11,12,11,12,11,12,15,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,15,11,12,15,11,12,15,11,12,11,12],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[1,1],2],[[],2],[[1,3],[[5,[4]]]],[[1,3],6],[[]],[7,[[8,[1]]]],[[]],[[],9],[[],5],[[],5],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[[],12],[[11,11],11],[[12,12],12],[[11,11]],[[12,12]],[[11,11],11],[[12,12],12],[[11,11]],[[12,12]],[11,13],[11,13],[12,13],[12,13],[[11,11],11],[[12,12],12],[[11,11]],[[12,12]],[[]],[[]],[[]],[[]],[[]],[[]],[11,11],[12,12],[[11,11],2],[[12,12],2],[[11,11],11],[[12,12],12],[[],11],[[],12],[[11,14]],[[12,14]],[[15,3],6],[[11,3],6],[[11,3],6],[[11,3],6],[[11,3],6],[[12,3],6],[[12,3],6],[[12,3],6],[[12,3],6],[[12,3],6],[[]],[[]],[[]],[13,[[8,[11]]]],[13,[[8,[12]]]],[13,11],[13,11],[13,12],[13,12],[13,11],[13,12],[14,11],[14,12],[16,[[8,[11]]]],[16,[[8,[12]]]],[17,[[8,[15]]]],[[11,11]],[[12,12]],[[11,11],11],[[12,12],12],[[11,11],2],[[12,12],2],[[]],[[]],[[]],[11],[12],[11,2],[12,2],[11,2],[12,2],[11,[[18,[11]]]],[12,[[18,[12]]]],[11,[[19,[11]]]],[12,[[19,[12]]]],[11,11],[12,12],[[11,11]],[[12,12]],[[11,11,2]],[[12,12,2]],[[11,11],11],[[12,12],12],[[11,11]],[[12,12]],[[11,11],11],[[12,12],12],[[11,11]],[[12,12]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],10],[[],10],[[],10],[[11,11],11],[[12,12],12]],"c":[],"p":[[4,"Errno"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[15,"isize"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"MmapProtection"],[3,"MmapFlags"],[15,"i32"],[8,"IntoIterator"],[4,"Syscall"],[15,"str"],[15,"usize"],[3,"Iter"],[3,"IterNames"]]},\
"oak_sev_guest":{"doc":"Rust wrappers for instructions and structs for use by …","t":"IAAAAAAAAOAARRDDDDLLLLLLLLMMMMMMMMLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLMMDLLLLLLLLLLLSSRRDDSSSSSSSSDSSLLLLLLLLLLLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLMLLMMMMLLLLLLLLLLLLMMMMNNNNENDDDDDERRRNNSNENDDNNSRSSDDDDSNNNNNNNNNDNDNEDERSSIENNDDSNNENEDSSSENNSSDNNNNNNNNNMMMLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMMMLLLLLLMMMMMMLLLMLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMMMMMMLLLLLLLLLLLLLMMMMMLLLMMMMMMMMMMLLLLLMMLLMMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMSSNNNENNNEDSDNNENESNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFLFFLLLLMLLLLLLLLLLLLLLLLLLLLLLLLFMDLLMLLLOMMMMMMMMMMLLLNNDDIEIEINNDGLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLKLLLLKLLLLLLLLLSSNEDDSNNNNNDNNNDDNNRSEDDNSSSSEDDSSSSSSRDDDENNDDEDSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLMMMFLLFLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMNNERRRDLLLLMLLLLLLMMMMLLLLLLMLLLMMMMMMDRRDDMMLLLLLLMMMFMMMMMMMMLLLMMMMMMMMMMMMMMLLLMMMLLLMMMMMMMMMMMMMMMMMMMMMLLLMMMMMMMMMMLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLMLLLMMMMMMMMMMMMMMM","n":["Translator","cpuid","crypto","ghcb","guest","instructions","interrupts","io","msr","mutable_interrupt_handler_with_error_code","secrets","vmsa","CPUID_COUNT_MAX","CPUID_PAGE_SIZE","CpuidFunction","CpuidInput","CpuidOutput","CpuidPage","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","cpuid_data","eax","eax","ebx","ecx","ecx","edx","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","input","into","into","into","into","output","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","validate","xcr0","xss","GuestMessageEncryptor","borrow","borrow_mut","decrypt_message","encrypt_message","from","into","new","new_with_sequence_number","try_from","try_into","type_id","CPL","DR7","GHCB_PAGE_SIZE","GHCB_PROTOCOL_VERSION","Ghcb","GhcbProtocol","RAX","RBX","RCX","RDX","SW_EXIT_CODE","SW_EXIT_INFO_1","SW_EXIT_INFO_2","SW_SCRATCH","ValidBitmap","XCR0","XSS","all","as_mut","as_mut","as_ref","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","contains","cpl","default","default","difference","do_guest_message_request","dr7","empty","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get_cpuid","get_gpa","ghcb_usage","insert","intersection","intersects","into","into","into","into_iter","io_read_u16","io_read_u32","io_read_u8","io_write_u16","io_write_u32","io_write_u8","is_all","is_empty","iter","iter_names","msr_read","msr_write","new","new","not","protocol_version","rax","rbx","rcx","rdx","register_with_hypervisor","remove","reset","reset","set","shared_buffer","sub","sub_assign","sw_exit_code","sw_exit_info_1","sw_exit_info_2","sw_scratch","symmetric_difference","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","valid_bitmap","x87_state_gpa","xcr0","xss","AbsorbNomaRequest","AbsorbNomaResponse","AbsorbRequest","AbsorbResponse","AeadAlgorithm","Aes256Gcm","AttestationReport","AttestationReportData","AttestationRequest","AttestationResponse","AuthenticatedHeader","AuthorKey","CURRENT_ATTESTATION_VERSION","CURRENT_HEADER_VERSION","CURRENT_MESSAGE_VERSION","CpuidRequest","CpuidResponse","DEBUG","Default","EccCurve","EcdsaP384Sha384","EcdsaPublicKey","EcdsaSignature","ExportRequest","ExportResponse","FAMILY_ID","GUEST_MESSAGE_SIZE","GUEST_POLICY","GUEST_SVN","GuestFieldFlags","GuestMessage","GuestMessageHeader","GuestPolicy","IMAGE_ID","ImportRequest","ImportResponse","Invalid","Invalid","Invalid","Invalid","InvalidKeySelection","InvalidParams","InvalidParams","KeyRequest","KeyRequest","KeyResponse","KeyResponse","KeySelect","KeySelectIter","KeyStatus","MAX_PAYLOAD_SIZE","MEASUREMENT","MIGRATE_MA","Message","MessageType","No","P384","PlatformInfo","PolicyFlags","RESERVED","ReportRequest","ReportResponse","ReportStatus","Reserved","RootKeySelect","RootKeySelectIter","SINGLE_SOCKET","SMT","SMT_EN","SigningAlgorithm","Success","Success","TCB_VERSION","TSME_EN","TcbVersion","TccInfoReqsponse","TscInfoRequest","VCEK","VCEK","VLEK","VMRK","VmrkRequest","VmrkResponse","Yes","abi_major","abi_minor","algorithm","all","all","all","auth_header","auth_tag","author_key_digest","author_key_en","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bits","bits","bits","bits","bits","bits","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","boot_loader","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chip_id","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","committed_build","committed_major","committed_minor","committed_tcb","complement","complement","complement","contains","contains","contains","current_build","current_major","current_minor","current_tcb","curve","data","default","default","default","derived_key","difference","difference","difference","empty","empty","empty","eq","eq","eq","eq","extend","extend","extend","family_id","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_iter","from_name","from_name","from_name","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","from_repr","get_algorithm","get_author_key_en","get_flags","get_guest_field_select_flags","get_key_select","get_message_type","get_message_type","get_message_type","get_message_type","get_message_type","get_message_type","get_platform_info","get_root_key_select","get_signature_algo","get_status","get_status","guest_field_select","guest_svn","guest_svn","header","header_size","header_version","host_data","id_key_digest","image_id","insert","insert","insert","intersection","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","iter","iter","iter","iter_names","iter_names","iter_names","launch_tcb","len","len","measurement","message_size","message_type","message_version","message_vmpck","microcode","new","new","new","new","next","next","next_back","next_back","not","not","not","nth","nth","payload","platform_info","policy","r","r","remove","remove","remove","report","report_data","report_data","report_id","report_id_ma","report_size","reported_tcb","s","s","sequence_number","set","set","set","set_key_select","set_root_key_select","signature","signature_algo","size_hint","size_hint","snp","status","status","sub","sub","sub","sub_assign","sub_assign","sub_assign","symmetric_difference","symmetric_difference","symmetric_difference","tcb_version","tee","to_owned","to_owned","to_owned","to_owned","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","union","validate","validate","validate","validate","validate","validate","validate","validate","validate_format","version","vmpl","vmpl","vmpl","EXECUTE_SUPERVISOR","EXECUTE_USER","FailInput","FailPermission","FailSizeMismatch","InstructionError","No","Page2MiB","Page4KiB","PageSize","PermissionMask","READ","RmpPermission","Unvalidated","Validated","Validation","ValidationStatusNotUpdated","Vmsa","WRITE","Yes","all","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","complement","contains","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","from_repr","from_repr","from_repr","insert","intersection","intersects","into","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","not","perm_mask","pvalidate","remove","rmpadjust","rmpquery","set","sub","sub_assign","symmetric_difference","target_vmpl","to_owned","to_owned","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","vmgexit","vmsa","MutableInterruptStackFrame","borrow","borrow_mut","cs","fmt","from","into","mutable_interrupt_handler_with_error_code","rax","rbx","rcx","rdi","rdx","rflags","rip","rsi","rsp","ss","try_from","try_into","type_id","Ghcb","Ghcb","GhcbIoFactory","GhcbIoPort","IoPortFactory","PortFactoryWrapper","PortReader","PortWrapper","PortWriter","Raw","Raw","RawIoPortFactory","StaticGhcbIoPort","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","new","new_ghcb","new_raw","new_reader","new_reader","new_reader","new_reader","new_writer","new_writer","new_writer","new_writer","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_read","try_read","try_read","try_read","try_read","try_write","try_write","try_write","try_write","try_write","type_id","type_id","type_id","type_id","type_id","ALTERNATE_INJECTION_ENABLED","AP_CREATION","AddressNotAligned","CpuidRegister","CpuidRequest","CpuidResponse","DEBUG_SWAP_ENABLED","Eax","Ebx","Ecx","Edx","General","GhcbGpa","GhcbLocationNotAccepted","GhcbProtocolVersion","GhcbResponseLocationNotMatchingRequest","HypervisorFeatureSupportRequest","HypervisorFeatureSupportResponse","InvalidResponse","InvalidValue","NO_PREFERRED_GHCB_LOCATION","PREVENT_HOST_IBS_ENABLED","PageAssignment","PreferredGhcbGpaRequest","PreferredGhcbGpaResponse","Private","REFLECT_VC_ENABLED","RESTRICTED_INJECTION","RESTRICTED_INJECTION_ENABLED","RESTRICTED_INJECTION_TIMER","RegisterGhcbGpaError","RegisterGhcbGpaRequest","RegisterGhcbGpaResponse","SECURE_TSC_ENABLED","SEV_ENABLED","SEV_ES_ENABLED","SEV_SNP","SNP_ACTIVE","SNP_BTB_ISOLATION_ENABLED","SUPPORTED_PROTOCOL_VERSION","SevInfoRequest","SevInfoResponse","SevStatus","SevStatusError","Shared","SnpFeatureNotSupported","SnpPageStateChangeRequest","SnpPageStateChangeResponse","TerminationReason","TerminationRequest","VMSA_REG_PROT_ENABLED","VTOM_ENABLED","all","all","as_error_source","as_error_source","backtrace","backtrace","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cause","change_snp_page_state","change_snp_state_for_frame","clone","clone","clone","clone_into","clone_into","clone_into","complement","complement","contains","contains","default","default","description","description","difference","difference","empty","empty","encryption_bit","eq","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","from_repr","from_repr","get_cpuid","get_cpuid_for_vc_exception","get_hypervisor_feature_support","get_preferred_ghcb_location","get_sev_info","get_sev_status","ghcb_gpa","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","leaf","max_protocol_version","min_protocol_version","new","new","new","not","not","reason","register","register","register_ghcb_location","remove","remove","request_termination","set","set","set_ghcb_address_and_exit","source","source","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","value","response_ghcb_gpa","Disabled","Enabled","Imi","SECRETS_PAGE_MAX_VERSION","SECRETS_PAGE_MIN_VERSION","SECRETS_PAGE_SIZE","SecretsPage","borrow","borrow","borrow_mut","borrow_mut","fms","fmt","fmt","from","from","from_repr","get_imi_en","gosv","guest_area_0","guest_area_1","imi_en","into","into","try_from","try_from","try_into","try_into","tsc_factor","type_id","type_id","validate","version","vmpck_0","vmpck_1","vmpck_2","vmpck_3","vmsa_tweak_bitmap","SegmentRegister","VMSA_PAGE_SIZE","VMSA_SIZE","Vmsa","VmsaPage","attributes","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bp_ibs_tgt_rip","br_from","br_to","calculate_rdx_from_fms","cpl","cr0","cr2","cr3","cr4","cs","cstar","dbgctl","default","default","default","dr0","dr0_addr_mask","dr1","dr1_addr_mask","dr2","dr2_addr_mask","dr3","dr3_addr_mask","dr6","dr7","ds","efer","es","event_inj","fmt","fmt","fmt","fpreg_x87","fpreg_xmm","fpreg_ymm","from","from","from","fs","g_pat","gdtr","gs","guest_exit_code","guest_exit_info_1","guest_exit_info_2","guest_exit_int_info","guest_nrip","guest_tsc_offset","guest_tsc_scale","ibs_dc_lin_addr","ibs_fetch_ctl","ibs_fetch_lin_addr","ibs_op_ctl","ibs_op_data","ibs_op_data2","ibs_op_data3","ibs_op_rop","ic_ibs_extd_ctl","idtr","into","into","into","isst_addr","kernel_gs_base","last_excp_from","last_excp_to","lbr_select","lbr_stack_state","ldtr","limit","lstar","mxcsr","new","new_vcpu_boot","pcpu_id","pkru","pl0_ssp","pl1_ssp","pl2_ssp","pl3_ssp","r10","r11","r12","r13","r14","r15","r8","r9","rax","rbp","rbx","rcx","rdi","rdx","reg_prot_nonce","rflags","rip","rsi","rsp","s_cet","selector","sev_features","sfmask","ss","ssp","star","sysenter_cs","sysenter_eip","sysenter_esp","tlb_id","tr","try_from","try_from","try_from","try_into","try_into","try_into","tsc_aux","type_id","type_id","type_id","u_cet","vintr_ctrl","virtual_tom","vmpl","vmsa","x87_cs","x87_dp","x87_ds","x87_fcw","x87_fop","x87_fsw","x87_ftw","x87_rip","xcr0","xss"],"q":[[0,"oak_sev_guest"],[12,"oak_sev_guest::cpuid"],[66,"oak_sev_guest::crypto"],[78,"oak_sev_guest::ghcb"],[197,"oak_sev_guest::guest"],[749,"oak_sev_guest::instructions"],[883,"oak_sev_guest::interrupts"],[904,"oak_sev_guest::io"],[973,"oak_sev_guest::msr"],[1312,"oak_sev_guest::msr::RegisterGhcbGpaError"],[1313,"oak_sev_guest::secrets"],[1351,"oak_sev_guest::vmsa"]],"d":["Memory address translation functions.","This module contains structs that can be used to interpret …","This module provides an optional implementation for …","This module contains an implementation of the …","Utilities for creating and processing SNP Guest Request …","Rust instruction wrappers for managing page state and …","Utilities for building interrupt handlers that need to …","","Rust implementations of the AMD SEV-SNP GHCB MSR protocol.","","This module contains structs that can be used to interpret …","This module provides an implementation of the State Save …","The maximum number of CPUID functions that can be included …","The size of the CPUID page.","The CPUID function result of an invocation for a specific …","The required input valus for invoking CPUID.","The resulting register values after invoking CPUID.","Representation of the CPUID page.","","","","","","","","","The number of CPUID function results included in the page. …","The CPUID function results.","The input value of the EAX register, which represents the …","The EAX register output from calling CPUID.","The EBX register output from calling CPUID.","The input value of the ECX register, which represents the …","The ECX register output from calling CPUID.","The EDX register output from calling CPUID.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","The input values when CPUID was invoked.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The resulting register values when CPUID was invoked.","","","","","","","","","","","","","Checks that the count is less than the maximum allowed …","The input value of the XCR0 extended control register.","The value of the IA32_XSS model-specific register.","Wrapper for encrypting and decrypting guest messages.","","","Extracts a decrypted message from an encrypted <code>GuestMessage</code>…","Creates an encrypted payload from the provided message and …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance.","Creates a new instance with a specific sequence number.","","","","","","The size of the GHCB page.","The version of the GHCB protocol and page layout that we …","The guest-host communications block.","Implementation of the GHCB protocol using the wrapped GHCB …","","","","","","","","","Flags indicating which fields in a specific GHCB instance …","","","Returns the set containing all flags.","","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","The current privilege level of the executing code.","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Sends a guest request message to the Platform Secure …","The value of the DR7 debug register.","Returns an empty set of flags.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","Get the value for a flag from its stringified name.","Calls a CPUID function for the given input using the GHCB …","Gets the guest-physical address for the guest-hypervisor …","The usage of the GHCB page. A value of 0 indicates the …","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Read a 16 bit number from an IO port via the IOIO protocol.","Read a 32 bit number from an IO port via the IOIO protocol.","Read an 8 bit number from an IO port via the IOIO protocol.","Writes a 16 bit number to an IO port via the IOIO protocol.","Writes a 32 bit number to an IO port via the IOIO protocol.","Writes an 8 bit number to an IO port via the IOIO protocol.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Reads a value from the specified model-specific register.","Writes a value to the specified model-specific register.","","","Returns the complement of this set of flags.","The version of the GHCB protocol and page layout in use.","The value of the RAX register.","The value of the RBX register.","The value of the RCX register.","The value of the RDX register.","Registers the address of the GHCB with the hypervisor.","Removes the specified flags in-place.","Resets all of the inner GHCB information to its original …","Zeroes the entire GHCB.","Inserts or removes the specified flags depending on the …","Area that can be used as a shared buffer for communicating …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Guest-controlled exit code.","Guest-controlled exit information 1.","Guest-controlled exit information 2.","Guest-controlled additional information.","Returns the symmetric difference between the flags in <code>self</code> …","Toggles the specified flags in-place.","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Bitmap indicating which quadwords of the save state area …","The guest-physical address of the page that contains the …","Value of the XCR0 extended control register.","The value of the IA32_XSS model-specific reqister.","","","VM absorb request by a migration agent.","VM absorb response.","The AEAD algorithm used for encryption.","256-bit AES-GCM.","A signed attestation report.","The data contained in an attestation report.","Request for an attestation report.","Response containing the attestation report.","The authenticated subsection of the header used for an …","Whether the author key digest is included in the report.","The currently supported attestation report version number.","The currently supported header version number.","The currently supported message version number.","CPUID request.","CPUID response.","Debugging the guest is allowed.","Use VLEK if installed, otherwise use the VCEK.","The elliptic curve used.","ECDSA using curve P-384 with SHA-384.","An ECDSA public key.","An ECDSA signature.","VM export request. Used for VM migration.","VM export response. Used for VM migration.","The family ID provided in the ID block will be mixed into …","The size of a guest message, including the header and …","The guest policy will be mixed into the key.","The guest-provided SVN will be mixed into the key.","Flags indicating allowed policy options.","An encrypted guest message.","The header for an encrypted guest request message.","The required policy for a guest to run.","The image ID provided in the ID block will be mixed into …","VM import request. Used during VM migration, typically by …","VM import response. Used during VM migration.","Invalid encryption algorithm.","Invalid message type.","Invalid.","Invalid.","The key selection field was invalid.","The supplied parameters in the request was invalid.","The supplied parameters in the request was invalid.","Request for a derived key.","Request for a derived key.","Response containing the derived key.","Derived key response.","The selected key to use for key derivation.","An iterator over the variants of Self","The status of the report response.","The maximum payload size.","The launch measurement of the VM will be mixed into the …","The guest can be associated with a migration agent.","","The type of message represented by the payload.","The author key digest is not present.","Curve P-384.","Information on the platform configuration.","Flags indicating allowed policy options.","Reserved, must always be 1.","Attestation report request.","Attestation report response.","The status of the report response.","Reserved.","The selected root key to use for key derivation.","An iterator over the variants of Self","The guest can only be activated on a single socket.","Simulatneous multi-threading (SMT) is allowed.","Indicates that simulatneous multi-threading (SMT) is …","The signing algorithm used for the report signature.","Report was successfully generated.","Report was successfully generated.","The guest-provided TCB version will be mixed into the key.","Indicates that transparent secure memory encryption (TSME) …","The version of all the components in the Trusted Computing …","Timestamp counter information response.","","Use the Versioned Chip Endorsement Key (VCEK).","Use the Versioned Chip Endorsement Key (VCEK).","Use the Loaded Chip Endorsement Key (VLEK).","Use the Virtual Machine Root Key (VMRK) provided by the …","VMRK request. Provides the VM root key to use after …","VMRK response. Status of using the VM root key after …","The author key digest is present.","The minimum ABI major version required to launch the guest.","The minimum ABI minor version required to launch the guest.","The algorithm used to encrypt the payload.","Returns the set containing all flags.","Returns the set containing all flags.","Returns the set containing all flags.","The the sub-section of the header that is treated as …","The authentication tag for the payload and additional data.","The SHA-384 digest of the author public key used to …","The least significant bit indicates Whether the digest of …","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the raw value of the flags currently stored.","","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","Toggles the set of flags.","The current security version number (SVN) of the secure …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Identifier unique to the chip, unless the ID has been …","","","","","","","","","The build number of the committed secure firmware ABI …","The major number of the committed secure firmware ABI …","The minor number of the committed secure firmware ABI …","The committed TCB version.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","The build number of the current secure firmware ABI …","The major number of the current secure firmware ABI …","The minor number of the current secure firmware ABI …","The current version of each of the components in the …","The curve for this public key.","The data contained in the report.","","","","The derived key if status is <code>KeyStatus::Success</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","Returns an empty set of flags.","","","","","","","","The family ID provided at launch.","The allowed settings for the guest.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, preserving all …","","","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the algorithm field as an <code>AeadAlgorithm</code> enum if …","Gets the author key enabled field as an <code>AuthorKey</code> enum if …","Gets the flags field as a <code>PolicyFlags</code> representation if …","Gets the <code>guest_field_select</code> field as a <code>GuestFieldFlags</code> …","Gets bits 1 and 2 of the <code>key_select</code> field as a <code>KeySelect</code> …","","Gets the message type field as a <code>MessageType</code> enum if …","","","","","Gets the platform info field as a <code>PlatformInfo</code> …","Gets bit 0 of the <code>key_select</code> field as a <code>RootKeySelect</code> enum.","Gets the signing algorithm field as a <code>SigningAlgorithm</code> …","Gets the status field as a <code>KeyStatus</code> enum if possible.","Gets the status field as a <code>ReportStatus</code> enum if possible.","Mask indicating which guest data will be mixed into the …","The guest security version number (SVN) to mix into the …","The guest security version number.","The message header.","The size of the header in bytes.","The header version. Currently only version 1 is supported.","Custom data provided by the hypervisor at launch.","The SHA-384 digest of the ID public key used to sign the …","The image ID provided at launch.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","","","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","The value of the current TCB version when the guest was …","","","The measurement of the VM memory calculated at launch.","The size of the encrypted message payload in bytes.","The type of message that the payload represents.","The version of the message. Currently only version 1 is …","The ID of the VM communication key that was used to …","The lowest current patch level of all the CPU cores.","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","","The encrypted payload.","Information about the platform.","The policy required by the guest VM to be launched.","The R component of this signature. The value is …","The R component of this public. The value is zero-extended …","Removes the specified flags in-place.","Removes the specified flags in-place.","Removes the specified flags in-place.","The attestation report.","The custom data to be included in the attestation report.","The custom data provided in the attestation request.","The report ID of this guest.","The report ID of this guest’s migration agent.","The size of the report.","The reported TCB version that was used to generate the …","The S component of this signature. The value is …","The S component of this public key. The value is …","The message sequence number. This is used as the IV for …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets bits 1 and 2 of the <code>key_select</code> field.","Sets bit 0 of the <code>key_select</code> field.","The signature over the data.","The algorithm used to sign the report.","","","The current SVN of the SNP firmware.","The status of the operation.","The status of the operation.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","The TCB version to mix into the key.","The current SVN of the PSP operating system.","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Checks that header is valid.","Checks that the authenticated header subsection is valid.","Checks that all reserved bytes are zero and that the …","Checks that all reserved bytes are zero and that the …","Checks that the report data is valid and the signature has …","Checks that fields with specific expected values or ranges …","Checks that the flags are valid and the reserved bytes are …","Checks that the reserved bytes are all zero.","Checks that the reserved bytes are all zero.","The version of the attestation report format.","The VM Protection Level (VMPL) to mix into the derived key.","The VM Protection Level (VMPL) to be used in the …","The VMPL value that was passed in the request.","Code in the page can be executed in rings 0..2.","Code in the page can be executed in ring 3.","The input parameters were invalid.","Insufficient permissions.","The page size does not match the page size entry in the …","The potential errors when calling the PVALIDATE or …","The page cannot be used as a VM save area.","The page is a 2MiB page.","The page is a 4KiB page.","The size of a memory page.","Permission mask used by the RMP.","The target VMPL can read the page.","Representation of the RMP permission used by the RMPADJUST …","The page is not validated.","The page is validated.","Whether a page is in the validated state or not.","The page validation status was not updated. This value is …","Whether the page can be used as a VM save area.","The target VMPL can write to the page.","The page can be used as a VM save area.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","Get the value for a flag from its stringified name.","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Try to create Self from the raw representation","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Returns the complement of this set of flags.","The bit mask specifying the permission.","Marks a page as validated or unvalidated in the RMP.","Removes the specified flags in-place.","Adjusts the permissions of a page in the RMP.","Reads an RMP permission mask for a guest page.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","The target VMPL to which the permission applies.","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Unconditionally exits from the guest to the hypervisor.","Whether this page can be used as a VM save area.","A reference to the interrupt stack frame will be passed as …","","","The backed-up value of the code segment selector.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","The backed-up value of the RAX register.","The backed-up value of the RBX register.","The backed-up value of the RCX register.","The backed-up value of the RDI register.","The backed-up value of the RDX register.","The backed-up value CPU’s flags register.","The backed-up value of the instruction pointer when the …","The backed-up value of the RSI register.","The backed-up value of the stack pointer.","The backed-up value of the stack segment.","","","","","","A factory for creating port readers and writers that use …","GHCB-based wrapper for a single IO port.","Factory for instantiating IO port readers and writers.","Wrapper implementation that can either create IO ports …","Reader that can be used to read values from a port.","","Writer that can be used to write values to a port.","","","Factory for creating port reader and writers that perform …","An IO port reader and writer implementation that uses the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a new IO port reader instance.","","","","Creates a new IO port writer instance.","","","","","","","","","","","","","","Tries to read from the port.","","","","","Tries to write a value to the port.","","","","","","","","","","Alternate injection is enabled for this guest.","The new AMD SEV-SNP feature for starting new Application …","GHCB must be 4KiB-aligned.","The register of interest from the result of executing …","A request to execute CPUID for a specific leaf and return …","A response from executing CPUID for a specific leaf. Only …","Debug Register Swapping is enabled for this guest.","","","","","Non-specific termination request.","Contains the guest-physical address of the GHCB page. The …","","The supported range for the GHCB protocol version does not …","","A request for the hypervisor’s supported features.","Flags indicating which features are supported by the …","","","Value indicating that the hypervisor does not have a …","The Prevent Host IBS feature is enabled for this guest.","Whether a memory page is private to the guest, or shared …","A request for the hypervisor’s preferred location for …","The response containing the preferred location of the GHCB.","","Reflect-VC is enabled for this guest.","Restricted interrrupt injection is supported.","Restricted Injection is enabled for this guest.","Timer support is available if restricted interrupt …","","Request to register a guest-physical address for the GHCB …","The response containing the result of the GHCB …","Secure Timestamp Counter is enabled for this guest.","SEV is enabled for this guest.","SEV-ES is enabled for this guest.","AMD SEV-SNP is supported.","SEV-SNP is active for this guest.","SNP Branch Target Buffer Isolation is enabled for this …","The version of the GHCB MSR protocol supported by this …","A request for information about the supported GHCB MSR …","Response from the hypervisor about the encryption bit and …","Flags indicating which SEV features are active.","","","The SEV-SNP features supported by the hypervisor is not …","Request to change a memory page from shared to private or …","The response containing the result of the SNP Page State …","The reason for requesting termination from the hypervisor.","Request for the hypervisor to terminate the guest.","VMSA Register Protection is enabled for this guest.","Virtual Top-of-Memory is enabled for this guest.","Returns the set containing all flags.","Returns the set containing all flags.","","","","","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Requests a change of state for a page to be either private …","Changes the SNP page state assignments in the RMP for a …","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","The page table bit used for inidicating that a page is …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the value of the specified register that was returned …","Gets the CPUID values for EAX, EBX, ECX and EDX and …","Requests a bitmap specifying the features supported by the …","Requests the hypervisor’s preferred location for the …","Gets information about the supported GHCB MSR protocol …","Gets the status of SEV features for the current guest.","The preferred guest-physical address for the GHCB.","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","The CPUID leaf to request. Sub-leafs are not supported by …","The maximum version of the GHCB MSR protocol supported by …","The minimum version of the GHCB MSR protocol supported by …","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","","The register to return from the result. This protocol only …","The register that the value represents.","Registers the location of the GHCB page for the current …","Removes the specified flags in-place.","Removes the specified flags in-place.","Requests termination from the hypervisor.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Sets the address of the GHCB page before exiting to the …","","","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","The value of the requested register after executing CPUID.","","The initial migration image is not enabled.","The initial migration image is enabled.","Whether an initial migration image is enabled.","The mmaximum version of the secrets pages that we expect …","The minimum version of the secrets pages that we expect to …","The size of the secrets page.","Representation of the secrets page.","","","","","The family, model and stepping of the CPU as reported in …","","","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Gets the IMI enabled field as and <code>Imi</code> enum if possible.","Guest-OS-visible workarounds provided by the hypervisor …","Area reserved for guest OS use.","Area reserved for guest OS use.","The least significant bit indicates whether an initial …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Scaling factor that can be used for calculating the real …","","","Checks that version is the expected value, …","The version of the secrets page.","VM-platform communication key 0. AES key used for …","VM-platform communication key 1. AES key used for …","VM-platform communication key 2. AES key used for …","VM-platform communication key 3. AES key used for …","Bitmap indicating which quadwords of the VM Save Area have …","Representation of a segment register in 64-bit mode.","","","The State Save Area used for SEV-ES and SEV-SNP.","The page containing the Save State Area used for SEV-ES …","The segment attributes. The meaning of the attribute bits …","The base address of the segment.","","","","","","","The value of the guest’s IbsBrTarget MSR.","The value of the guest’s LastBranchFromIP MSR.","The value of the guest’s LastBranchToIP MSR.","When the CPU is reset, the value of RDX is set to the same …","The current protection level (ring).","Control Register 0.","The CR2 control register.","Control Register 3.","Control Register 4.","The code segment.","The target instruction pointer when making a syscall in …","The value of the guest’s DebugCTL MSR.","","","","Debug register 0.","Debug register 0 address mask.","Debug register 1.","Debug register 1 address mask.","Debug register 2.","Debug register 2 address mask.","Debug register 3.","Debug register 3 address mask.","Debug register 6.","Debug register 7.","The data segment.","The extended feature enable register.","The extra segment.","Field used for injecting events into the guest.","","","","The X87 register state.","The XMM register state.","The YMM register state.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","General purpose segment.","The page attribute table for the guest.","Pointer to the global descriptor table.","General purpose segment.","The exit code for automatic exits.","The info 1 value for automatic exits.","The info 2 value for automatic exits.","The interrupt info value for automatic exits.","The next instruction pointer for automatic exits.","The guests time stamp counter offset.","The guest’s time stamp counter scaling factor.","The value of the guest’s IbsDcLinAd MSR.","The value of the guest’s IbsFetchCtl MSR.","The value of the guest’s IbsFetchCtl MSR.","The value of the guest’s IbsOfCtl MSR.","The value of the guest’s IbsOpData1 MSR.","The value of the guest’s IbsOpData2 MSR.","The value of the guest’s IbsOpData3 MSR.","The value of the guest’s IbsOpRip MSR.","The value of the guest’s IbsFetchExtdCtl MSR.","Pointer to the interrupt descriptor table.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The address of the interrupt shadow stack.","Register used by the SWAPGS instruction to swap the base …","The value of the guest’s LastIntFromIP MSR.","The value of the guest’s LastIntToIP MSR.","The value of the guest’s LastBranchStackSelect MSR.","The last branch record stack state.","Pointer to the local descriptor table.","The segment limit.","The target instruction pointer when making a syscall in …","The Media eXtensions Control and Status Register.","","Creates a new instance of the VMSA that represents the …","Used to control flushing of the guest TLB. Writing 0 to …","The protect keys rights register.","Shadow stack pointer for ring 0.","Shadow stack pointer for ring 1.","Shadow stack pointer for ring 2.","Shadow stack pointer for ring 3.","The R10 register.","The R11 register.","The R12 register.","The R13 register.","The R14 register.","The R14 register.","The R8 register.","The R9 register.","The RAX register.","The RBP register.","The RBX register.","The RCX register.","The RDI register.","The RDX register.","Nonce used when VMSA register protection is enabled.","The 64-bit flags register.","The instruction pointer.","The RSI register.","The stack pointer.","Shadow stack MSR for supervisor mode settings.","The segment selector.","The guest-controlled SEV features that are selected.","The syscall flag mask.","The stack segment.","The shadow stack pointer.","The target address, code segment and stack segment when …","The code segment when using SYSENTER or SYSEXIT in legacy …","The instruction pointer when using SYSENTER or SYSEXIT in …","The stack pointer when using SYSENTER or SYSEXIT in legacy …","Used by the hardware to track TLB information for the …","Pointer to a valid task state secgement in the global …","","","","","","","Additional information read by the RDTSC instruction.","","","","Shadow stack MSR for user mode settings.","The guest-controlled interrupt injection control settings.","The virtual top-of-memory setting for the guest.","The current VM protection level.","","The X87 floating point code segment.","The X87 floating point data pointer.","The X87 floating point data segment.","The X87 floating point control word.","The X87 floating point opcode.","The X87 floating point status word.","The X87 floating point tag word.","The X87 instruction pointer.","The XCR0 extended control register.","The IA32_XSS machine-specific register."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,6,7,3,1,6,7,7,7,1,6,6,1,6,6,1,1,3,1,6,7,3,1,1,6,7,3,3,1,6,7,3,3,1,6,7,3,1,6,7,3,1,6,7,7,1,1,0,12,12,12,12,12,12,12,12,12,12,12,20,20,0,0,0,0,20,20,20,20,20,20,20,20,0,20,20,20,25,21,25,21,20,20,20,20,20,20,20,20,25,21,20,25,21,20,20,20,21,21,20,20,25,21,20,20,21,20,20,20,20,20,25,21,20,20,20,20,20,20,20,25,25,21,20,20,20,25,21,20,20,25,25,25,25,25,25,20,20,20,20,25,25,25,21,20,21,21,21,21,21,25,20,25,21,20,21,20,20,21,21,21,21,20,20,25,21,20,25,21,20,25,21,20,20,21,21,21,21,48,48,48,48,0,47,0,0,0,0,0,0,0,0,0,48,48,38,39,0,60,0,0,48,48,36,0,36,36,0,0,0,0,36,48,48,47,48,60,61,43,43,44,0,48,0,48,0,0,0,0,36,38,0,0,57,61,0,0,38,48,48,0,39,0,0,38,38,37,0,43,44,36,37,0,48,48,39,41,39,41,48,48,57,55,55,45,36,37,38,46,46,54,54,36,37,38,36,37,38,36,37,38,36,37,38,36,36,37,37,38,38,36,37,38,36,37,38,56,13,45,46,47,48,49,50,39,40,41,42,43,36,51,52,53,54,37,55,56,38,57,44,58,59,60,61,13,45,46,47,48,49,50,39,40,41,42,43,36,51,52,53,54,37,55,56,38,57,44,58,59,60,61,54,39,40,41,42,39,40,41,42,54,54,54,54,36,37,38,36,37,38,54,54,54,54,59,53,36,37,38,50,36,37,38,36,37,38,39,41,43,44,36,37,38,54,55,13,45,46,47,48,49,50,39,41,43,36,36,36,36,51,52,53,54,37,37,37,37,55,56,38,38,38,38,57,44,58,59,60,61,13,45,46,47,48,49,50,39,40,41,42,43,36,51,52,53,54,37,55,56,38,57,44,58,59,60,61,36,37,38,36,36,37,37,38,38,36,37,38,36,37,38,36,37,38,47,48,39,41,43,57,44,60,61,46,54,55,49,49,16,46,49,50,51,52,54,49,54,50,52,49,49,54,13,45,45,54,54,54,36,37,38,36,37,38,36,37,38,13,45,46,47,48,49,50,39,40,41,42,43,36,51,52,53,54,37,55,56,38,57,44,58,59,60,61,40,42,36,37,38,36,37,38,36,37,38,39,41,36,37,38,36,37,38,54,40,42,54,45,45,45,45,56,13,46,49,51,40,42,40,42,36,37,38,40,42,13,54,54,58,59,36,37,38,52,51,54,54,54,52,54,58,59,46,36,37,38,49,49,53,54,40,42,56,50,52,36,37,38,36,37,38,36,37,38,49,56,39,40,41,42,36,37,38,13,45,46,47,48,49,50,39,40,41,42,43,36,51,52,53,54,37,55,56,38,57,44,58,59,60,61,13,45,46,47,48,49,50,39,40,41,42,43,36,51,52,53,54,37,55,56,38,57,44,58,59,60,61,13,45,46,47,48,49,50,39,40,41,42,43,36,51,52,53,54,37,55,56,38,57,44,58,59,60,61,36,37,38,13,46,50,52,53,54,55,56,58,54,49,51,54,63,63,68,68,68,0,65,67,67,0,0,63,0,64,64,0,68,0,63,65,63,63,63,63,63,63,63,63,63,64,67,68,63,65,66,64,67,68,63,65,66,64,63,65,66,64,63,65,66,63,63,63,63,63,65,66,63,64,67,68,63,63,63,63,63,65,66,64,67,68,63,65,66,63,63,63,63,63,63,64,67,68,65,63,63,63,64,67,68,63,65,66,63,63,63,63,63,63,66,0,63,0,0,63,63,63,63,66,64,63,65,66,63,64,67,68,63,65,66,64,67,68,63,65,66,64,67,68,63,65,66,63,0,66,0,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,73,77,0,0,0,0,0,0,0,73,77,0,0,71,74,75,73,77,71,74,75,73,77,71,74,75,73,77,71,74,75,73,77,71,73,73,105,71,75,73,105,71,75,73,71,74,75,73,77,71,74,75,73,77,106,74,74,74,77,107,74,74,74,77,71,74,75,73,77,79,78,35,0,0,0,79,87,87,87,87,88,0,35,88,35,0,0,35,82,0,79,0,0,0,86,79,78,79,78,0,0,0,79,79,79,78,79,79,0,0,0,0,0,86,88,0,0,0,0,79,79,78,79,35,82,35,82,78,79,78,79,78,79,78,79,78,78,79,79,78,79,78,79,93,92,108,89,90,109,91,94,98,83,99,110,95,87,35,86,78,88,79,82,93,92,108,89,90,109,91,94,98,83,99,110,95,87,35,86,78,88,79,82,35,82,0,0,87,86,79,87,86,79,78,79,78,79,78,79,35,82,78,79,78,79,92,87,86,78,87,86,78,79,87,35,35,86,78,78,78,78,78,88,79,79,79,79,82,82,93,92,108,89,90,109,91,94,98,83,99,110,95,87,35,86,78,88,79,82,78,79,78,78,79,79,78,79,78,79,78,79,87,86,0,0,0,0,0,0,91,78,79,78,79,78,79,93,92,108,89,90,109,91,94,98,83,99,110,95,87,35,86,78,88,79,82,78,79,78,79,78,79,78,79,78,79,89,92,92,93,94,83,78,79,95,89,90,0,78,79,0,78,79,0,35,82,78,79,78,79,78,79,87,86,79,35,82,78,79,93,92,92,108,89,90,90,109,91,91,94,98,98,83,99,99,110,95,87,35,86,78,78,88,79,82,93,92,108,89,90,109,91,94,98,83,99,110,95,87,35,86,78,88,79,82,93,92,108,89,90,109,91,94,98,83,99,110,95,87,35,86,78,88,79,82,78,79,90,111,101,101,0,0,0,0,0,100,101,100,101,100,100,101,100,101,101,100,100,100,100,100,100,101,100,101,100,101,100,100,101,100,100,100,100,100,100,100,0,0,0,0,0,104,104,102,103,104,102,103,104,103,103,103,0,103,103,103,103,103,103,103,103,102,103,104,103,103,103,103,103,103,103,103,103,103,103,103,103,103,102,103,104,103,103,103,102,103,104,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,102,103,104,103,103,103,103,103,103,103,104,103,103,102,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,104,103,103,103,103,103,103,103,103,103,103,102,103,104,102,103,104,103,102,103,104,103,103,103,103,102,103,103,103,103,103,103,103,103,103,103],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[1,1],2],[[],2],[[3,4],5],[[1,4],5],[[6,4],5],[[7,4],5],[[]],[[]],[8,1],[[]],[[]],0,[[]],[[]],[[]],[[]],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[7,[[9,[11]]]],0,0,0,[[]],[[]],[[12,13],[[9,[[0,[14,15,16]],11]]]],[[12,[0,[14,15,16]],13],[[9,[11]]]],[[]],[[]],[[[18,[17]]],[[9,[12,11]]]],[[[18,[17]],19],[[9,[12,11]]]],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],20],[[[25,[[0,[[22,[21]],[23,[21]],24]]]]],[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],[21,21],[[[25,[[0,[[22,[21]],[23,[21]],24]]]]],[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],[21,21],[[20,20],20],[[20,20]],[[20,20],20],[[20,20]],[20,26],[20,26],[[20,20],20],[[20,20]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[[20,20],2],0,[[],21],[[],20],[[20,20],20],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],27,27],[[9,[11]]]],0,[[],20],[[20,28]],[[21,4],5],[[20,4],5],[[20,4],5],[[20,4],5],[[20,4],5],[[20,4],5],[[]],[[]],[[]],[26,[[29,[20]]]],[26,20],[26,20],[26,20],[28,20],[11,[[29,[20]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],1],[[9,[6,11]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]]],27],0,[[20,20]],[[20,20],20],[[20,20],2],[[]],[[]],[[]],[20],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],30],[[9,[30,11]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],30],[[9,[31,11]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],30],[[9,[17,11]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],30,30],[[9,[11]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],30,31],[[9,[11]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],30,17],[[9,[11]]]],[20,2],[20,2],[20,[[32,[20]]]],[20,[[33,[20]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],31],[[9,[19,11]]]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]],31,19],[[9,[11]]]],[[[0,[[22,[21]],[23,[21]],24]],34],[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],[[],21],[20,20],0,0,0,0,0,[[[25,[[0,[[22,[21]],[23,[21]],24]]]]],[[9,[35]]]],[[20,20]],[[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],[21],[[20,20,2]],0,[[20,20],20],[[20,20]],0,0,0,0,[[20,20],20],[[20,20]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[20,20],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],36],[[],37],[[],38],0,0,0,0,[[36,36],36],[[37,37],37],[[38,38],38],[[36,36]],[[37,37]],[[38,38]],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36]],[[37,37]],[[38,38]],[36,19],[36,19],[37,19],[37,19],[38,30],[38,30],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36]],[[37,37]],[[38,38]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[39,39],[40,40],[41,41],[42,42],[[]],[[]],[[]],[[]],0,0,0,0,[36,36],[37,37],[38,38],[[36,36],2],[[37,37],2],[[38,38],2],0,0,0,0,0,0,[[],36],[[],37],[[],38],0,[[36,36],36],[[37,37],37],[[38,38],38],[[],36],[[],37],[[],38],[[39,39],2],[[41,41],2],[[43,43],2],[[44,44],2],[[36,28]],[[37,28]],[[38,28]],0,0,[[13,4],5],[[45,4],5],[[46,4],5],[[47,4],5],[[48,4],5],[[49,4],5],[[50,4],5],[[39,4],5],[[41,4],5],[[43,4],5],[[36,4],5],[[36,4],5],[[36,4],5],[[36,4],5],[[51,4],5],[[52,4],5],[[53,4],5],[[54,4],5],[[37,4],5],[[37,4],5],[[37,4],5],[[37,4],5],[[55,4],5],[[56,4],5],[[38,4],5],[[38,4],5],[[38,4],5],[[38,4],5],[[57,4],5],[[44,4],5],[[58,4],5],[[59,4],5],[[60,4],5],[[61,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[29,[36]]]],[19,[[29,[37]]]],[30,[[29,[38]]]],[19,36],[19,36],[19,37],[19,37],[30,38],[30,38],[19,36],[19,37],[30,38],[28,36],[28,37],[28,38],[11,[[29,[36]]]],[11,[[29,[37]]]],[11,[[29,[38]]]],[17,[[29,[47]]]],[17,[[29,[48]]]],[31,[[29,[39]]]],[31,[[29,[41]]]],[31,[[29,[43]]]],[19,[[29,[57]]]],[31,[[29,[44]]]],[31,[[29,[60]]]],[31,[[29,[61]]]],[46,[[29,[47]]]],[54,[[29,[57]]]],[55,[[29,[38]]]],[49,[[29,[36]]]],[49,39],[[],48],[46,[[29,[48]]]],[[],48],[[],48],[[],48],[[],48],[54,[[29,[37]]]],[49,41],[54,[[29,[60]]]],[50,[[29,[43]]]],[52,[[29,[44]]]],0,0,0,0,0,0,0,0,0,[[36,36]],[[37,37]],[[38,38]],[[36,36],36],[[37,37],37],[[38,38],38],[[36,36],2],[[37,37],2],[[38,38],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[36],[37],[38],[36,2],[37,2],[38,2],[36,2],[37,2],[38,2],[[],40],[[],42],[36,[[32,[36]]]],[37,[[32,[37]]]],[38,[[32,[38]]]],[36,[[33,[36]]]],[37,[[33,[37]]]],[38,[[33,[38]]]],0,[40,62],[42,62],0,0,0,0,0,0,[[],13],[[],46],[[],49],[[],51],[40,29],[42,29],[40,29],[42,29],[36,36],[37,37],[38,38],[[40,62],29],[[42,62],29],0,0,0,0,0,[[36,36]],[[37,37]],[[38,38]],0,0,0,0,0,0,0,0,0,0,[[36,36,2]],[[37,37,2]],[[38,38,2]],[[49,39]],[[49,41]],0,0,[40],[42],0,0,0,[[36,36],36],[[37,37],37],[[38,38],38],[[36,36]],[[37,37]],[[38,38]],[[36,36],36],[[37,37],37],[[38,38],38],0,0,[[]],[[]],[[]],[[]],[[36,36]],[[37,37]],[[38,38]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[36,36],36],[[37,37],37],[[38,38],38],[13,[[9,[11]]]],[46,[[9,[11]]]],[50,[[9,[11]]]],[52,[[9,[11]]]],[53,[[9,[11]]]],[54,[[9,[11]]]],[55,[[9,[11]]]],[56,[[9,[11]]]],[58,[[9,[11]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],63],[[63,63],63],[[63,63]],[[63,63],63],[[63,63]],[63,17],[63,17],[[63,63],63],[[63,63]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,64],[63,63],[65,65],[66,66],[[]],[[]],[[]],[[]],[63,63],[[63,63],2],[[63,63],63],[[],63],[[63,63],2],[[65,65],2],[[66,66],2],[[63,28]],[[64,4],5],[[67,4],5],[[68,4],5],[[63,4],5],[[63,4],5],[[63,4],5],[[63,4],5],[[63,4],5],[[65,4],5],[[66,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[17,[[29,[63]]]],[17,63],[17,63],[17,63],[28,63],[11,[[29,[63]]]],[31,[[29,[64]]]],[31,[[29,[67]]]],[31,[[29,[68]]]],[17,[[29,[65]]]],[[63,63]],[[63,63],63],[[63,63],2],[[]],[[]],[[]],[[]],[[]],[[]],[63],[63,2],[63,2],[63,[[32,[63]]]],[63,[[33,[63]]]],[63,63],0,[[62,67,64],[[9,[68]]]],[[63,63]],[[62,67,66],[[9,[68]]]],[62,[[9,[68]]]],[[63,63,2]],[[63,63],63],[[63,63]],[[63,63],63],0,[[]],[[]],[[]],[[]],[[63,63]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[63,63],63],[[]],0,0,[[]],[[]],0,[[8,4],5],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[70,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]]]]],[[71,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]]]],[[[72,[[25,[21]]]]],73],[[],73],[30],[[[71,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]],30],[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]]]],[[75,30],76],[[73,30],77],[30],[[[71,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]],30],[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]]]],[[75,30],76],[[73,30],77],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],[[9,[11]]]],[[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]]],[[9,[30,11]]]],[[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]]],[[9,[17,11]]]],[[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]]],[[9,[31,11]]]],[77,[[9,[11]]]],[[],[[9,[11]]]],[[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]],17],[[9,[11]]]],[[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]],31],[[9,[11]]]],[[[74,[69,[0,[[22,[[25,[[0,[[22,[21]],[23,[21]],24]]]]]],24]],[0,[[22,[21]],[23,[21]],24]]]],30],[[9,[11]]]],[77,[[9,[11]]]],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],78],[[],79],[[],80],[[],80],[35,[[29,[81]]]],[82,[[29,[81]]]],[[78,78],78],[[79,79],79],[[78,78]],[[79,79]],[[78,78],78],[[79,79],79],[[78,78]],[[79,79]],[78,19],[78,19],[79,19],[79,19],[[78,78],78],[[79,79],79],[[78,78]],[[79,79]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,[[29,[80]]]],[82,[[29,[80]]]],[83,[[9,[11]]]],[[[85,[84]],86],[[9,[11]]]],[87,87],[86,86],[79,79],[[]],[[]],[[]],[78,78],[79,79],[[78,78],2],[[79,79],2],[[],78],[[],79],[35,11],[82,11],[[78,78],78],[[79,79],79],[[],78],[[],79],0,[[87,87],2],[[86,86],2],[[78,78],2],[[],2],[[],2],[[78,28]],[[79,28]],[[87,4],5],[[35,4],5],[[35,4],5],[[86,4],5],[[78,4],5],[[78,4],5],[[78,4],5],[[78,4],5],[[78,4],5],[[88,4],5],[[79,4],5],[[79,4],5],[[79,4],5],[[79,4],5],[[82,4],5],[[82,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[29,[78]]]],[19,[[29,[79]]]],[19,78],[19,78],[19,79],[19,79],[19,78],[19,79],[28,78],[28,79],[11,[[29,[78]]]],[11,[[29,[79]]]],[17,[[29,[87]]]],[17,[[29,[86]]]],[89,[[9,[90,11]]]],[[31,8],[[9,[11]]]],[[],[[9,[78,11]]]],[[],[[9,[91,11]]]],[[],[[9,[92,11]]]],[[],[[9,[79,82]]]],0,[[78,78]],[[79,79]],[[78,78],78],[[79,79],79],[[78,78],2],[[79,79],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[78],[79],[78,2],[79,2],[78,2],[79,2],[78,[[32,[78]]]],[79,[[32,[79]]]],[78,[[33,[78]]]],[79,[[33,[79]]]],0,0,0,[62,[[9,[93,11]]]],[62,[[9,[94,35]]]],[[62,86],[[9,[83,11]]]],[78,78],[79,79],0,0,0,[94,[[9,[35]]]],[[78,78]],[[79,79]],[95,96],[[78,78,2]],[[79,79,2]],[93],[35,[[29,[80]]]],[82,[[29,[80]]]],[[78,78],78],[[79,79],79],[[78,78]],[[79,79]],[[78,78],78],[[79,79],79],[[]],[[]],[[]],[[],97],[[],97],[[78,78]],[[79,79]],[[],9],[[],9],[19,[[9,[92,11]]]],[[],9],[[],9],[[],9],[19,[[9,[90,11]]]],[[],9],[19,[[9,[91,11]]]],[[],9],[[],9],[[],9],[19,[[9,[98]]]],[[],9],[[],9],[19,[[9,[99,11]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[19,[[9,[78,11]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[78,78],78],[[79,79],79],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[100,4],5],[[101,4],5],[[]],[[]],[31,[[29,[101]]]],[100,[[29,[101]]]],0,0,0,0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],[100,[[9,[11]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[17,17,17],19],0,0,0,0,0,0,0,0,[[],102],[[],103],[[],104],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[102,4],5],[[103,4],5],[[104,4],5],0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[103,102],[19,103],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[],10],[[],10],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"CpuidInput"],[15,"bool"],[3,"CpuidFunction"],[3,"Formatter"],[6,"Result"],[3,"CpuidOutput"],[3,"CpuidPage"],[3,"MutableInterruptStackFrame"],[4,"Result"],[3,"TypeId"],[15,"str"],[3,"GuestMessageEncryptor"],[3,"GuestMessage"],[8,"AsBytes"],[8,"FromBytes"],[8,"Message"],[15,"u8"],[15,"slice"],[15,"u64"],[3,"ValidBitmap"],[3,"Ghcb"],[8,"AsMut"],[8,"AsRef"],[8,"Sized"],[3,"GhcbProtocol"],[15,"u128"],[3,"PhysAddr"],[8,"IntoIterator"],[4,"Option"],[15,"u16"],[15,"u32"],[3,"Iter"],[3,"IterNames"],[8,"Translator"],[4,"RegisterGhcbGpaError"],[3,"GuestFieldFlags"],[3,"PlatformInfo"],[3,"PolicyFlags"],[4,"KeySelect"],[3,"KeySelectIter"],[4,"RootKeySelect"],[3,"RootKeySelectIter"],[4,"KeyStatus"],[4,"ReportStatus"],[3,"AuthenticatedHeader"],[3,"GuestMessageHeader"],[4,"AeadAlgorithm"],[4,"MessageType"],[3,"KeyRequest"],[3,"KeyResponse"],[3,"AttestationRequest"],[3,"AttestationResponse"],[3,"AttestationReport"],[3,"AttestationReportData"],[3,"GuestPolicy"],[3,"TcbVersion"],[4,"AuthorKey"],[3,"EcdsaSignature"],[3,"EcdsaPublicKey"],[4,"SigningAlgorithm"],[4,"EccCurve"],[15,"usize"],[3,"PermissionMask"],[4,"Validation"],[4,"Vmsa"],[3,"RmpPermission"],[4,"PageSize"],[4,"InstructionError"],[8,"RawMutex"],[3,"Mutex"],[3,"GhcbIoFactory"],[6,"Spinlock"],[4,"PortFactoryWrapper"],[3,"GhcbIoPort"],[3,"RawIoPortFactory"],[6,"Port"],[4,"PortWrapper"],[3,"HypervisorFeatureSupportResponse"],[3,"SevStatus"],[8,"Error"],[3,"Backtrace"],[4,"SevStatusError"],[3,"SnpPageStateChangeRequest"],[4,"Size2MiB"],[3,"PhysFrame"],[4,"PageAssignment"],[4,"CpuidRegister"],[4,"TerminationReason"],[3,"CpuidRequest"],[3,"CpuidResponse"],[3,"PreferredGhcbGpaResponse"],[3,"SevInfoResponse"],[3,"GhcbGpa"],[3,"RegisterGhcbGpaRequest"],[3,"TerminationRequest"],[15,"never"],[3,"String"],[3,"RegisterGhcbGpaResponse"],[3,"SnpPageStateChangeResponse"],[3,"SecretsPage"],[4,"Imi"],[3,"VmsaPage"],[3,"Vmsa"],[3,"SegmentRegister"],[8,"IoPortFactory"],[8,"PortReader"],[8,"PortWriter"],[3,"SevInfoRequest"],[3,"PreferredGhcbGpaRequest"],[3,"HypervisorFeatureSupportRequest"],[13,"GhcbResponseLocationNotMatchingRequest"]]},\
"oak_simple_io":{"doc":"Simple I/O driver for communication between the guest and …","t":"DRRRRDILLLLLLLLLLLLLLLLLL","n":["BufferDescriptor","DEFAULT_INPUT_BUFFER","DEFAULT_OUTPUT_BUFFER","INPUT_BUFFER_LENGTH","OUTPUT_BUFFER_LENGTH","SimpleIo","Translator","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new_with_defaults","read_bytes","try_from","try_from","try_into","try_into","type_id","type_id","write_bytes"],"q":[[0,"oak_simple_io"]],"d":["I/O port descriptor for a buffer.","Default I/O ports for the input buffer.","Default I/O ports for the output buffer.","The length of the buffer that will be used for input …","The length of the buffer that will be used for output …","The simple I/O channel driver implementation.","Memory address translation function.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads the next available bytes from the input buffer, if …","","","","","","","Writes the data to the output buffer and notifies the host."],"i":[0,0,0,0,0,0,0,3,5,3,5,3,5,3,5,5,5,5,3,5,3,5,3,5,5],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2,3,3,4],[[7,[[5,[4]],6]]]],[[1,2,4],[[7,[[5,[4]],6]]]],[[[5,[4]]],[[10,[[9,[8]]]]]],[[],7],[[],7],[[],7],[[],7],[[],11],[[],11],[[[5,[4]],[12,[8]]],[[7,[13,6]]]]],"c":[],"p":[[4,"PortFactoryWrapper"],[8,"Translator"],[3,"BufferDescriptor"],[8,"Allocator"],[3,"SimpleIo"],[15,"str"],[4,"Result"],[15,"u8"],[3,"VecDeque"],[4,"Option"],[3,"TypeId"],[15,"slice"],[15,"usize"]]},\
"oak_stage0":{"doc":"","t":"FFFAFFHHHHHDLLLFLFMMMMMFLLL","n":["create_gdt","create_idt","jump_to_kernel","paging","panic","rust64_start","PAGE_TABLE_REFS","PDPT","PD_0","PD_3","PML4","PageTableRefs","borrow","borrow_mut","from","init_page_table_refs","into","map_additional_memory","pd_0","pd_3","pdpt","pml4","pt_0","remap_first_huge_page","try_from","try_into","type_id"],"q":[[0,"oak_stage0"],[6,"oak_stage0::paging"]],"d":["","","Passes control to the operating system kernel. No more …","","Common panic routine for the Stage0 binaries. This needs …","Entry point for the Rust code in the stage0 BIOS.","References to all the pages tables we care about.","","","","","Wrapper for the page table references so that we can …","","","Returns the argument unchanged.","Initialises the page table references.","Calls <code>U::from(self)</code>.","Maps the first 1GiB of memory using 2MiB hugepages, except …","The page directory covering virtual memory range 0..1GiB.","The page directory covering virtual memory range 3..4GiB.","The page-directory pointer table covering virtual memory …","The root page-map level 4 table coverting virtual memory …","The page table covering virtual memory range 0..2MiB where …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,10,10,10,0,10,0,10,10,10,10,10,0,10,10,10],"f":[[1],[2],[[3,4],5],0,[6,5],[7,5],0,0,0,0,0,0,[[]],[[]],[[]],[7],[[]],[7],0,0,0,0,0,[7],[[],8],[[],8],[[],9]],"c":[],"p":[[3,"GlobalDescriptorTable"],[3,"InterruptDescriptorTable"],[3,"VirtAddr"],[15,"usize"],[15,"never"],[3,"PanicInfo"],[15,"u64"],[4,"Result"],[3,"TypeId"],[3,"PageTableRefs"]]},\
"oak_tdx_guest":{"doc":"Rust implementation of features needed to implement guest …","t":"AAENDSNNSSSSNNNDEIDFLMLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLFFMMMLMMLLLLLLLLLLLLMLMLLLLLKLLLLLLLLLLLLLLLLLLNELLFLLLFFFFFFFFFLLL","n":["tdcall","vmcall","AcceptMemoryError","AlreadyAccepted","Attributes","DEBUG","InvalidOperand","InvalidSize","KL","PERFMON","PKS","SYSPROF","Size1GiB","Size2MiB","Size4KiB","TdInfo","TdxPageSize","TdxSize","VeInfo","accept_memory","all","attributes","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","complement","contains","default","difference","empty","exit_qualification","exit_reason","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","get_td_info","get_ve_info","gpa_width","guest_linear_address","guest_physical_address","insert","instruction_info","instruction_length","intersection","intersects","into","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","max_vcpus","not","num_vcpus","remove","set","sub","sub_assign","symmetric_difference","tdx_size","to_string","toggle","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","union","MapFailure","MapGpaError","borrow","borrow_mut","call_cpuid","fmt","from","into","io_read_u16","io_read_u32","io_read_u8","io_write_u16","io_write_u32","io_write_u8","map_gpa","msr_read","msr_write","try_from","try_into","type_id"],"q":[[0,"oak_tdx_guest"],[2,"oak_tdx_guest::tdcall"],[114,"oak_tdx_guest::vmcall"]],"d":["Rust implementation of the TDX TDCALL instruction.","Rust implementation of the sub-functions of the TDX TDCALL[…","Error when accepting guest-physical memory.","The page is not pending and has already been accepted.","Attributes of a TD.","The guest TD runs in off-TD debug mode.","The supplied address is not valid.","The specified page size is invalid.","Whether the TD is allowed to use Key Locker.","Wehther the TD is allowed to use Perfmon and PERF_METRICS.","Whether the TD is allowed to use Supervisor Protection …","Whether system profiling is enabled on the TD.","","","","Information about the TD’s execution environment.","","Trait for getting the associated <code>TdxPageSize</code> enum for a …","Information about a virtualization exception (#VE).","Accepts a pending private memory page to make it usable in …","Returns the set containing all flags.","The TD attributes passed as part of TDINIT.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","The exit qualification.","The exit reason.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","Get the value for a flag from its stringified name.","Try to create Self from the raw representation","Gets information about the TD’s execution environment by …","Gets information about the recent virtualization exception …","The effective GPA width. The “shared” bit is at …","The guest-linear address (virtual address).","The guest-physical address.","Inserts the specified flags in-place.","Additional context for the instruction that caused the #VE.","The length of the instruction that caused the #VE.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","The maximum possible number of vCPUs for this TD.","Returns the complement of this set of flags.","The number of vCPUs enabled on this TD.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Error when mapping a guest-physical address (GPA) as …","","","Executes CPUID for the specified leaf and sub-leaf.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads two bytes from the specified IO port.","Reads four bytes from the specified IO port.","Reads a single byte from the specified IO port.","Writes two bytes to the specified IO port.","Writes four bytes to the specified IO port.","Writes a single byte to the specified IO port.","Maps a range of guest-physical addresses (GPAs) as shared …","Reads a value from the specified model-specific register.","Writes a value to the specified model-specific register.","","",""],"i":[0,0,0,4,0,6,4,4,6,6,6,6,13,13,13,0,0,0,0,0,6,16,6,6,6,6,6,6,6,6,16,17,6,4,13,16,17,6,4,13,6,6,6,6,6,17,17,6,6,6,6,6,4,4,13,16,17,6,4,13,6,6,6,6,6,6,4,0,0,16,17,17,6,17,17,6,6,16,17,6,4,13,6,6,6,6,6,16,6,16,6,6,6,6,6,2,4,6,16,17,6,4,13,16,17,6,4,13,16,17,6,4,13,6,24,0,24,24,0,24,24,24,0,0,0,0,0,0,0,0,0,24,24,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]]],[[5,[4]]]],[[],6],0,[[6,6],6],[[6,6]],[[6,6],6],[[6,6]],[6,7],[6,7],[[6,6],6],[[6,6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[[6,6],8],[[],6],[[6,6],6],[[],6],0,0,[[6,9]],[[6,10],11],[[6,10],11],[[6,10],11],[[6,10],11],[[4,10],[[5,[12]]]],[[4,10],11],[[13,10],11],[[]],[[]],[[]],[[]],[[]],[7,[[14,[6]]]],[7,6],[7,6],[7,6],[9,6],[15,[[14,[6]]]],[7,[[14,[4]]]],[[],16],[[],[[14,[17]]]],0,0,0,[[6,6]],0,0,[[6,6],6],[[6,6],8],[[]],[[]],[[]],[[]],[[]],[6],[6,8],[6,8],[6,[[18,[6]]]],[6,[[19,[6]]]],0,[6,6],0,[[6,6]],[[6,6,8]],[[6,6],6],[[6,6]],[[6,6],6],[[],13],[[],20],[[6,6]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],21],[[],21],[[],21],[[],21],[[],21],[[6,6],6],0,0,[[]],[[]],[[22,22],[[5,[23,15]]]],[[24,10],11],[[]],[[]],[22,[[5,[25,15]]]],[22,[[5,[22,15]]]],[22,[[5,[26,15]]]],[[22,25],[[5,[15]]]],[[22,22],[[5,[15]]]],[[22,26],[[5,[15]]]],[[[28,[27]]],[[5,[24]]]],[22,[[5,[7,15]]]],[[22,7],[[5,[15]]]],[[],5],[[],5],[[],21]],"c":[],"p":[[8,"PageSize"],[8,"TdxSize"],[3,"PhysFrame"],[4,"AcceptMemoryError"],[4,"Result"],[3,"Attributes"],[15,"u64"],[15,"bool"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"TdxPageSize"],[4,"Option"],[15,"str"],[3,"TdInfo"],[3,"VeInfo"],[3,"Iter"],[3,"IterNames"],[3,"String"],[3,"TypeId"],[15,"u32"],[3,"CpuidResult"],[4,"MapGpaError"],[15,"u16"],[15,"u8"],[4,"Size4KiB"],[3,"PhysFrameRange"]]},\
"oak_tensorflow_service":{"doc":"","t":"DLLLLLLLLALLLAADDDDDIDDDMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLM","n":["TensorflowService","borrow","borrow_mut","default","from","initialize","into","invoke","new","proto","try_from","try_into","type_id","oak","tensorflow","InitializeRequest","InitializeResponse","InvokeRequest","InvokeResponse","SessionId","Tensorflow","TensorflowAsyncClient","TensorflowClient","TensorflowServer","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","initialize","initialize","initialize","into","into","into","into","into","into","into","into","invoke","invoke","invoke","invoke","new","new","new","session_id","tensorflow_model","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value"],"q":[[0,"oak_tensorflow_service"],[13,"oak_tensorflow_service::proto"],[14,"oak_tensorflow_service::proto::oak"],[15,"oak_tensorflow_service::proto::oak::tensorflow"]],"d":["","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,6,7,17,19,2,3,9,6,7,11,17,19,2,3,9,6,7,11,2,3,9,6,7,2,3,9,6,7,11,2,3,9,6,7,11,2,3,9,6,7,2,3,9,6,7,2,3,9,6,7,2,3,9,6,7,17,19,2,3,9,6,7,11,20,17,19,17,19,2,3,9,6,7,11,20,17,19,11,17,19,11,6,2,2,3,9,6,7,11,17,19,2,3,9,6,7,11,17,19,2,3,9,6,7,11,17,19,2,3,9,6,7,11,9],"f":[0,[[]],[[]],[[],1],[[]],[[1,2],[[5,[3,4]]]],[[]],[[1,6],[[5,[7,4]]]],[[],1],0,[[],5],[[],5],[[],8],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[3],[9],[6],[7],[2,2],[3,3],[9,9],[6,6],[7,7],[[[11,[10]]],[[11,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],3],[[],9],[[],6],[[],7],[2,12],[3,12],[9,12],[6,12],[7,12],[[2,2],13],[[3,3],13],[[9,9],13],[[6,6],13],[[7,7],13],[[2,14],15],[[3,14],15],[[9,14],15],[[6,14],15],[[7,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[5,[3,4]]]],[[[17,[16]],2],[[5,[[5,[3,4]]]]]],[[[19,[18]],2],[[5,[[5,[3,4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[5,[7,4]]]],[[[17,[16]],6],[[5,[[5,[7,4]]]]]],[[[19,[18]],6],[[5,[[5,[7,4]]]]]],[[[11,[20]],[22,[21]]],[[5,[[23,[21]],24]]]],[16,[[17,[16]]]],[18,[[19,[18]]]],[20,[[11,[20]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0],"c":[],"p":[[3,"TensorflowService"],[3,"InitializeRequest"],[3,"InitializeResponse"],[3,"Status"],[4,"Result"],[3,"InvokeRequest"],[3,"InvokeResponse"],[3,"TypeId"],[3,"SessionId"],[8,"Clone"],[3,"TensorflowServer"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Transport"],[3,"TensorflowClient"],[8,"AsyncTransport"],[3,"TensorflowAsyncClient"],[8,"Tensorflow"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"never"]]},\
"oak_transparency_claims":{"doc":"","t":"AARDDNDRDENNNLLLLLLLLLLMMLLLLMLLLLMLLLLLLLLLLLLLLLMMMFMLLLLLLLLLLLLLLLLLLLMFFMGRDDMLLLLLLMLLLLLLLLMMMLLMLLLLLL","n":["claims","intoto","CLAIM_V1","ClaimEvidence","ClaimPredicate","ClaimType","ClaimValidity","ENDORSEMENT_V2","EndorsementStatement","InvalidClaimData","PredicateType","StatementType","Validity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","claim_spec","claim_type","deserialize","deserialize","deserialize","deserialize","digest","eq","eq","eq","eq","evidence","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","issued_on","not_after","not_before","parse_endorsement_statement","role","serialize","serialize","serialize","serialize","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uri","validate_claim","validate_endorsement","validity","DigestSet","STATEMENT_INTOTO_V01","Statement","Subject","_type","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","digest","eq","eq","fmt","fmt","from","from","into","into","name","predicate","predicate_type","serialize","serialize","subject","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"oak_transparency_claims"],[2,"oak_transparency_claims::claims"],[78,"oak_transparency_claims::intoto"]],"d":["This module contains structs for specifying claims about …","This module contains structs for specifying in-toto …","URI representing the PredicateType of a V1 Claim. To be …","Metadata about an artifact that serves as the evidence for …","Detailed content of a claim.","","Validity time range of an issued claim.","ClaimType for Endorsements. This is expected to be used …","","","","","","","","","","","","","","","","A detailed description of the claim, as an optional …","URI indicating the type of the claim. It determines the …","","","","","Collection of cryptographic digests for the contents of …","","","","","A collection of artifacts that support the truth of the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The timestamp (encoded as an Epoch time) when the claim …","The timestamp (encoded as an Epoch time) from which the …","The timestamp (encoded as an Epoch time) from which the …","Convert the given byte array into an endorsement …","Optional field specifying the role of this evidence within …","","","","","","","","","","","","","","","","","","","","URI uniquely identifies this evidence.","Check that the given statement is a valid claim:","Check that the given endorsement statement, is a valid …","Validity duration of this claim.","","URI representing in-toto v01 statements. This is constant …","This struct represents a generic statement that binds a …","A software artifact identified by its name and a set of …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,10,0,0,0,0,10,10,10,10,3,5,6,7,10,3,5,6,7,3,3,3,5,6,7,6,3,5,6,7,3,10,3,5,6,7,10,3,5,6,7,10,3,5,6,7,3,5,5,0,6,3,5,6,7,10,3,5,6,7,10,3,5,6,7,10,3,5,6,7,6,0,0,3,0,0,0,0,16,21,16,21,16,21,16,21,21,16,21,16,21,16,21,16,21,16,16,21,16,16,21,16,21,16,21,16],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[1,[[4,[[3,[2]]]]]],[1,[[4,[5]]]],[1,[[4,[6]]]],[1,[[4,[7]]]],0,[[[3,[8]],[3,[8]]],9],[[5,5],9],[[6,6],9],[[7,7],9],0,[[10,11],12],[[[3,[13]],11],12],[[5,11],12],[[6,11],12],[[7,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[15,[14]]],[[17,[[16,[[3,[7]]]]]]]],0,[[[3,[18]],19],4],[[5,19],4],[[6,19],4],[[7,19],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[[16,[3]]],[[4,[10]]]],[[[16,[[3,[7]]]]],[[4,[10]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,[[4,[21]]]],[1,[[4,[[16,[2]]]]]],0,[[21,21],9],[[[16,[8]],[16,[8]]],9],[[21,11],12],[[[16,[13]],11],12],[[]],[[]],[[]],[[]],0,0,0,[[21,19],4],[[[16,[18]],19],4],0,[[],4],[[],4],[[],4],[[],4],[[],20],[[],20]],"c":[],"p":[[8,"Deserializer"],[8,"Deserialize"],[3,"ClaimPredicate"],[4,"Result"],[3,"ClaimValidity"],[3,"ClaimEvidence"],[3,"EndorsementStatement"],[8,"PartialEq"],[15,"bool"],[4,"InvalidClaimData"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u8"],[15,"slice"],[3,"Statement"],[6,"Result"],[8,"Serialize"],[8,"Serializer"],[3,"TypeId"],[3,"Subject"]]},\
"oak_virtio":{"doc":"Simple virtio drivers implemented based on polling.","t":"IIIIAKAKAKDLLLLLLLLLLLLLLDDDLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLALDDDSDDDSSSDMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLMMLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDLLLLLLALLALLLLNNRSSDNNNNNNDEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["InverseTranslator","Read","Translator","Write","console","flush","queue","read_exact","vsock","write_all","Console","borrow","borrow_mut","find_and_configure_device","flush","from","get_status","into","read_bytes","read_exact","try_from","try_into","type_id","write_all","write_bytes","DeviceWriteOnlyQueue","DriverWriteOnlyQueue","Queue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","get_avail_addr","get_desc_addr","get_used_addr","inner","inner","into","into","into","must_notify_device","new","new","read_next_used_buffer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","virtq","write_buffer","AvailRing","Desc","DescFlags","NO_NOTIFY","RingFlags","UsedElem","UsedRing","VIRTQ_DESC_F_INDIRECT","VIRTQ_DESC_F_NEXT","VIRTQ_DESC_F_WRITE","VirtQueue","addr","all","all","avail","avail_event","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","complement","complement","contains","contains","default","default","default","desc","difference","difference","empty","empty","extend","extend","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","id","idx","idx","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_empty","is_empty","iter","iter","iter_names","iter_names","len","length","new","next","not","not","remove","remove","ring","ring","set","set","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","used","used_event","VSock","borrow","borrow_mut","find_and_configure_device","from","get_status","into","packet","read_filtered_packet","read_packet","socket","try_from","try_into","type_id","write_packet","CreditRequest","CreditUpdate","HEADER_SIZE","NO_RECEIVE","NO_SEND","Packet","Request","Response","Rst","Rw","Shutdown","Stream","VSockFlags","VSockOp","VSockType","all","as_slice","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","complement","contains","difference","empty","eq","eq","eq","equivalent","equivalent","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","from_repr","from_repr","get_buf_alloc","get_dst_cid","get_dst_port","get_flags","get_fwd_cnt","get_len","get_op","get_payload","get_payload_len","get_src_cid","get_src_port","get_type","insert","intersection","intersects","into","into","into","into","into_iter","is_all","is_empty","iter","iter_names","new","new_control","new_data","not","remove","set","set_buf_alloc","set_dst_cid","set_dst_port","set_flags","set_fwd_cnt","set_op","set_src_cid","set_src_port","sub","sub_assign","symmetric_difference","to_string","to_string","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","Socket","SocketConnector","SocketListener","accept","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","flush","from","from","from","into","into","into","new","new","read_exact","shutdown","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_all"],"q":[[0,"oak_virtio"],[10,"oak_virtio::console"],[25,"oak_virtio::queue"],[60,"oak_virtio::queue::virtq"],[232,"oak_virtio::vsock"],[247,"oak_virtio::vsock::packet"],[369,"oak_virtio::vsock::socket"]],"d":["","Read bytes from a source.","Memory address translation functions.","Write bytes to a source.","","Flush any output buffers, if they exist.","","Read bytes until <code>data</code> has been filled.","","Write all bytes in <code>data</code>.","Simple driver implementation for a virtio serial/console …","","","Finds the virtio console PCI device, initialises the …","","Returns the argument unchanged.","Gets the device status.","Calls <code>U::from(self)</code>.","Reads the next available bytes from the receive queue, if …","","","","","","Writes the data to the transmit queue.","A queue where the descriptor buffers are only writable by …","A queue where the descriptor buffers are only writable by …","A container for a boxed virtqueue and its associated …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the address of the available ring.","Gets the address of the descriptor table.","Gets the address of the used ring.","The inner queue.","The inner queue.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the device wants to be notified of queue …","","","Reads the contents of the next used buffer from the queue, …","","","","","","","","","","","Writes the data to a buffer and adds its descriptor to the …","The ring buffer that indicates which descriptors have been …","A descriptor for a byte buffer used in a virtio queue.","Flags about a descriptor.","This indicates that the owner of the ring does not require …","Flags about the available and used rings.","An element indicating a used descriptor chain.","The ring buffer that indicates which available descriptors …","This means the buffer contains a list of buffer …","This marks a buffer as continuing via the next field to …","This marks a buffer as device write-only (otherwise device …","A split virtqueue implementation.","The guest-physical address of the buffer.","Returns the set containing all flags.","Returns the set containing all flags.","The available ring, which is controlled by the driver.","Event details. Only used if VIRTIO_F_EVENT_IDX has been …","Returns the intersection between the two sets of flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Returns the union of the two sets of flags.","Adds the set of flags.","Adds the set of flags.","","Returns the raw value of the flags currently stored.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Returns the left flags, but with all the right flags …","Toggles the set of flags.","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","","","","The descriptor table.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","Returns an empty set of flags.","","","Driver-specific flags for the queue.","Flags providing more info about this descriptor.","Device-specific flags for the queue.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, unless that …","","Convert from underlying bit representation, preserving all …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, dropping any …","","","Get the value for a flag from its stringified name.","Get the value for a flag from its stringified name.","The index of the head of the used descriptor chain.","The next index that will be used in the ring (modulo …","The next index that will be used in the ring (modulo …","Inserts the specified flags in-place.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Iterate over enabled flag values with their stringified …","Total length of the bytes that was written to the used …","The lengths of the buffer.","","The index of the next descriptor in the chain if this is …","Returns the complement of this set of flags.","Returns the complement of this set of flags.","Removes the specified flags in-place.","Removes the specified flags in-place.","The ring-buffer containing indices of the heads of …","The ring-buffer containing the used elements.","Inserts or removes the specified flags depending on the …","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Returns the union of between the flags in <code>self</code> and <code>other</code>.","The used ring, which is controlled by the device.","Event details. Only used if VIRTIO_F_EVENT_IDX has been …","Low-level driver interface to interact with a virtio …","","","Finds the virtio vsock PCI device, initialises the device, …","Returns the argument unchanged.","Gets the device status.","Calls <code>U::from(self)</code>.","Virtio vsock packet implementation.","Reads the next valid packet that matches the filter, if …","Reads the next valid packet from the receive queue, if one …","","","","","Writes the packet to the transmit queue.","Request for update on credit to calculate stream buffer …","Give update on credit to support flow control, either in …","The size of the packet header in bytes.","Indicates that no more payload data will be received.","Indicates that no more payload data will be senn.","","Connection request.","Connections accepted response.","Connection reset, either in reponse to a shutdown request …","Represents a data packet.","Connection shutdown request.","Only stream sockets are currently supported in the Virtio …","Flags about a socket connection.","Vsock Ops.","Socket Type.","Returns the set containing all flags.","Returns the entire buffer as a slice.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, preserving all …","","Convert from underlying bit representation, dropping any …","","Get the value for a flag from its stringified name.","Try to create Self from the raw representation","Try to create Self from the raw representation","Gets the size of the peer’s stream buffer.","Gets the destination CID.","Gets the destination port.","Gets the flags.","Gets the number of bytes that the peer has read out of the …","Gets the payload length.","Gets the op that the packet represents.","Gets the payload.","Gets the actual length of the payload in the current …","Gets the source CID.","Gets the source port.","Gets the type of socket the packet is intended for.","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Iterate over enabled flag values.","Iterate over enabled flag values with their stringified …","Creates a new <code>Packet</code> from an existing buffer.","Creates a new control <code>Packet</code> with only a header.","Creates a new data <code>Packet</code> with the given payload length.","Returns the complement of this set of flags.","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Sets the size of the stream buffer.","Sets the destination CID.","Sets the destination port.","Sets the flags.","Sets the number of bytes read from the stream buffer.","Sets the op that the packet represents.","Sets the source CID.","Sets the source port.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","A connection-oriented socket.","Connector to initiate a connection to a listener on the …","Listener that waits for a connection initiated from the …","Listens for a connection from the host on the specified …","","","","","","","Tries to connect to a listener on the host.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Shuts the connection down.","","","","","","","","","",""],"i":[0,0,0,0,0,48,0,49,0,48,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,19,20,16,19,20,16,19,20,16,16,16,16,19,20,19,20,16,16,19,20,20,19,20,16,19,20,16,19,20,16,0,19,0,0,0,23,0,0,0,22,22,22,0,31,22,23,50,27,22,23,22,23,22,23,22,23,22,22,23,23,22,23,22,23,26,50,22,31,23,27,25,26,50,22,31,23,27,25,22,25,22,25,22,23,22,23,26,27,25,50,22,23,22,23,22,23,26,31,27,22,22,22,22,22,31,23,23,23,23,23,27,25,26,50,22,31,23,27,25,22,23,22,22,23,23,22,23,22,23,22,23,25,26,27,22,23,22,23,22,23,26,50,22,31,23,27,25,22,23,22,23,22,23,22,23,22,23,25,31,31,31,22,23,22,23,26,27,22,23,22,23,22,23,22,23,22,25,22,23,26,50,22,31,23,27,25,26,50,22,31,23,27,25,26,50,22,31,23,27,25,22,23,50,26,0,36,36,36,36,36,36,0,36,36,0,36,36,36,36,40,40,0,39,39,0,40,40,40,40,40,41,0,0,0,39,38,39,39,39,39,39,39,39,39,38,40,39,41,38,40,39,41,39,39,39,39,40,39,41,40,41,39,38,40,40,39,39,39,39,39,41,41,38,40,39,41,39,39,39,39,39,39,40,41,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,38,40,39,41,39,39,39,39,39,38,38,38,39,39,39,38,38,38,38,38,38,38,38,39,39,39,40,41,39,38,40,39,41,38,40,39,41,38,40,39,41,39,0,0,0,45,47,45,46,47,45,46,47,46,47,45,46,47,45,46,47,45,46,46,47,45,46,47,45,46,47,45,46,46],"f":[0,0,0,0,0,[[],1],0,[[[3,[2]]],1],0,[[[3,[2]]],1],0,[[]],[[]],[[4,5,6],[[1,[[8,[7,6]]]]]],[[[8,[9,6]]],1],[[]],[[[8,[9,6]]],10],[[]],[[[8,[9,6]]],[[12,[[11,[2]]]]]],[[[8,[9,6]],[3,[2]]],1],[[],13],[[],13],[[],14],[[[8,[9,6]],[3,[2]]],1],[[[8,[9,6]],[3,[2]]],[[12,[15]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[16,[6]]],17],[[[16,[6]]],17],[[[16,[6]]],17],0,0,[[]],[[]],[[]],[[[16,[6]]],18],[[4,6],[[19,[6]]]],[[4,6],[[20,[6]]]],[[[20,[6]]],[[12,[[21,[2]]]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,[[[19,[6]],[3,[2]]],[[12,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[],22],[[],23],0,0,[[22,22],22],[[23,23],23],[[22,22]],[[23,23]],[[22,22],22],[[23,23],23],[[22,22]],[[23,23]],[22,24],[22,24],[23,24],[23,24],[[22,22],22],[[23,23],23],[[22,22]],[[23,23]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[25,25],[[]],[[]],[22,22],[23,23],[[22,22],18],[[23,23],18],[[],26],[[],27],[[],25],0,[[22,22],22],[[23,23],23],[[],22],[[],23],[[22,28]],[[23,28]],0,0,0,[[22,29],30],[[22,29],30],[[22,29],30],[[22,29],30],[[22,29],30],[[31,29],30],[[23,29],30],[[23,29],30],[[23,29],30],[[23,29],30],[[23,29],30],[[27,29],30],[[25,29],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,[[12,[22]]]],[24,[[12,[23]]]],[24,22],[24,22],[24,23],[24,23],[24,22],[24,23],[28,22],[28,23],[32,[[12,[22]]]],[32,[[12,[23]]]],0,0,0,[[22,22]],[[23,23]],[[22,22],22],[[23,23],23],[[22,22],18],[[23,23],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[23],[22,18],[23,18],[22,18],[23,18],[22,[[33,[22]]]],[23,[[33,[23]]]],[22,[[34,[22]]]],[23,[[34,[23]]]],0,0,[[22,35,10],31],0,[22,22],[23,23],[[22,22]],[[23,23]],0,0,[[22,22,18]],[[23,23,18]],[[22,22],22],[[23,23],23],[[22,22]],[[23,23]],[[22,22],22],[[23,23],23],[[]],[[]],[[22,22]],[[23,23]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[22,22],22],[[23,23],23],0,0,0,[[]],[[]],[[4,5,6],[[1,[[36,[7,6]]]]]],[[]],[[[36,[9,6]]],10],[[]],0,[[[36,[9,6]],37,18],[[12,[38]]]],[[[36,[9,6]]],[[12,[38]]]],0,[[],13],[[],13],[[],14],[[[36,[9,6]],38]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],39],[38,[[3,[2]]]],[[39,39],39],[[39,39]],[[39,39],39],[[39,39]],[39,10],[39,10],[[39,39],39],[[39,39]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[[39,39],18],[[39,39],39],[[],39],[[40,40],18],[[39,39],18],[[41,41],18],[[],18],[[],18],[[39,28]],[[38,29],30],[[40,29],[[13,[42]]]],[[40,29],30],[[39,29],30],[[39,29],30],[[39,29],30],[[39,29],30],[[39,29],30],[[41,29],[[13,[42]]]],[[41,29],30],[[]],[[]],[[]],[[]],[10,[[12,[39]]]],[10,39],[10,39],[10,39],[28,39],[32,[[12,[39]]]],[24,[[12,[40]]]],[24,[[12,[41]]]],[38,10],[38,43],[38,10],[38,39],[38,10],[38,10],[38,[[1,[40]]]],[38,[[3,[2]]]],[38,15],[38,43],[38,10],[38,[[1,[41]]]],[[39,39]],[[39,39],39],[[39,39],18],[[]],[[]],[[]],[[]],[39],[39,18],[39,18],[39,[[33,[39]]]],[39,[[34,[39]]]],[[[21,[2]]],[[1,[38]]]],[[10,10,40],[[1,[38]]]],[[[3,[2]],10,10],[[1,[38]]]],[39,39],[[39,39]],[[39,39,18]],[[38,10]],[[38,43]],[[38,10]],[[38,39]],[[38,10]],[[38,40],1],[[38,43]],[[38,10]],[[39,39],39],[[39,39]],[[39,39],39],[[],44],[[],44],[[39,39]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[39,39],39],0,0,0,[[[45,[9,6]]],[[1,[[46,[9,6]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[9,6]]],[[1,[[46,[9,6]]]]]],[[[46,[9,6]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[9,6]],10,10],[[47,[9,6]]]],[[[36,[9,6]],10],[[45,[9,6]]]],[[[46,[9,6]],[3,[2]]],1],[[[46,[9,6]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[[46,[9,6]],[3,[2]]],1]],"c":[],"p":[[6,"Result"],[15,"u8"],[15,"slice"],[8,"Translator"],[8,"InverseTranslator"],[8,"Allocator"],[3,"VirtioPciTransport"],[3,"Console"],[8,"VirtioTransport"],[15,"u32"],[3,"VecDeque"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"usize"],[3,"Queue"],[3,"VirtAddr"],[15,"bool"],[3,"DriverWriteOnlyQueue"],[3,"DeviceWriteOnlyQueue"],[3,"Vec"],[3,"DescFlags"],[3,"RingFlags"],[15,"u16"],[3,"UsedElem"],[3,"AvailRing"],[3,"UsedRing"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[3,"Desc"],[15,"str"],[3,"Iter"],[3,"IterNames"],[3,"PhysAddr"],[3,"VSock"],[8,"Fn"],[3,"Packet"],[3,"VSockFlags"],[4,"VSockOp"],[4,"VSockType"],[3,"Error"],[15,"u64"],[3,"String"],[3,"SocketListener"],[3,"Socket"],[3,"SocketConnector"],[8,"Write"],[8,"Read"],[3,"VirtQueue"]]},\
"quirk_echo_launcher":{"doc":"","t":"AAAIDDDDDMMLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["proto","quirk","echo","Echo","EchoAsyncClient","EchoClient","EchoRequest","EchoResponse","EchoServer","body","body","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","echo","echo","echo","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","from","from","from","into","into","into","into","into","invoke","new","new","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"quirk_echo_launcher"],[1,"quirk_echo_launcher::proto"],[2,"quirk_echo_launcher::proto::quirk"],[3,"quirk_echo_launcher::proto::quirk::echo"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,8,10,1,2,4,8,10,1,2,4,1,2,1,2,4,1,2,4,1,2,15,8,10,1,2,1,2,1,2,8,10,1,2,4,8,10,1,2,4,4,8,10,4,1,2,4,8,10,1,2,4,8,10,1,2,4,8,10,1,2,4],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[1,1],[2,2],[[[4,[3]]],[[4,[3]]]],[[]],[[]],[[]],[[],1],[[],2],[1,[[6,[2,5]]]],[[[8,[7]],1],[[6,[[6,[2,5]]]]]],[[[10,[9]],1],[[6,[[6,[2,5]]]]]],[1,11],[2,11],[[1,1],12],[[2,2],12],[[1,13],14],[[2,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[15]],[17,[16]]],[[6,[[18,[16]],19]]]],[7,[[8,[7]]]],[9,[[10,[9]]]],[15,[[4,[15]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[],20],[[],20]],"c":[],"p":[[3,"EchoRequest"],[3,"EchoResponse"],[8,"Clone"],[3,"EchoServer"],[3,"Status"],[4,"Result"],[8,"Transport"],[3,"EchoClient"],[8,"AsyncTransport"],[3,"EchoAsyncClient"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Echo"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"never"],[3,"TypeId"]]},\
"quirk_echo_service":{"doc":"","t":"DLLLLLLALLLAAIDDDDDMMLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EchoService","borrow","borrow_mut","default","echo","from","into","proto","try_from","try_into","type_id","quirk","echo","Echo","EchoAsyncClient","EchoClient","EchoRequest","EchoResponse","EchoServer","body","body","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","echo","echo","echo","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","from","from","from","into","into","into","into","into","invoke","new","new","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"quirk_echo_service"],[11,"quirk_echo_service::proto"],[12,"quirk_echo_service::proto::quirk"],[13,"quirk_echo_service::proto::quirk::echo"]],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,2,3,10,12,2,3,8,10,12,2,3,8,2,3,2,3,8,2,3,8,2,3,17,10,12,2,3,2,3,2,3,10,12,2,3,8,10,12,2,3,8,8,10,12,8,2,3,8,10,12,2,3,8,10,12,2,3,8,10,12,2,3,8],"f":[0,[[]],[[]],[[],1],[[1,2],[[5,[3,4]]]],[[]],[[]],0,[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[3],[2,2],[3,3],[[[8,[7]]],[[8,[7]]]],[[]],[[]],[[]],[[],2],[[],3],[2,[[5,[3,4]]]],[[[10,[9]],2],[[5,[[5,[3,4]]]]]],[[[12,[11]],2],[[5,[[5,[3,4]]]]]],[2,13],[3,13],[[2,2],14],[[3,3],14],[[2,15],16],[[3,15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[17]],[19,[18]]],[[5,[[20,[18]],21]]]],[9,[[10,[9]]]],[11,[[12,[11]]]],[17,[[8,[17]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[],6]],"c":[],"p":[[3,"EchoService"],[3,"EchoRequest"],[3,"EchoResponse"],[3,"Status"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"EchoServer"],[8,"Transport"],[3,"EchoClient"],[8,"AsyncTransport"],[3,"EchoAsyncClient"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Echo"],[15,"u8"],[15,"slice"],[3,"Vec"],[15,"never"]]},\
"sev_serial":{"doc":"","t":"DLLLLLLLLLLLL","n":["SerialPort","borrow","borrow_mut","from","init","into","new","send","try_from","try_into","type_id","wait_for_empty_output","write_str"],"q":[[0,"sev_serial"]],"d":["Basic implementation that allows for writing to a serial …","","","Returns the argument unchanged.","Initializes the serial port for writing.","Calls <code>U::from(self)</code>.","Creates a new instance of a serial port with the given …","Sends a byte of data via the serial port.","","","","Wait until the output buffer is empty.",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],[[]],[1,[[3,[2]]]],[[]],[[4,5],1],[[1,6],[[3,[2]]]],[[],3],[[],3],[[],7],[1,[[3,[2]]]],[[1,2],8]],"c":[],"p":[[3,"SerialPort"],[15,"str"],[4,"Result"],[15,"u16"],[4,"PortFactoryWrapper"],[15,"u8"],[3,"TypeId"],[6,"Result"]]},\
"snp_measurement":{"doc":"","t":"DRRLLLLLLLLAMLLLLLLMFAALMLLLLLLADLLMLLFFMLLLNENNNRDENNNNMMMMMMLLLLLLMLMLLLLLLLLLMLLLLMLLLLLLLLLLLLLLNRRRRDNRRRRRRRNDDEDNLLLLLLLLLLMMLLLLLLLLLMLLLLLMLMMFLMMLLLLLMMMLLLLLLLLLLLLLLLRRRRF","n":["Cli","DEFAULT_ENCLAVE_BINARY","DEFAULT_STAGE0_ROM","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","command","command_for_update","elf","enclave_binary","enclave_binary_path","from","from_arg_matches","from_arg_matches_mut","group_id","into","legacy_boot","main","page","stage0","stage0_path","stage0_rom","to_owned","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut","vmsa","MemorySegment","borrow","borrow_mut","data","from","into","load_elf_file","load_elf_segments","start_address","try_from","try_into","type_id","Cpuid","ImiPage","Invalid","No","Normal","PAGE_INFO_SIZE","PageInfo","PageType","Secrets","Unmeasured","Vmsa","Zero","_imi_page","_length","_reserved","_vmpl1_perms","_vmpl2_perms","_vmpl3_perms","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","contents","default","digest_cur","fmt","fmt","fmt","from","from","from","from","from_repr","from_repr","gpa","into","into","into","new","page_type","set_contents_from_page_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_current_digest","update_from_data","update_from_snp_page","update_from_vmsa","Cpuid","FIRMWARE_TOP","GUID_TABLE_END_OFFSET","GUID_TABLE_ENTRY_HEADER_SIZE","GUID_TABLE_FOOTER_GUID","GuidTableEntryHeader","Invalid","LEGACY_MAX_SIZE","LEGACY_TOP","SEV_MEATADATA_GUID","SEV_METADATA_ENTRY_SIZE","SEV_METADATA_HEADER_SIZE","SEV_METADATA_VERSION","SEV_SECTION_SIGNATURE","Secrets","SevMetadataHeader","SevMetadataPageInfo","SevMetadataPageType","Stage0Info","Unmeasured","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","count","fmt","from","from","from","from","from","from_repr","get_guid_table_content","get_snp_pages","guid","into","into","into","into","into","legacy_offset","legacy_shadow_bytes","legacy_start_address","length","load_stage0","new","page_count","page_type","parse","parse","parse","parse_firmware_guid_table","rom_bytes","size","start_address","start_address","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","CPU_FAMILY","CPU_MODEL","CPU_STEPPING","VMSA_ADDRESS","get_boot_vmsa"],"q":[[0,"snp_measurement"],[32,"snp_measurement::elf"],[44,"snp_measurement::page"],[100,"snp_measurement::stage0"],[178,"snp_measurement::vmsa"]],"d":["","The default workspace-relative path to the Oak Restricted …","The default workspace-relative path to the Stage 0 …","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A memory segment extracted from an ELF file.","","","The data specified for the segment in the ELF file.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Loads an ELF file and extracts the non-zero loadable …","The guest-physical start address of the segment.","","","","The SEV-SNP CPUID page.","Whether the page is part of an initial migration image …","Reserved value.","The page is not an IMI page.","The page is a normal page.","The size of the PageInfo struct.","Implementation of the Page Info structure used for …","The type of page being measured.","The SEV-SNP secrets page.","A page that is encrypted but not measured.","The page contains a VM state save area (VMSA) for a vCPU.","A page filled with zeros.","Whether the page is part of an initial migration image. …","The length of this struct in bytes.","Reserved. Must be 0.","The permissions for VMPL1. For now we treat this as …","The permissions for VMPL2. For now we treat this as …","The permissions for VMPL3. For now we treat this as …","","","","","","","The SHA-384 digest of the contents to be measured for …","","The current measurement up to this point.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Try to create Self from the raw representation","Try to create Self from the raw representation","The guest-physical address of the page being measured.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The type of page being measured.","Sets the <code>contents</code> field based to the SHA-384 digest of the …","","","","","","","","","","Calculates the SHA-384 digest of the struct’s memory and …","Updates the current measurement digest from a byte slice …","Updates the current measurement digest for a …","Updates the current measurement digest from a VMSA page.","","The address of the first byte after the end of the …","The reverse offset from the end of the firmware blob to …","The size of the header of an entry in the GUID table.","The footer GUID identifying the end of the GUID table.","The header of a guid table entry.","","The maximum size of the shadow firmware for legacy boot.","The address of the first byte after the end of the legacy …","The GUID identifying the SEV metadata GUID table entry.","The size of the SEV metadata section entry.","The size of the SEV metadata section header.","The version of SEV metadata sections we expect to …","The expected first 4 bytes of the SEV metadata section …","","The header of the SEV metadata section.","Information about the pages specified in the firmware SEV …","The page types used in the firmware SEV metadata section …","The contents of the Stage 0 firmware ROM image and its …","","","","","","","","","","","","The bytes of the State 0 firmware ROM image.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Try to create Self from the raw representation","Gets the main contents of the GUID table, excluding the …","Gets the SEV-SNP specific pages defined in the firmware …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The offset into the firmware ROM image from where the …","Gets the bytes of the legacy boot shadow of the ROM image.","The start address of the legacy boot shadow of the …","","Loads the Stage 0 firmware ROM image from the supplied …","","","","","","","Parses the GUID table from the firmware image as a map.","Gets the bytes of the entire ROM image.","","The start address of the firmware ROM in guest memory.","","","","","","","","","","","","","","","","","The CPU family of the vCPU we expect to be running on.","The CPU model of the vCPU we expect to be running on.","The stepping of the vCPU we expect to be running on.","The guest-physical address of the VMSA page.","Gets the initial VMSA for the vCPU that is used to boot …"],"i":[0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,0,0,13,13,13,13,13,0,0,13,13,13,13,18,0,18,17,18,0,0,0,18,18,18,18,14,14,14,14,14,14,14,17,18,14,17,18,14,14,14,14,17,18,14,17,18,18,17,18,14,14,17,18,14,14,14,14,17,18,14,17,18,14,17,18,14,14,14,14,19,0,0,0,0,0,19,0,0,0,0,0,0,0,19,0,0,0,0,19,24,25,26,27,19,24,25,26,27,19,24,27,19,24,25,26,27,19,19,24,24,26,24,25,26,27,19,24,24,24,27,0,24,25,25,25,26,27,24,24,26,24,25,24,25,26,27,19,24,25,26,27,19,24,25,26,27,19,0,0,0,0,0],"f":[0,0,0,[1,1],[1,1],[[]],[[]],[2,2],[[]],[[],1],[[],1],0,0,[2,3],[[]],[4,[[6,[2,5]]]],[4,[[6,[2,5]]]],[[],[[8,[7]]]],[[]],0,[[],9],0,0,[2,3],0,[[]],[[],6],[[],6],[[],10],[[2,4],[[6,[5]]]],[[2,4],[[6,[5]]]],0,0,[[]],[[]],0,[[]],[[]],[3,[[9,[[12,[11]]]]]],[3,[[9,[[12,[13]]]]]],0,[[],6],[[],6],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[],14],0,[[14,15],16],[[17,15],16],[[18,15],16],[[]],[[]],[[]],[19,18],[11,[[8,[17]]]],[11,[[8,[18]]]],0,[[]],[[]],[[]],[[],14],0,[[14,[20,[11]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],10],[[],10],[[],10],[14],[[14,[20,[11]],21]],[[14,18,21]],[[14,22,21]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[19,15],16],[[]],[[]],[[]],[[]],[[]],[23,[[8,[19]]]],[24,[[20,[11]]]],[24,[[12,[25]]]],0,[[]],[[]],[[]],[[]],[[]],0,[24,[[20,[11]]]],0,0,[3,[[9,[24]]]],[[[12,[11]]],24],0,0,[[[20,[11]]],25],[[[20,[11]]],26],[[[20,[11]]],27],[24,[[29,[28,[20,[11]]]]]],[24,[[20,[11]]]],0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,0,[[],22]],"c":[],"p":[[3,"Command"],[3,"Cli"],[3,"PathBuf"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[6,"Result"],[3,"TypeId"],[15,"u8"],[3,"Vec"],[3,"MemorySegment"],[3,"PageInfo"],[3,"Formatter"],[6,"Result"],[4,"ImiPage"],[4,"PageType"],[4,"SevMetadataPageType"],[15,"slice"],[3,"PhysAddr"],[3,"VmsaPage"],[15,"u32"],[3,"Stage0Info"],[3,"SevMetadataPageInfo"],[3,"GuidTableEntryHeader"],[3,"SevMetadataHeader"],[15,"u128"],[3,"HashMap"]]},\
"weather_lookup":{"doc":"Oak Functions weather lookup example.","t":"FF","n":["init","main"],"q":[[0,"weather_lookup"]],"d":["",""],"i":[0,0],"f":[[[]],[[]]],"c":[],"p":[]},\
"xtask":{"doc":"","t":"HAAAAAAAAOAFDLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLLLDFLLLLFMLLLLFLLLLFFFFFFFFFFFFFFFFFFFFFFNNDNDDNDENDNDEDNNNDDNNNDNNNNDNNNNDNNDIIEEDNDNDEEDNLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMKLLLLLLLLMMLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLFLLMMMMMMLLLLLLMLLMLLFFKLLKLFMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMMMMDHHHLLFFFLLLLLLLLLLLLFFFFLLLLLLDLLLLMLLFFFLLLL","n":["PROCESSES","check_build_licenses","check_license","check_todo","diffs","examples","files","internal","launcher","spread","testing","workspace_path","CheckBuildLicenses","borrow","borrow_mut","description","from","into","into_request","new","run","try_from","try_into","type_id","vzip","CheckLicense","borrow","borrow_mut","description","from","into","into_request","new","run","try_from","try_into","type_id","vzip","CheckTodo","borrow","borrow_mut","description","from","into","into_request","new","run","try_from","try_into","type_id","vzip","ModifiedContent","all_affected_crates","borrow","borrow_mut","contains","contains_path","directly_modified_crates","files","fmt","from","into","into_request","modified_files","try_from","try_into","type_id","vzip","build_rust_crate_wasm","run_oak_functions_example","crate_manifest_files","example_toml_files","file_contains","is_bazel_file","is_build_file","is_clang_format_file","is_dockerfile","is_fuzzing_toml_file","is_html_file","is_javascript_file","is_markdown_file","is_shell_script","is_source_code_file","is_toml_file","is_typescript_file","is_yaml_file","read_file","source_files","to_string","workspace_manifest_files","All","Base","BuildClient","BuildEnclaveBinary","CargoBinary","CargoManifest","CheckFormat","Cmd","Command","Commits","Completion","Completion","Context","Dependency","DependencySpec","DiffToMain","Error","Format","FuzzConfig","FuzzableExample","Json","Multiple","Ok","Opt","RunBazelTests","RunCargoClean","RunCargoClippy","RunCargoDeny","RunCargoFuzz","RunCargoFuzz","RunCargoTests","RunCargoUdeps","RunCi","RunOakExampleOpt","RunOakFunctionsExample","RunTests","RunTestsOpt","Runnable","Running","Scope","ServerVariant","ServerVariantIter","Single","SingleStatusResult","Skipped","Status","StatusResultValue","Step","StepResult","Text","all_dependencies_with_toml_path","args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","bin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_dependencies","cleanup","client_rust_target","client_rust_toolchain","client_variant","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","command","command","command","command","command","command","command_for_update","command_for_update","command_for_update","command_for_update","command_for_update","command_for_update","default","default","default","dependencies","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dev_dependencies","dry_run","eq","eq","eq","eq","eq","equivalent","equivalent","example_name","examples","failed_steps_prefixes","file_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_str","from_str","group_id","group_id","group_id","group_id","group_id","group_id","has_subcommand","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","is_empty","iter","keep_going","kill","kill_process","len","len","logs","logs","lookup_data_path","manifest_path","name","name","new","new","new_in_dir","next","next_back","nth","out_dir","partial_cmp","partial_cmp","path","path_to_executable","path_to_manifest","process_gone","read_to_end","result","result","root","run","run","run_step","scope","size_hint","stderr","stdout","success","target_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value","values","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","command","name","name","steps","App","MOCK_LOOKUP_DATA_PATH","OAK_RESTRICTED_KERNEL_BIN_DIR","QUIRK_ECHO_LAUNCHER_BIN","borrow","borrow_mut","build_binary","build_enclave_binary","build_stage0","clone","clone_into","enclave_binary_path","enclave_crate_name","enclave_crate_path","eq","fmt","from","from_crate_name","from_ref","into","into_request","run_launcher","run_oak_functions_example_in_background","run_oak_functions_launcher_example","run_oak_functions_launcher_example_with_lookup_data","subcommand","to_owned","try_from","try_into","type_id","vzip","BackgroundStep","borrow","borrow_mut","drop","from","inner","into","into_request","run_background","run_step","skip_test","try_from","try_into","type_id","vzip"],"q":[[0,"xtask"],[12,"xtask::check_build_licenses"],[25,"xtask::check_license"],[38,"xtask::check_todo"],[51,"xtask::diffs"],[68,"xtask::examples"],[70,"xtask::files"],[90,"xtask::internal"],[560,"xtask::internal::Step"],[564,"xtask::launcher"],[595,"xtask::testing"]],"d":["","","","","","","","","Functionality for testing variants of the enclave binary …","Similar to the <code>vec!</code> macro, but also allows a “spread” …","","","A <code>Runnable</code> command that checks for the existence of BUILD …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A <code>Runnable</code> command that checks for the existence of source …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A <code>Runnable</code> command that checks for the existence of todos …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Path to the <code>Cargo.toml</code> files for all crates that are …","","","","","Returns the list of paths to <code>Cargo.toml</code> files for all …","List of modified files.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Get all the files that have been modified in the given …","","","","","Build the Rust crate that will be used as the Wasm module …","","Return an iterator of all known Cargo Manifest files that …","","","Return whether the provided path refers to a Bazel file (…","","Return whether the provided path refers to a source file …","","Return whether the provided path refers to a <code>fuzz</code> crate …","","","Return whether the provided path refers to a markdown file …","","Return whether the provided path refers to a source file …","","","","","Return an iterator of all the first-party and non-ignored …","","Return an iterator of all known Cargo Manifest files that …","","Production-like server variant, without logging or any of …","","","Partial information about a Cargo binary, as included in a …","Partial representation of Cargo manifest files.","","A single command.","","","","","Encapsulates all the local state relative to a step, and …","Partial representation of a dependency in a <code>Cargo.toml</code> …","Partial representation of a Json specification of a …","","","","Struct representing config files for fuzzing.","Config for building an example for fuzzing.","Json specification of a dependency.","","","","","","","","","","","","","Holds the options for running the example.","","","","A task that can be run asynchronously.","A task that is currently running asynchronously.","","","An iterator over the variants of Self","","","","A construct to keep track of the status of the execution. …","The outcome of an individual step of execution.","An execution step, which may be a single <code>Runnable</code>, or a …","","Plaintext specification of a dependency with only the …","","Additional <code>libFuzzer</code> arguments passed through to the binary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a description of the task, e.g. the command line …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to kill the running task.","","Returns the number of top-level steps or commands. The …","","","","","Path to the Cargo.toml file for the example.","","Name of the example","","","","","","","Path to desired location of the .wasm file.","","","","Get path to the executable server binary for the server …","","","Reads the entire content of the provided future into a …","Returns the final result of the task, upon spontaneous …","","","Starts the task and returns a <code>Running</code> implementation.","Run the provided command, printing a status message with …","Run the provided step, printing out information about the …","","","Returns an <code>AsyncRead</code> object to stream stderr logs from the …","Returns an <code>AsyncRead</code> object to stream stdout logs from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the path to the respective enclave binary variant that …","Get the crate name of respective enclave binary variant","Get the path to the respective enclave binary variant that …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Runs the specified example as a background task. Returns a …","Runs the Oak Functions launcher configured with a default …","","Get the subcommand for launching in this mode","","","","","","Thin wrapper around an inner <code>Running</code> that kills the inner …","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Runs a step in the background, and returns a reference to …","Runs a step, and asserts that it succeeds.","Whether to skip the test. For instance, GitHub Actions …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,0,0,15,15,15,15,0,15,15,15,15,15,0,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,29,0,26,0,0,26,0,0,14,0,26,0,0,0,14,34,26,0,0,40,20,34,0,26,26,26,26,0,26,26,26,26,0,26,26,0,0,0,0,0,0,20,0,34,0,0,0,0,40,23,32,8,27,21,28,31,32,8,27,21,28,31,32,26,26,23,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,23,31,28,28,28,8,26,27,21,14,28,29,30,31,32,33,34,35,8,26,27,21,14,28,29,30,31,32,33,34,35,8,8,27,21,28,31,32,8,27,21,28,31,32,14,29,36,23,60,37,29,23,39,40,41,42,43,23,8,14,29,40,41,34,34,34,21,42,36,27,44,26,27,21,14,28,29,31,32,23,39,40,41,42,43,33,34,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,8,26,27,21,28,31,32,8,26,27,21,28,31,32,8,26,27,21,14,28,29,30,31,32,33,34,35,14,29,8,27,21,28,31,32,26,34,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,30,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,20,29,8,9,0,20,30,8,35,21,43,39,43,37,33,37,30,30,30,43,40,41,41,29,29,0,0,9,35,44,60,37,0,8,30,9,9,36,32,8,26,27,21,14,28,29,30,31,32,33,34,35,44,33,34,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,8,26,27,21,28,31,32,8,26,27,21,28,31,32,35,36,44,20,37,8,26,27,21,14,28,29,30,31,32,23,39,40,41,42,43,33,34,35,36,63,63,64,64,0,0,0,0,59,59,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,0,59,59,59,59,59,59,0,62,62,62,62,62,62,62,0,0,0,62,62,62,62],"f":[0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],3],0,[[]],[[]],[4,5],[[]],[[]],[[],6],[5,[[7,[4]]]],[[[7,[4]],8],[[7,[9]]]],[[],10],[[],10],[[],11],[[]],0,[[]],[[]],[12,5],[[]],[[]],[[],6],[5,[[7,[12]]]],[[[7,[12]],8],[[7,[9]]]],[[],10],[[],10],[[],11],[[]],0,[[]],[[]],[13,5],[[]],[[]],[[],6],[5,[[7,[13]]]],[[[7,[13]],8],[[7,[9]]]],[[],10],[[],10],[[],11],[[]],0,[14,15],[[]],[[]],[[15,1],16],[[15,17],16],[15,15],0,[[15,18],19],[[]],[[]],[[],6],[14,15],[[],10],[[],10],[[],11],[[]],[1,20],[21,20],[[],22],[14,[[7,[22]]]],[[17,1],16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,16],[17,5],[[],22],[3,5],[[],22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[23,[[24,[5]]]],0,[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],[25,25],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[8,8],[26,26],[27,27],[21,21],[14,14],[28,28],[29,29],[30,30],[31,31],[32,32],[33,33],[34,34],[35,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],14],[[],29],[[],36],0,[[],5],[37,5],[38,[[10,[29]]]],[38,[[10,[23]]]],[38,[[10,[39]]]],[38,[[10,[40]]]],[38,[[10,[41]]]],[38,[[10,[42]]]],[38,[[10,[43]]]],0,0,[[14,14],16],[[29,29],16],[[40,40],16],[[41,41],16],[[34,34],16],[[],16],[[],16],0,0,0,0,[[44,18],19],[[26,18],19],[[27,18],19],[[21,18],19],[[14,18],19],[[28,18],19],[[29,18],19],[[31,18],19],[[32,18],19],[[23,18],19],[[39,18],19],[[40,18],19],[[41,18],19],[[42,18],19],[[43,18],19],[[33,18],19],[[34,18],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[45,[[10,[8,46]]]],[45,[[10,[26,46]]]],[45,[[10,[27,46]]]],[45,[[10,[21,46]]]],[45,[[10,[28,46]]]],[45,[[10,[31,46]]]],[45,[[10,[32,46]]]],[45,[[10,[8,46]]]],[45,[[10,[26,46]]]],[45,[[10,[27,46]]]],[45,[[10,[21,46]]]],[45,[[10,[28,46]]]],[45,[[10,[31,46]]]],[45,[[10,[32,46]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[10,[14]]]],[1,[[10,[29]]]],[[],[[48,[47]]]],[[],[[48,[47]]]],[[],[[48,[47]]]],[[],[[48,[47]]]],[[],[[48,[47]]]],[[],[[48,[47]]]],[1,16],[[34,49]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[20,16],[[],30],0,[[]],[50],[20,51],[30,51],0,0,0,0,0,0,[[1,52],[[7,[37]]]],[51,33],[[1,52,17],[[7,[37]]]],[30,48],[30,48],[[30,51],48],0,[[40,40],[[48,[53]]]],[[41,41],[[48,[53]]]],0,[29,1],[29,1],[50,16],[[[0,[54,55]]],[[24,[56]]]],[7,[[58,[[7,[57]]]]]],[[[7,[35]]],[[58,[[7,[57]]]]]],[8,44],[[7,8],[[7,[9]]]],[[[7,[37]],8],[[7,[9]]]],[[44,20,33],[[58,[[7,[57]]]]]],0,[30],[[],[[7,[54]]]],[[],[[7,[54]]]],[36,16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[8,45],[[10,[46]]]],[[26,45],[[10,[46]]]],[[27,45],[[10,[46]]]],[[21,45],[[10,[46]]]],[[28,45],[[10,[46]]]],[[31,45],[[10,[46]]]],[[32,45],[[10,[46]]]],[[8,45],[[10,[46]]]],[[26,45],[[10,[46]]]],[[27,45],[[10,[46]]]],[[21,45],[[10,[46]]]],[[28,45],[[10,[46]]]],[[31,45],[[10,[46]]]],[[32,45],[[10,[46]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[1,1],20],[[],20],[[],20],[59,59],[[]],[59,5],[59,5],[59,5],[[59,59],16],[[59,18],19],[[]],[1,59],[[]],[[]],[[],6],[[1,59],[[7,[60]]]],[[1,1]],[[59,1,61],[[7,[60]]]],[[59,1,61,1],[[7,[60]]]],[59,[[24,[5]]]],[[]],[[],10],[[],10],[[],11],[[]],0,[[]],[[]],[62],[[]],0,[[]],[[],6],[[[7,[60]]],62],[20],[[],16],[[],10],[[],10],[[],11],[[]]],"c":[],"p":[[15,"str"],[15,"slice"],[3,"PathBuf"],[3,"CheckBuildLicenses"],[3,"String"],[3,"Request"],[3,"Box"],[3,"Opt"],[8,"Running"],[4,"Result"],[3,"TypeId"],[3,"CheckLicense"],[3,"CheckTodo"],[4,"Scope"],[3,"ModifiedContent"],[15,"bool"],[3,"Path"],[3,"Formatter"],[6,"Result"],[4,"Step"],[3,"RunOakExampleOpt"],[8,"Iterator"],[3,"CargoManifest"],[3,"Vec"],[3,"Command"],[4,"Command"],[3,"Completion"],[3,"BuildClient"],[4,"ServerVariant"],[3,"ServerVariantIter"],[3,"RunTestsOpt"],[3,"RunCargoFuzz"],[3,"Status"],[4,"StatusResultValue"],[3,"SingleStatusResult"],[3,"StepResult"],[3,"Cmd"],[8,"Deserializer"],[3,"CargoBinary"],[4,"Dependency"],[3,"DependencySpec"],[3,"FuzzConfig"],[3,"FuzzableExample"],[3,"Context"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[4,"Option"],[8,"Hasher"],[15,"i32"],[15,"usize"],[8,"IntoIterator"],[4,"Ordering"],[8,"AsyncRead"],[8,"Unpin"],[15,"u8"],[8,"Future"],[3,"Pin"],[3,"App"],[8,"Runnable"],[15,"u16"],[3,"BackgroundStep"],[13,"Single"],[13,"Multiple"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
