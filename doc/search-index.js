var searchIndex = JSON.parse('{\
"benchmark":{"doc":"Oak Functions benchmark example.","t":[5,0,3,3,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["main","proto","BenchmarkRequest","LookupTest","action","benchmark_request","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","iterations","key","ne","ne","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Action","Lookup","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","merge","ne","to_owned","try_from","try_into","type_id","0"],"q":["benchmark","","benchmark::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","benchmark::proto::benchmark_request","","","","","","","","","","","","","","","","","","benchmark::proto::benchmark_request::Action"],"d":["","","A request to execute a benchmark action a specified number …","Container for the key to use when doing a benchmark lookup.","","Nested message and enum types in <code>BenchmarkRequest</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,1,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4],"f":[[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["benchmarkrequest",3]],[[["",0]],["lookuptest",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["benchmarkrequest",3]],["bool",0]],[[["",0],["lookuptest",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,null,[[["",0],["benchmarkrequest",3]],["bool",0]],[[["",0],["lookuptest",3]],["bool",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["action",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["usize",0]],[[["",0],["action",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["option",4],["u32",0],["wiretype",4],["",0],["decodecontext",3]],["result",4,[["decodeerror",3]]]],[[["",0],["action",4]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null],"p":[[3,"BenchmarkRequest"],[3,"LookupTest"],[4,"Action"],[13,"Lookup"]]},\
"channel":{"doc":"","t":[3,6,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Frame","FrameLength","Framed","body","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","read_frame","try_from","try_from","try_into","try_into","type_id","type_id","write_frame"],"q":["channel","","","","","","","","","","","","","","","","","","","",""],"d":["","Length of the entire frame, including the header.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,1,1,2,1,2,1,2,1,2,2,2,1,2,1,2,1,2,2],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["result",6,[["frame",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["frame",3]],["result",6]]],"p":[[3,"Frame"],[3,"Framed"]]},\
"echo":{"doc":"Oak Functions echo example.","t":[5],"n":["main"],"q":["echo"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"grpc_unary_attestation":{"doc":"Remote Attestation handshake protocol implemened using …","t":[0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,0,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11],"n":["client","proto","server","AttestationClient","borrow","borrow_mut","create","from","into","into_request","send","try_from","try_into","type_id","vzip","UnaryRequest","UnaryResponse","body","body","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","into_request","into_request","ne","ne","session_id","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary_session_client","unary_session_server","vzip","vzip","UnarySessionClient","accept_gzip","borrow","borrow_mut","clone","clone_into","connect","fmt","from","into","into_request","message","new","send_gzip","to_owned","try_from","try_into","type_id","vzip","with_interceptor","UnarySession","UnarySessionServer","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","into","into_request","message","new","poll_ready","poll_ready","to_owned","try_from","try_into","type_id","vzip","with_interceptor","AttestationServer","borrow","borrow_mut","create","from","into","into_request","message","try_from","try_into","type_id","vzip"],"q":["grpc_unary_attestation","","","grpc_unary_attestation::client","","","","","","","","","","","","grpc_unary_attestation::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","grpc_unary_attestation::proto::unary_session_client","","","","","","","","","","","","","","","","","","","","grpc_unary_attestation::proto::unary_session_server","","","","","","","","","","","","","","","","","","","","","","","grpc_unary_attestation::server","","","","","","","","","","",""],"d":["","","Server-side implementation of the bidirectional gRPC …","gRPC Attestation Service client implementation.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Sends data encrypted by the <code>Encryptor</code> to the server and …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Links a sequence of messages, declaring them as part of a …","","","","","","","","","Generated client implementations.","Generated server implementations.","","","Service definition for unary communication with the …","Enable decompressing responses with <code>gzip</code>.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Used to send a sequence of a messages for session key …","","Compress requests with <code>gzip</code>.","","","","","","","Generated trait containing gRPC methods that should be …","Service definition for unary communication with the …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Used to send a sequence of a messages for session key …","","","","","","","","","","gRPC Attestation Service implementation.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,3,2,3,2,3,2,3,0,0,2,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,5,5,5,5,5,5,5,5,5,5,5,6,5,5,5,5,5,5,5,5,5,0,7,7,7,7,7,7,7,7,7,7,7],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["str",0],["serveridentityverifier",6]]],[[]],[[]],[[],["request",3]],[[["",0],["vec",3,[["u8",0]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["unaryrequest",3]],[[["",0]],["unaryresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["unaryrequest",3]],["bool",0]],[[["",0],["unaryresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[["",0],["unaryrequest",3]],["bool",0]],[[["",0],["unaryresponse",3]],["bool",0]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[]],[[]],null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["unarysessionclient",3]],[[["",0],["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["request",3]],[[["",0]]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[],["unarysessionclient",3,[["interceptedservice",3]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["request",3]]],[[["",0],["request",3]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["arc",3]]],[[]],[[],["request",3]],[[["",0],["request",3,[["unaryrequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[["",0],["context",3]],["poll",4,[["result",4]]]],[[["",0],["context",3]],["poll",4,[["result",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[],["interceptedservice",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]],["result",6]],[[]],[[]],[[],["request",3]],[[["",0],["request",3,[["unaryrequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"AttestationClient"],[3,"UnaryRequest"],[3,"UnaryResponse"],[3,"UnarySessionClient"],[3,"UnarySessionServer"],[8,"UnarySession"],[3,"AttestationServer"]]},\
"kernel":{"doc":"Main ‘kernel’ for bare-metal Oak Functions.","t":[0,0,5,5,13,8,13,8,4,13,13,13,13,13,10,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,5],"n":["boot","i8042","panic","start_kernel","ACPI","BootInfo","DISABLED","E820Entry","E820EntryType","NVS","PMEM","RAM","RESERVED","UNUSABLE","addr","as_any","as_any_mut","borrow","borrow_mut","e820_table","entry_type","eq","fmt","fmt","from","from_repr","into","into_any","into_any_arc","into_any_rc","protocol","size","to_string","try_from","try_into","type_id","shutdown"],"q":["kernel","","","","kernel::boot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kernel::i8042"],"d":["","","Common panic routine for the kernel. This needs to be …","Main entry point for the kernel, to be called from …","ACPI Reclaim Memory. Available after the OS reads the ACPI …","Generic trait for the boot information data structure …","Memory that is not enabled.","Address range descriptor (known as an E820 entry). As the …","E820 address range types according to Chapter 15 of the …","ACPI NVS memory; in use or reserved by the system.","Persistent memory: must be handled distinct from …","Available RAM usable by the operating system.","In use or reserved by the system.","Memory in which errors have been detected.","Base physical address of the memory range.","","","","","Slice of address range descriptors representing the memory …","Address type of this memory range.","","","","Returns the argument unchanged.","Try to create Self from the raw representation","Calls <code>U::from(self)</code>.","","","","Human-readable name of the boot protocol.","Contiguous length, in bytes, of the memory range.","","","","","Shuts down the machine via i8042. Assumes the VMM exposes …"],"i":[0,0,0,0,1,0,1,0,0,1,1,1,1,1,2,1,1,1,1,3,2,1,1,1,1,1,1,1,1,1,3,2,1,1,1,1,0],"f":[null,null,[[["panicinfo",3]],["never",0]],[[["",0]],["never",0]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["usize",0]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["e820entrytype",4]],[[["",0],["e820entrytype",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["u32",0]],["option",4,[["e820entrytype",4]]]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["",0]],["str",0]],[[["",0]],["usize",0]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[],["never",0]]],"p":[[4,"E820EntryType"],[8,"E820Entry"],[8,"BootInfo"]]},\
"key_value_lookup":{"doc":"Oak Functions key / value lookup example.","t":[5],"n":["main"],"q":["key_value_lookup"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"location_utils":{"doc":"Utilities for finding and comparing longitude- and …","t":[12,3,3,8,17,17,3,6,17,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["0","Angle","CellID","Context","DEFAULT_CUTOFF_RADIUS_RADIANS","LOCATION_SIZE","LatLng","Result","S2_DEFAULT_LEVEL","abs","add","advance","advance_wrap","all_neighbors","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bound_st","bound_uv","cell_id_from_bytes","cell_id_to_bytes","center_face_siti","center_uv","child_begin","child_begin_at_level","child_end","child_end_at_level","child_iter","child_iter_at_level","child_position","children","clone","clone","clone","clone_into","clone_into","clone_into","cmp","common_ancestor_level","contains","context","deg","distance","distance_from_begin","edge_neighbors","eq","eq","face","face_ij_orientation","find_cell","find_covering_cells","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_face","from_face_ij","from_face_pos_level","from_token","hash","immediate_parent","inf","intersects","into","into","into","is_face","is_infinite","is_leaf","is_valid","is_valid","lat","level","lng","location_from_bytes","location_from_degrees","location_to_bytes","lsb","max_tile","mul","ne","ne","new","next","next_wrap","normalized","normalized","parent","partial_cmp","partial_cmp","pos","prev","prev_wrap","rad","range_max","range_min","raw_point","to_owned","to_owned","to_owned","to_string","to_token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertex_neighbors","with_context"],"q":["location_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Angle represents a 1D angle. The internal representation …","CellID uniquely identifies a cell in the S2 cell …","Provides the <code>context</code> method for <code>Result</code>.","The default cutoff radius in radians.","","","<code>Result&lt;T, Error&gt;</code>","The default level to use for S2 Geometry cells. Higher …","abs returns the absolute value of the angle.","","advance advances or retreats the indicated number of steps …","advance_wrap advances or retreats the indicated number of …","all_neighbors returns all neighbors of this cell at the …","","","","","","","bound_st returns the bound of this CellID in (s,t)-space.","bound_uv returns the bound of this CellID in (u,v)-space.","Converts a byte representation to the <code>CellID</code>.","Converts a <code>CellID</code> to a byte representation.","center_face_siti returns the (face, si, ti) coordinates of …","center_uv returns the center of this CellID in …","child_begin returns the first child in a traversal of the …","child_begin_at_level returns the first cell in a traversal …","child_end returns the first cell after a traversal of the …","child_end_at_level returns the first cell after the last …","","","child_position returns the child position (0..3) of this …","children returns the four immediate children of this cell. …","","","","","","","","common_ancestor_level returns the level of the common …","contains returns true iff the CellID contains oci.","Wrap the error value with additional context.","deg returns the angle in degrees.","","distance_from_begin returns the number of steps that this …","edge_neighbors returns the four cells that are adjacent …","","","face returns the cube face for this cell ID, in the range […","face_ij_orientation uses the global lookupIJ table to …","Finds the cell at the given <code>level</code> that covers the <code>location</code>.","Finds the set of S2 cells at the required <code>level</code> that …","","","","","","","converts this ChordAngle to an Angle.","Returns the argument unchanged.","","","","","converts this ChordAngle to an Angle.","","","","","Returns the argument unchanged.","","","","","","","","","returns the center of the s2 cell on the sphere as a …","","Returns the argument unchanged.","from_face returns the cell corresponding to a given S2 …","","from_pos_level returns a cell given its face in the range […","from_token returns a cell given a hex-encoded string of …","","immediate_parent is cheaper than Parent, but assumes …","inf returns an angle larger than any finite angle.","intersects returns true iff the CellID intersects oci.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","is_face returns whether this is a top-level (face) cell.","is_infinite reports whether this Angle is infinite.","is_leaf returns whether this cell ID is at the deepest …","is_valid reports whether ci represents a valid cell.","","","level returns the subdivision level of this cell ID, in …","","Converts a byte representation of a location into a <code>LatLng</code>.","Converts latitude and longitude values in degrees to a …","Converts a <code>LatLng</code> location to a byte representation.","lsb returns the least significant bit that is set.","max_tile returns the largest cell with the same range_min …","","","","","next returns the next cell along the Hilbert curve. This …","next_wrap returns the next cell along the Hilbert curve, …","normalized returns an equivalent angle in [0, 2π).","","parent returns the cell at the given level, which must be …","","","pos returns the position along the Hilbert curve of this …","prev returns the previous cell along the Hilbert curve.","prev_wrap returns the previous cell along the Hilbert …","rad returns the angle in radians.","range_max returns the maximum CellID that is contained …","range_min returns the minimum CellID that is contained …","","","","","","to_token returns a hex-encoded string of the uint64 cell …","","","","","","","","","","vertex_neighbors returns the neighboring cellIDs with …","Wrap the error value with additional context that is …"],"i":[1,0,0,0,0,0,0,0,0,2,2,1,1,1,2,1,3,2,1,3,1,1,0,0,1,1,1,1,1,1,1,1,1,1,2,1,3,2,1,3,1,1,1,4,2,3,1,1,2,1,1,1,0,0,2,1,1,3,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,3,3,3,3,3,1,1,1,1,1,1,2,1,2,1,3,1,2,1,1,3,3,1,3,0,0,0,1,1,2,2,1,3,1,1,2,3,1,2,1,1,1,1,2,1,1,1,2,1,3,1,1,2,1,3,2,1,3,2,1,3,1,4],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["angle",3]],[[["f64",0]],["angle",3]],[[["",0],["i64",0]],["cellid",3]],[[["",0],["i64",0]],["cellid",3]],[[["",0],["u64",0]],["vec",3,[["cellid",3],["global",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["rect",3]],[[["",0]],["rect",3]],[[],["result",6,[["cellid",3]]]],[[["cellid",3]],["vec",3,[["u8",0]]]],[[["",0]]],[[["",0]],["point",3]],[[["",0]],["cellid",3]],[[["",0],["u64",0]],["cellid",3]],[[["",0]],["cellid",3]],[[["",0],["u64",0]],["cellid",3]],[[["",0]],["iter",3]],[[["",0],["u64",0]],["iter",3]],[[["",0],["u64",0]],["u64",0]],[[["",0]]],[[["",0]],["angle",3]],[[["",0]],["cellid",3]],[[["",0]],["latlng",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["cellid",3]],["ordering",4]],[[["",0],["cellid",3]],["option",4,[["u64",0]]]],[[["",0],["cellid",3]],["bool",0]],[[],["result",4,[["error",3]]]],[[["",0]],["f64",0]],[[["",0],["latlng",3]],["angle",3]],[[["",0]],["i64",0]],[[["",0]]],[[["",0],["angle",3]],["bool",0]],[[["",0],["cellid",3]],["bool",0]],[[["",0]],["u8",0]],[[["",0]]],[[["latlng",3],["u8",0]],["result",6,[["cellid",3]]]],[[["latlng",3],["angle",3],["u8",0]],["result",6,[["vec",3,[["cellid",3]]]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["e5",3]],["angle",3]],[[["rad",3]],["angle",3]],[[["chordangle",3]],["angle",3]],[[]],[[["e7",3]],["angle",3]],[[["e7",3]],["angle",3]],[[["deg",3]],["angle",3]],[[["e6",3]],["angle",3]],[[["chordangle",3]],["angle",3]],[[["deg",3]],["angle",3]],[[["e5",3]],["angle",3]],[[["rad",3]],["angle",3]],[[["e6",3]],["angle",3]],[[]],[[["cell",3]],["cellid",3]],[[["cell",3]],["cellid",3]],[[["latlng",3]],["cellid",3]],[[["point",3]],["cellid",3]],[[["latlng",3]],["cellid",3]],[[["point",3]],["cellid",3]],[[["point",3]],["latlng",3]],[[["cellid",3]],["latlng",3]],[[["cellid",3]],["latlng",3]],[[["point",3]],["latlng",3]],[[]],[[["u64",0]],["cellid",3]],[[["u8",0],["i32",0],["i32",0]],["cellid",3]],[[["u64",0],["u64",0],["u64",0]],["cellid",3]],[[["str",0]],["cellid",3]],[[["",0],["",0]]],[[["",0]],["cellid",3]],[[],["angle",3]],[[["",0],["cellid",3]],["bool",0]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,[[["",0]],["u64",0]],null,[[],["result",6,[["latlng",3]]]],[[["f64",0],["f64",0]],["latlng",3]],[[["latlng",3]]],[[["",0]],["u64",0]],[[["",0],["cellid",3]],["cellid",3]],[[["f64",0]],["angle",3]],[[["",0],["angle",3]],["bool",0]],[[["",0],["cellid",3]],["bool",0]],[[["angle",3],["angle",3]],["latlng",3]],[[["",0]],["cellid",3]],[[["",0]],["cellid",3]],[[["",0]],["angle",3]],[[["",0]],["latlng",3]],[[["",0],["u64",0]],["cellid",3]],[[["",0],["angle",3]],["option",4,[["ordering",4]]]],[[["",0],["cellid",3]],["option",4,[["ordering",4]]]],[[["",0]],["u64",0]],[[["",0]],["cellid",3]],[[["",0]],["cellid",3]],[[["",0]],["f64",0]],[[["",0]],["cellid",3]],[[["",0]],["cellid",3]],[[["",0]],["vector",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["u64",0]],["vec",3,[["cellid",3],["global",3]]]],[[],["result",4,[["error",3]]]]],"p":[[3,"CellID"],[3,"Angle"],[3,"LatLng"],[8,"Context"]]},\
"lookup_data_checker":{"doc":"","t":[3,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,11,11,11,11,11],"n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","file_path","fmt","from","from_arg_matches","into","into_app","into_app_for_update","main","parse_lookup_entries","to_owned","try_from","try_into","type_id","update_from_arg_matches"],"q":["lookup_data_checker","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],[[["buf",8]],["result",6,[["hashmap",3,[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]]],"p":[[3,"Opt"]]},\
"lookup_data_generator":{"doc":"","t":[0,5,5,5],"n":["data","generate_and_serialize_random_entries","generate_and_serialize_sparse_weather_entries","generate_and_serialize_weather_entries"],"q":["lookup_data_generator","lookup_data_generator::data","",""],"d":["","Generates random lookup entries with the specified sizes …","Generates a sparse set of random weather lookup entries …","Generates a dense set of random weather lookup entries …"],"i":[0,0,0,0],"f":[null,[[["",0],["usize",0],["usize",0],["usize",0]],["result",6,[["bytesmut",3]]]],[[["",0],["usize",0]],["result",6,[["bytesmut",3]]]],[[["",0]],["result",6,[["bytesmut",3]]]]],"p":[]},\
"metrics":{"doc":"Oak Functions differentially private metrics example.","t":[5],"n":["main"],"q":["metrics"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"metrics_client":{"doc":"Sends 200 requests to the metrics backend alternating …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,11],"n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","from","from_arg_matches","into","into_app","into_app_for_update","into_request","main","to_owned","try_from","try_into","type_id","update_from_arg_matches","uri","vzip"],"q":["metrics_client","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[]],[[],["command",6]],[[],["command",6]],[[],["request",3]],[[],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,[[]]],"p":[[3,"Opt"]]},\
"mobilenet":{"doc":"Oak Functions TensorFlow example, based on the MobilenetV2 …","t":[5],"n":["main"],"q":["mobilenet"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"mobilenet_client":{"doc":"Sends an image to the mobilenet application and checks …","t":[17,17,17,17,5],"n":["BATCH_SIZE","CHANNELS","HEIGHT","WIDTH","main"],"q":["mobilenet_client","","","",""],"d":["","","","",""],"i":[0,0,0,0,0],"f":[null,null,null,null,[[],["result",6]]],"p":[]},\
"oak_attestation_common":{"doc":"","t":[0,5,0,0,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,17,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,12],"n":["certificate","get_sha256","keying_material","report","AddTeeExtension","CertificateAuthority","No","Yes","borrow","borrow","borrow_mut","borrow_mut","create","eq","from","from","get_private_key_pem","get_root_certificate_pem","into","into","key_pair","ne","root_certificate","sign_certificate","try_from","try_from","try_into","try_into","type_id","type_id","0","Assertion","KeyingMaterial","KeyingMaterialBundle","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client_keying_material","clone","clone","clone_into","clone_into","deserialize","deserialize","eq","export","from","from","from","from_string","generate","into","into","into","ne","serialize","serialize","server_keying_material","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","AttestationInfo","Report","TEE_EXTENSION_OID","borrow","borrow","borrow_mut","borrow_mut","certificate","data","default","default","deserialize","deserialize","eq","eq","fmt","fmt","from","from","from_string","into","into","measurement","ne","ne","new","platform_version","report","serialize","serialize","signature","svn","to_extension","to_string","try_from","try_from","try_into","try_into","type_id","type_id","verify","version"],"q":["oak_attestation_common","","","","oak_attestation_common::certificate","","","","","","","","","","","","","","","","","","","","","","","","","","oak_attestation_common::certificate::AddTeeExtension","oak_attestation_common::keying_material","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_attestation_common::report","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Computes a SHA-256 digest of <code>input</code> and returns it in a …","","","Indicates whether to add a custom TEE extension to a …","Convenience structure for generating X.509 certificates.","","Enum value contains a PEM encoded TEE Provider’s X.509 …","","","","","Generates a root X.509 certificate and a corresponding …","","Returns the argument unchanged.","Returns the argument unchanged.","Get RSA key pair encoded in PEM format.","Get a root X.509 certificate encoded in PEM format.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generates an X.509 certificate based on the certificate …","","","","","","","","Assertion used for remote attestation.","Value uniquely derived from the TLS master secret that is …","Convenience structure for exporting keying material with …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generates assertion by putting <code>keying_material</code> into a TEE …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Verify remote attestation assertion by verifying the TEE …","Convenience struct for representing X.509 TEE extensions …","Placeholder implementation of TEE report for remote …","","","","","","Provider’s PEM encoded X.509 certificate that signs TEE …","Arbitrary data to put into the TEE report.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","TEE measurement, i.e. VM hash.","","","Placeholder function for collecting TEE measurement of …","The installed version of firmware.","TEE report.","","","Signature of this report.","Security version number of SNP firmware.","Serializes <code>AttestationInfo</code> into a custom <code>X509Extension</code>.","","","","","","","","Verifies that <code>AttestationInfo::report</code> is signed by …","Version number of this attestation report."],"i":[0,0,0,0,0,0,1,1,2,1,2,1,2,1,2,1,2,2,2,1,2,1,2,2,2,1,2,1,2,1,3,0,0,0,4,5,6,4,5,6,6,5,6,5,6,4,5,5,6,4,5,6,4,4,4,5,6,5,4,5,6,5,6,4,4,5,6,4,5,6,4,5,6,4,0,0,0,7,8,7,8,8,7,7,8,7,8,7,8,7,8,7,8,8,7,8,7,7,8,7,7,8,7,8,7,7,8,8,7,8,7,8,7,8,8,7],"f":[null,[[],["vec",3,[["u8",0]]]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["addteeextension",4]],["result",6]],[[["",0],["addteeextension",4]],["bool",0]],[[]],[[]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[]],[[]],null,[[["",0],["addteeextension",4]],["bool",0]],null,[[["",0],["x509req",3],["addteeextension",4]],["result",6,[["x509",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["keyingmaterial",3]],[[["",0]],["keyingmaterialbundle",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["result",4]],[[],["result",4]],[[["",0],["keyingmaterial",3]],["bool",0]],[[["connectioncommon",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["result",6]],[[["keyingmaterial",3]],["result",6]],[[]],[[]],[[]],[[["",0],["keyingmaterial",3]],["bool",0]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[["",0]]],[[["",0]]],[[["",0]],["result",6,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["keyingmaterial",3]],["result",6]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[],["report",3]],[[],["attestationinfo",3]],[[],["result",4]],[[],["result",4]],[[["",0],["report",3]],["bool",0]],[[["",0],["attestationinfo",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["str",0]],["result",6]],[[]],[[]],null,[[["",0],["report",3]],["bool",0]],[[["",0],["attestationinfo",3]],["bool",0]],[[]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,[[["",0]],["result",6,[["x509extension",3]]]],[[["",0]],["result",6,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6]],null],"p":[[4,"AddTeeExtension"],[3,"CertificateAuthority"],[13,"Yes"],[3,"Assertion"],[3,"KeyingMaterial"],[3,"KeyingMaterialBundle"],[3,"Report"],[3,"AttestationInfo"]]},\
"oak_functions":{"doc":"SDK functionality that provides idiomatic Rust wrappers …","t":[5,14,5,5,5,5,5,5,5,5,5],"n":["alloc","log","read_request","report_event","report_metric","result_from_status","storage_get_item","testing","tf_model_infer","write_log_message","write_response"],"q":["oak_functions","","","","","","","","","",""],"d":["","Logs a debug message.","Reads and returns the user request.","Reports an event for a count-based metrics bucket.","Reports a metric value for a sum-based metrics bucket.","Convert a status returned from a host function call to a …","Looks up an item from the in-memory lookup store.","Calls the testing extension with the given request. The …","Performs inference for the given input vector with the …","Writes a debug log message.","Write the response."],"i":[0,0,0,0,0,0,0,0,0,0,0],"f":[[[["u32",0]]],null,[[],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[["asref",8,[["str",0]]]],["result",4,[["result",4,[["reportmetricerror",4]]],["oakstatus",4]]]],[[["asref",8,[["str",0]]],["i64",0]],["result",4,[["result",4,[["reportmetricerror",4]]],["oakstatus",4]]]],[[["i32",0]],["result",4,[["oakstatus",4]]]],[[],["result",4,[["option",4,[["vec",3,[["u8",0]]]]],["oakstatus",4]]]],[[],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[],["result",4,[["result",4,[["inference",3],["tfmodelinfererror",4]]],["oakstatus",4]]]],[[["asref",8,[["str",0]]]],["result",4,[["oakstatus",4]]]],[[],["result",4,[["oakstatus",4]]]]],"p":[]},\
"oak_functions_abi":{"doc":"Type, constant and Wasm host function definitions for the …","t":[13,13,13,13,13,13,4,3,3,3,4,4,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,0,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,12,12,13,3,3,13,13,13,13,4,3,13,13,13,13,13,4,13,13,13,3,3,3,3,4,13,13,13,13,13,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["BadTensorFlowModelInput","Blackhole","Echo","Echo","ErrorDecodingInference","ProxyAlreadyConsumed","ReportMetricError","ReportMetricRequest","ReportMetricResponse","StorageGetItemResponse","TestingRequest","TestingResponse","TfModelInferError","TfModelInferResponse","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","invoke","label","proto","read_request","result","result","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","write_response","0","0","0","BadRequest","ConfigurationInfo","Entry","ErrInternal","ErrInvalidArgs","ErrInvalidHandle","ErrSerializing","ExtensionHandle","Inference","InternalServerError","InvalidHandle","LoggingHandle","LookupHandle","MetricsHandle","OakStatus","Ok","PolicySizeViolation","PolicyTimeViolation","PrivateMetricsConfig","Request","Response","ServerPolicy","StatusCode","Success","TestingHandle","TfHandle","Unspecified","Unspecified","batch_size","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","constant_processing_time_ms","constant_response_size_bytes","create","default","default","default","default","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","epsilon","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_i32","from_i32","from_i32","hash","hash","hash","inference_vec","into","into","into","into","into","into","into","into","into","into","is_valid","is_valid","is_valid","key","length","metrics","ml_inference","ne","ne","ne","ne","ne","ne","ne","partial_cmp","partial_cmp","partial_cmp","policy","set_status","shape","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","wasm_hash"],"q":["oak_functions_abi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_abi::TestingRequest","","oak_functions_abi::TestingResponse","oak_functions_abi::protod":["","","","","","","","Holds the <code>label</code> and the <code>value</code> to report a metric.","","Holds the optional value from the storage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","See <code>invoke</code>.","","","See <code>read_request</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","See <code>write_response</code>.","","","","Indicates a problem with the request. Similar to HTTP 400 …","Configuration information that should be provided to the …","An individual entry to be made available for lookup to an …","Internal error, e.g. serializing the response in the Oak …","Arguments invalid, e.g. deserializing the request in the …","Error when the given number is not a valid handle.","Error when serializing the request or deserializing the …","The <code>ExtensionHandle</code> indicates which extension to invoke in …","The inference from a TensorFlow model, containing an …","Indicates other internal errors at the server. Similar to …","","","","","Status values exchanged as i32 values across the Node Wasm …","Success.","Indicates violation of the response size limit specified …","Indicates violation of the response processing-time limit …","Configuration for differentially private metrics.","Represents a request sent to an Oak Functions application. …","Represents the response from an Oak Functions application. …","","Status codes for the response.","Indicates success of the operation. Similar to HTTP 200 …","Handle for an extension used for testing Wasm modules.","","","","The number of requests that will be aggregated into each …","Returns the body of the response, excluding any trailing …","The body of the request.","The body of the response generated by the Wasm module, in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A fixed response time, in milliseconds.","A fixed size for responses returned by the trusted runtime.","Creates a new instance of Response.","","","","","","","","","","","","","","","","","","The privacy budget.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>ExtensionHandle</code>, or <code>None</code> if <code>value</code> is …","Converts an <code>i32</code> to a <code>OakStatus</code>, or <code>None</code> if <code>value</code> is not a …","Converts an <code>i32</code> to a <code>StatusCode</code>, or <code>None</code> if <code>value</code> is not a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>ExtensionHandle</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>OakStatus</code>.","Returns <code>true</code> if <code>value</code> is a variant of <code>StatusCode</code>.","","The effective length of the body, excluding any trailing …","Server-side configuration for differentially private …","Whether machine learning inference using a TensorFlow …","","","","","","","","","","","The validated server-side policy.","Sets <code>status</code> to the provided enum value.","","Returns the enum value of <code>status</code>, or the default if the …","Status code indicating the success or failure of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Hash of the loaded Wasm module."],"i":[1,2,2,3,1,4,0,0,0,0,0,0,0,0,5,6,4,7,1,8,2,3,5,6,4,7,1,8,2,3,5,6,4,7,1,8,2,3,4,1,5,6,4,7,1,8,2,3,5,6,4,7,1,8,2,3,0,6,0,0,7,8,5,6,4,7,1,8,2,3,5,6,4,7,1,8,2,3,5,6,4,7,1,8,2,3,5,6,4,7,1,8,2,3,5,6,0,9,10,11,12,0,0,13,13,13,13,0,0,12,14,14,14,14,0,13,12,12,0,0,0,0,0,12,14,14,13,12,15,16,17,16,18,19,20,15,14,13,21,17,16,12,18,19,20,15,14,13,21,17,16,12,18,19,20,15,21,17,16,18,19,20,15,14,13,21,17,16,12,18,19,20,15,14,13,21,17,16,12,14,13,12,20,20,16,18,19,20,15,14,13,21,17,16,12,18,19,20,15,21,17,16,15,18,19,20,15,14,13,21,17,16,12,18,19,20,15,14,13,21,17,16,12,18,19,20,15,14,13,21,17,16,12,14,13,12,14,13,12,18,18,19,20,15,14,13,21,17,16,12,14,13,12,21,16,19,19,18,19,20,15,21,17,16,14,13,12,19,16,18,16,16,18,19,20,15,14,13,21,17,16,12,18,19,20,15,14,13,21,17,16,12,18,19,20,15,14,13,21,17,16,12,18,19,20,15,14,13,21,17,16,12,21,19],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",4,[["tryfrominterror",3]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["inference",3]],[[["",0]],["configurationinfo",3]],[[["",0]],["serverpolicy",3]],[[["",0]],["privatemetricsconfig",3]],[[["",0]],["extensionhandle",4]],[[["",0]],["oakstatus",4]],[[["",0]],["entry",3]],[[["",0]],["request",3]],[[["",0]],["response",3]],[[["",0]],["statuscode",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["extensionhandle",4]],["ordering",4]],[[["",0],["oakstatus",4]],["ordering",4]],[[["",0],["statuscode",4]],["ordering",4]],null,null,[[["statuscode",4],["vec",3,[["u8",0]]]]],[[]],[[]],[[]],[[]],[[],["extensionhandle",4]],[[],["oakstatus",4]],[[]],[[]],[[]],[[],["statuscode",4]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],null,[[["",0],["inference",3]],["bool",0]],[[["",0],["configurationinfo",3]],["bool",0]],[[["",0],["serverpolicy",3]],["bool",0]],[[["",0],["privatemetricsconfig",3]],["bool",0]],[[["",0],["extensionhandle",4]],["bool",0]],[[["",0],["oakstatus",4]],["bool",0]],[[["",0],["entry",3]],["bool",0]],[[["",0],["request",3]],["bool",0]],[[["",0],["response",3]],["bool",0]],[[["",0],["statuscode",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",0]],["option",4,[["extensionhandle",4]]]],[[["i32",0]],["option",4,[["oakstatus",4]]]],[[["i32",0]],["option",4,[["statuscode",4]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",0]],["bool",0]],[[["i32",0]],["bool",0]],[[["i32",0]],["bool",0]],null,null,null,null,[[["",0],["inference",3]],["bool",0]],[[["",0],["configurationinfo",3]],["bool",0]],[[["",0],["serverpolicy",3]],["bool",0]],[[["",0],["privatemetricsconfig",3]],["bool",0]],[[["",0],["entry",3]],["bool",0]],[[["",0],["request",3]],["bool",0]],[[["",0],["response",3]],["bool",0]],[[["",0],["extensionhandle",4]],["option",4,[["ordering",4]]]],[[["",0],["oakstatus",4]],["option",4,[["ordering",4]]]],[[["",0],["statuscode",4]],["option",4,[["ordering",4]]]],null,[[["",0],["statuscode",4]]],null,[[["",0]],["statuscode",4]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[4,"TfModelInferError"],[4,"TestingRequest"],[4,"TestingResponse"],[4,"ReportMetricError"],[3,"StorageGetItemResponse"],[3,"ReportMetricRequest"],[3,"ReportMetricResponse"],[3,"TfModelInferResponse"],[13,"Echo"],[13,"Blackhole"],[13,"Echo"],[4,"StatusCode"],[4,"OakStatus"],[4,"ExtensionHandle"],[3,"PrivateMetricsConfig"],[3,"Response"],[3,"Request"],[3,"Inference"],[3,"ConfigurationInfo"],[3,"ServerPolicy"],[3,"Entry"]]},\
"oak_functions_client":{"doc":"","t":[3,0,11,11,11,11,11,11,11,0,0,11,11,11,11,6,5,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,5,5,5,5,11,11,11,11,11,11,11,11,11],"n":["Client","attestation","borrow","borrow_mut","from","into","into_request","invoke","new","proto","rekor","try_from","try_into","type_id","vzip","ConfigurationVerifier","into_server_identity_verifier","UnaryRequest","UnaryResponse","body","body","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","into_request","into_request","ne","ne","session_id","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary_session_client","vzip","vzip","UnarySessionClient","accept_gzip","borrow","borrow_mut","clone","clone_into","connect","fmt","from","into","into_request","message","new","send_gzip","to_owned","try_from","try_into","type_id","vzip","with_interceptor","Body","Data","GenericSignature","Hash","LogEntry","LogEntryVerification","PublicKey","RekorSignatureBundle","Spec","algorithm","api_version","base64_signature","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalized","content","content","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","get_sha256","hash","integrated_time","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","kind","log_id","log_index","ne","ne","ne","ne","ne","ne","ne","ne","public_key","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","signed_entry_timestamp","spec","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unmarshal_pem_to_p256_public_key","value","verification","verify_rekor_body","verify_rekor_log_entry","verify_rekor_signature","verify_signature","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["oak_functions_client","","","","","","","","","","","","","","","oak_functions_client::attestation","","oak_functions_client::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_client::proto::unary_session_client","","","","","","","","","","","","","","","","","","","","oak_functions_client::rekor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","This module provides structs for representing a Rekor …","","","","","","Creates a <code>ServerIdentityVerifier</code> from the given …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Links a sequence of messages, declaring them as part of a …","","","","","","","","","Generated client implementations.","","","Service definition for unary communication with the …","Enable decompressing responses with <code>gzip</code>.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Used to send a sequence of a messages for session key …","","Compress requests with <code>gzip</code>.","","","","","","","Struct representing the body in a Rekor LogEntry.","Struct representing the hashed data in the body of a Rekor …","Struct representing a signature in the body of a Rekor …","Struct representing a hash digest. Based on …","Struct representing a Rekor LogEntry. Based on …","Struct representing a verification object in a Rekor …","Struct representing a public key included in the body of a …","Convenient struct for verifying the <code>signedEntryTimestamp</code> …","Struct representing the <code>specs</code> in the body of a Rekor …","","","Base64-encoded signature over the canonicalized JSON …","We cannot directly use the type <code>Body</code> here, since body is …","","","","","","","","","","","","","","","","","","","Canonicalized JSON representation, based on RFC 8785 …","Base64 content that is signed.","Base64 content of a public key.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Computes a SHA-256 digest of <code>input</code> and returns it in a …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","This is the SHA256 hash of the DER-encoded public key for …","Minimum: 0","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a PEM-encoded x509/PKIX public key into a …","","Includes a signature over the body, integratedTime, logID, …","Verifies the signature in the <code>body</code> over the <code>contents_bytes</code>…","Verifies a Rekor LogEntry.","Parses <code>log_entry_bytes</code> into a Rekor LogEntry, and verifies …","Verifies the given base64-encoded signature over the given …","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,0,0,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,3,2,3,2,3,2,3,0,2,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,0,5,6,7,8,7,8,6,9,10,5,11,12,13,7,8,6,9,10,5,11,12,13,7,11,12,9,8,6,9,10,5,11,12,13,8,6,9,10,5,11,12,13,8,6,9,10,5,11,12,13,11,7,8,6,9,10,5,11,12,13,0,10,8,7,8,6,9,10,5,11,12,13,7,8,6,9,10,5,11,12,13,6,8,8,8,6,9,10,5,11,12,13,11,8,6,9,10,5,11,12,13,9,13,6,7,7,8,6,9,10,5,11,12,13,7,8,6,9,10,5,11,12,13,7,8,6,9,10,5,11,12,13,0,5,8,0,0,0,0,7,8,6,9,10,5,11,12,13],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["request",3]],[[["",0],["request",3]]],[[["str",0],["configurationverifier",6]]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["configurationverifier",6]],["serveridentityverifier",6]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["unaryrequest",3]],[[["",0]],["unaryresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["unaryrequest",3]],["bool",0]],[[["",0],["unaryresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[["",0],["unaryrequest",3]],["bool",0]],[[["",0],["unaryresponse",3]],["bool",0]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["unarysessionclient",3]],[[["",0],["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["request",3]],[[["",0]]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[],["unarysessionclient",3,[["interceptedservice",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0],["logentry",3]],["bool",0]],[[["",0],["body",3]],["bool",0]],[[["",0],["spec",3]],["bool",0]],[[["",0],["data",3]],["bool",0]],[[["",0],["hash",3]],["bool",0]],[[["",0],["genericsignature",3]],["bool",0]],[[["",0],["publickey",3]],["bool",0]],[[["",0],["logentryverification",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],null,null,null,[[["",0],["logentry",3]],["bool",0]],[[["",0],["body",3]],["bool",0]],[[["",0],["spec",3]],["bool",0]],[[["",0],["data",3]],["bool",0]],[[["",0],["hash",3]],["bool",0]],[[["",0],["genericsignature",3]],["bool",0]],[[["",0],["publickey",3]],["bool",0]],[[["",0],["logentryverification",3]],["bool",0]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],null,null,null,[[],["result",4]],[[["logentry",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",6,[["verifyingkey",6]]]],null,null,[[["body",3]],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Client"],[3,"UnaryRequest"],[3,"UnaryResponse"],[3,"UnarySessionClient"],[3,"Hash"],[3,"Body"],[3,"RekorSignatureBundle"],[3,"LogEntry"],[3,"Spec"],[3,"Data"],[3,"GenericSignature"],[3,"PublicKey"],[3,"LogEntryVerification"]]},\
"oak_functions_extension":{"doc":"","t":[8,8,10,10,10,10],"n":["ExtensionFactory","OakApiNativeExtension","create","get_handle","invoke","terminate"],"q":["oak_functions_extension","","","","",""],"d":["An ExtensionFactory creates a new <code>OakApiNativeExtension</code>.","A OakApiNativeExtension implements new functionality for …","","Gets the <code>ExtensionHandle</code> for this extension.","Invokes the extension with the given request and returns a …","Performs any cleanup or terminating behavior necessary …"],"i":[0,0,1,2,2,2],"f":[null,null,[[["",0]],["result",6,[["box",3,[["oakapinativeextension",8]]]]]],[[["",0]],["extensionhandle",4]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[["",0]],["result",6]]],"p":[[8,"ExtensionFactory"],[8,"OakApiNativeExtension"]]},\
"oak_functions_load_test":{"doc":"","t":[17,17,17,5],"n":["REQUEST","TOTAL_REQUESTS","URL","main"],"q":["oak_functions_load_test","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[null,null,null,[[],["result",6]]],"p":[]},\
"oak_functions_loader":{"doc":"","t":[4,3,13,3,6,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,0,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,6,5,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Data","ExtensionConfigurationInfo","File","LoadLookupDataConfig","OakFunctionsBoxedExtensionFactory","Opt","Url","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","augment_args","augment_args_for_update","base","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config_path","create_base_extension_factories","deserialize","fmt","fmt","from","from","from","from","from_arg_matches","grpc","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_app","into_app_for_update","into_request","into_request","into_request","into_request","lib_main","load_lookup_data","logger","lookup_data","new","new","server","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","vzip","vzip","vzip","vzip","0","0","create_and_start_grpc_server","create_wasm_handler","Logger","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","default","for_test","from","into","into_any","into_any_arc","into_any_rc","into_request","log_public","log_sensitive","new","to_owned","try_from","try_into","type_id","vzip","File","GcpMetadataToken","Http","LookupDataAuth","LookupDataRefresher","LookupDataSource","None","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","fmt","fmt","from","from","from","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_request","into_request","into_request","new","parse_lookup_entries","refresh","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","auth","url","Policy","WasmHandler","apply_policy","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","constant_processing_time","constant_response_size_bytes","deserialize","fmt","from","into","into_any","into_any_arc","into_any_rc","into_request","to_owned","try_from","try_into","type_id","validate","vzip"],"q":["oak_functions_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::Data","","oak_functions_loader::grpc","","oak_functions_loader::logger","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::lookup_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_loader::lookup_data::LookupDataSource","","","oak_functions_loader::server","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Workaround to pass values for ConfigurationInfo from …","Read data file from the local file system. File path is …","Configuration to load the LookupData.","","Command line options for the Oak loader.","Download data file via HTTP GET. Supported URL schemes: …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","gRPC server for Oak Functions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","This crate is just a library so this function does not get …","Creates LookupDataManager and sets up LookupDataRefresher.","","","","","","","","","","","","","","","","","","","","","","","","","","Starts a gRPC server on the given address, serving the <code>main</code>…","Creates a <code>WasmHandler</code> with the given Wasm module, lookup …","A simple logger that splits logging between writing logs …","","","","","","","","Creates a new logger for testing using the debug …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Creates a new logger with the specified maximum <code>LevelFilter</code>…","","","","","","","","","","Utility for periodically refreshing lookup data from a …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Creates a new <code>LookupDataRefresher</code> instance that can …","","Refreshes the entries in the backing data managed by the …","","","","","","","","","","","","","","","","","","Similar to <code>ServerPolicy</code>, but it is used for reading the …","","Runs the given function and applies the given security …","","","","","","","A fixed response time. See …","See <code>Policy::constant_response_size_bytes</code>","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,1,0,0,0,1,2,3,4,1,2,3,4,1,4,4,2,2,3,4,1,2,3,4,1,4,4,4,0,1,4,1,2,3,4,1,4,0,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,4,4,2,3,4,1,0,0,0,0,2,3,0,4,2,3,4,1,2,3,4,1,2,3,4,1,4,2,3,4,1,5,6,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,8,0,0,0,9,10,9,8,10,9,8,10,9,8,10,9,8,9,8,9,8,9,9,9,8,10,9,8,10,9,8,10,9,8,10,9,8,10,9,8,10,9,8,10,0,10,9,8,10,9,8,10,9,8,10,9,8,10,9,8,11,12,12,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[null,null,null,null,null,null,null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[],["extensionconfigurationinfo",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],null,[[["loadlookupdataconfig",3],["logger",3]]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["command",6]],[[],["command",6]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["opt",3],["logger",3],["loadlookupdataconfig",3],["option",4,[["policy",3]]],["vec",3,[["box",3,[["extensionfactory",8]]]]],["extensionconfigurationinfo",3]],["result",6]],[[["loadlookupdataconfig",3],["logger",3]]],null,null,[[["bool",0],["option",4,[["privatemetricsconfig",3]]]]],[[["option",4,[["data",4]]],["option",4,[["duration",3]]],["lookupdataauth",4]],["loadlookupdataconfig",3]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],null,null,[[["socketaddr",4],["wasmhandler",6],["vec",3,[["u8",0]]],["serverpolicy",3],["configurationinfo",3],["future",8],["logger",3]]],[[["vec",3,[["oakfunctionsboxedextensionfactory",6]]],["logger",3]],["result",6,[["wasmhandler",6]]]],null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["logger",3]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[["",0],["level",4],["str",0]]],[[["",0],["level",4],["str",0]]],[[["levelfilter",4]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["lookupdataauth",4]],[[["",0]],["lookupdatasource",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["option",4,[["lookupdatasource",4]]],["arc",3,[["lookupdatamanager",3,[["logger",3]]]]],["logger",3]]],[[["buf",8]],["result",6,[["hashmap",3,[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,[[["serverpolicy",3]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["policy",3]],[[["",0],["",0]]],null,null,[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["result",6,[["serverpolicy",3]]]],[[]]],"p":[[4,"Data"],[3,"ExtensionConfigurationInfo"],[3,"LoadLookupDataConfig"],[3,"Opt"],[13,"Url"],[13,"File"],[3,"Logger"],[4,"LookupDataSource"],[4,"LookupDataAuth"],[3,"LookupDataRefresher"],[13,"File"],[13,"Http"],[3,"Policy"]]},\
"oak_functions_loader_base":{"doc":"The “base” Oak Functions runtime binary, which …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,12,11,11,11,11],"n":["Config","as_any","as_any_mut","borrow","borrow_mut","deserialize","fmt","from","into","into_any","into_any_arc","into_any_rc","into_request","lookup_data","lookup_data_auth","lookup_data_download_period","main","policy","try_from","try_into","type_id","vzip"],"q":["oak_functions_loader_base","","","","","","","","","","","","","","","","","","","","",""],"d":["Runtime Configuration of Base Runtime.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","TODO(#2852): Combine the lookup data specific fields in …","Whether to use the GCP metadata service to obtain an …","How often to refresh the lookup data.","","Security policy guaranteed by the server.","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],"f":[null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],null,null,null,[[],["result",6]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"Config"]]},\
"oak_functions_loader_unsafe":{"doc":"The “unsafe” Oak Functions runtime binary, which does …","t":[3,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,12,5,12,12,12,11,11,11,11],"n":["Config","as_any","as_any_mut","borrow","borrow_mut","deserialize","fmt","from","get_extension_config_info","into","into_any","into_any_arc","into_any_rc","into_request","lookup_data","lookup_data_auth","lookup_data_download_period","main","metrics","policy","tf_model","try_from","try_into","type_id","vzip"],"q":["oak_functions_loader_unsafe","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Runtime Configuration of Unsafe Runtime.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","TODO(#2852): Combine the lookup data specific fields in …","Whether to use the GCP metadata service to obtain an …","How often to refresh the lookup data.","","Differentially private metrics configuration.","Security policy guaranteed by the server.","Configuration for TensorFlow model","","","",""],"i":[0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[]],[[["config",3]],["result",6,[["extensionconfigurationinfo",3]]]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[],["request",3]],null,null,null,[[],["result",6]],null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"Config"]]},\
"oak_functions_lookup":{"doc":"","t":[6,3,3,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Data","LookupData","LookupDataManager","LookupFactory","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create","create_lookup_data","for_test","format_bytes","from","from","from","get","get_handle","into","into","into","invoke","is_empty","len","log_debug","log_error","new_boxed_extension_factory","new_empty","terminate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_data"],"q":["oak_functions_lookup","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Provides access to shared lookup data.","Utility for managing lookup data.","","","","","","","","","Creates a new <code>LookupData</code> instance with a reference to the …","Creates an instance of LookupData populated with the given …","Converts a binary sequence to a string if it is a valid …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets an individual entry from the backing data.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether the backing data is empty.","Gets the number of entries in the backing data.","Logs a debug message.","Logs an error message.","","Creates a new instance with empty backing data.","","","","","","","","","","","Updates the backing data that will be used by new …"],"i":[0,0,0,0,1,2,3,1,2,3,1,2,2,0,1,2,3,3,3,1,2,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,2],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6,[["box",3,[["oakapinativeextension",8]]]]]],[[["",0]],["lookupdata",3]],[[["data",6]]],[[],["string",3]],[[]],[[]],[[]],[[["",0]],["option",4,[["vec",3,[["u8",0]]]]]],[[["",0]],["extensionhandle",4]],[[]],[[]],[[]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],[[["",0],["str",0]]],[[["",0],["str",0]]],[[["arc",3,[["lookupdatamanager",3]]]],["result",6,[["box",3,[["extensionfactory",8]]]]]],[[]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["data",6]]]],"p":[[3,"LookupFactory"],[3,"LookupDataManager"],[3,"LookupData"]]},\
"oak_functions_metrics":{"doc":"","t":[4,13,3,3,3,3,3,13,5,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["BucketConfig","Count","PrivateMetricsAggregator","PrivateMetricsConfig","PrivateMetricsExtension","PrivateMetricsProxy","PrivateMetricsProxyFactory","Sum","add_laplace_noise","batch_size","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buckets","clone","clone_into","create","deserialize","deserialize","epsilon","fmt","fmt","from","from","from","from","from","from","get_handle","into","into","into","into","into","into","invoke","log_debug","log_error","log_warning","new","new","new","new_boxed_extension_factory","publish_metrics","report_metric","report_metric","report_metrics","terminate","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","validate","vzip","vzip","vzip","vzip","vzip","vzip","max","min"],"q":["oak_functions_metrics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_functions_metrics::BucketConfig",""],"d":["Configuration for metrics buckets.","A bucket used for counting of events. This is equivalent …","Aggregator for count- and sum-based differentially private …","Configuration for differentially-private metrics reporting.","","Proxy for use by request handler instances to push …","","A bucket used for summing integer values in a range. …","Adds Laplacian noise with parameter <code>beta</code> scaled by <code>scale</code> …","The number of requests that will be aggregated into each …","","","","","","","","","","","","","The labels and configurations of buckets for which metrics …","","","","","","The privacy budget. See …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Each Oak Functions application can have at most one …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Logs a debug message.","Logs an error message.","Logs a warning message.","","","","","","","Sets the value for the labeled metric. If a value was …","Reports new metrics for a single request that should be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,0,0,0,0,1,0,2,3,4,5,6,2,1,3,4,5,6,2,1,2,1,1,3,2,1,2,2,1,3,4,5,6,2,1,5,3,4,5,6,2,1,5,5,5,5,4,5,6,3,5,5,6,4,5,1,3,4,5,6,2,1,3,4,5,6,2,1,3,4,5,6,2,1,2,3,4,5,6,2,1,7,7],"f":[null,null,null,null,null,null,null,null,[[["stdrng",3],["f64",0],["i64",0],["f64",0]],["i64",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["bucketconfig",4]],[[["",0],["",0]]],[[["",0]],["result",6,[["box",3,[["oakapinativeextension",8]]]]]],[[],["result",4]],[[],["result",4]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["extensionhandle",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[["",0],["str",0]]],[[["",0],["str",0]]],[[["",0],["str",0]]],[[["privatemetricsconfig",3]],["result",6]],[[["privatemetricsproxy",3]]],[[["arc",3,[["mutex",6,[["privatemetricsaggregator",3]]]]]]],[[["privatemetricsconfig",3]],["result",6,[["box",3,[["extensionfactory",8]]]]]],[[["",0]],["result",6]],[[["",0],["reportmetricrequest",3]],["result",6,[["reportmetricerror",4]]]],[[["",0],["str",0],["i64",0]]],[[["",0],["btreemap",3,[["string",3],["i64",0]]]],["option",4]],[[["",0]],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null],"p":[[4,"BucketConfig"],[3,"PrivateMetricsConfig"],[3,"PrivateMetricsProxyFactory"],[3,"PrivateMetricsAggregator"],[3,"PrivateMetricsExtension"],[3,"PrivateMetricsProxy"],[13,"Sum"]]},\
"oak_functions_sdk_abi_test_get_storage_item":{"doc":"Oak Functions ABI test.","t":[5],"n":["main"],"q":["oak_functions_sdk_abi_test_get_storage_item"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"oak_functions_sdk_abi_test_invoke_testing":{"doc":"Oak Functions ABI test for Testing Extension.","t":[5],"n":["main"],"q":["oak_functions_sdk_abi_test_invoke_testing"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"oak_functions_sdk_abi_test_report_metric":{"doc":"Oak Functions ABI Test for Metrics.","t":[5],"n":["main"],"q":["oak_functions_sdk_abi_test_report_metric"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"oak_functions_sdk_abi_test_tf_model_infer":{"doc":"Oak Functions ABI Test for TF on a bad input vector. For a …","t":[5],"n":["main"],"q":["oak_functions_sdk_abi_test_tf_model_infer"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"oak_functions_testing_extension":{"doc":"Extension to support testing.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["TestingFactory","TestingLogger","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create","for_test","from","from","into","into","log_public","log_sensitive","new_boxed_extension_factory","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["oak_functions_testing_extension","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Implemenation of the <code>oak_loggger::OakLogger</code> trait to …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,1,2,1,2,2,2,1,2,1,2,1,2,2,2,1,2,1,2,1,2,1,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["testinglogger",3]],[[["",0],["",0]]],[[["",0]],["result",6,[["box",3,[["oakapinativeextension",8]]]]]],[[]],[[]],[[]],[[]],[[]],[[["",0],["level",4],["str",0]]],[[["",0],["level",4],["str",0]]],[[],["result",6,[["box",3,[["extensionfactory",8]]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"TestingFactory"],[3,"TestingLogger"]]},\
"oak_functions_tf_inference":{"doc":"","t":[6,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,5,12,11,11,11,11,11,11,11,11,11,11,11],"n":["Model","TensorFlowFactory","TensorFlowModel","TensorFlowModelConfig","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","default","deserialize","fmt","from","from","from","get_handle","get_inference","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","invoke","log_error","new","new_boxed_extension_factory","parse_model","path","read_model_from_path","shape","terminate","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["oak_functions_tf_inference","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An optimized TypeModel with <code>TypedFact</code> and <code>TypedOp</code>. If …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Each Oak Functions application can have at most one …","Run the model for the given input and return the resulting …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Logs an error message.","","Creates an instance of TensorFlowFactory, by loading the …","","Path to a TensorFlow model file.","Read a tensorFlow model from the given path, into a byte …","Shape of the input Tensors expected by the model.","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,1,1,2,3,3,3,2,3,1,1,1,2,3,1,2,3,1,2,3,1,2,3,1,1,1,1,2,0,3,0,3,1,1,2,3,1,2,3,1,2,3,1],"f":[null,null,null,null,[[["",0],["private",3]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tensorflowmodel",3]],[[["",0],["",0]]],[[["",0]],["result",6,[["box",3,[["oakapinativeextension",8]]]]]],[[],["tensorflowmodelconfig",3]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["",0]],["extensionhandle",4]],[[["",0]],["result",6,[["inference",3]]]],[[]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[["",0],["str",0]]],[[["arc",3,[["model",6]]],["vec",3,[["u8",0]]]]],[[["bytes",3],["vec",3,[["u8",0]]]],["result",6,[["box",3,[["extensionfactory",8]]]]]],[[["bytes",3]],["result",6,[["model",6]]]],null,[[["str",0]],["result",6,[["bytes",3]]]],null,[[["",0]],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"TensorFlowModel"],[3,"TensorFlowFactory"],[3,"TensorFlowModelConfig"]]},\
"oak_functions_util":{"doc":"","t":[0,6,6,3,11,11,11,11,11,11,11,11,11,11],"n":["sync","Mutex","MutexGuard","SpinLock","borrow","borrow_mut","from","into","lock","try_from","try_into","try_lock","type_id","unlock"],"q":["oak_functions_util","oak_functions_util::sync","","","","","","","","","","","",""],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["bool",0]],[[["",0]],["typeid",3]],[[["",0]]]],"p":[[3,"SpinLock"]]},\
"oak_functions_wasm":{"doc":"Wasm business logic provider based on Wasmi.","t":[17,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ABI_USIZE","AbiExtensionHandle","AbiPointer","AbiPointerOffset","WasmHandler","WasmState","alloc","alloc_and_write_buffer_to_wasm_memory","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","create","from","from","get_memory","handle_invoke","handle_raw_invoke","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","invoke_extension","invoke_index","new","read_buffer_from_wasm_memory","read_request","read_u32_from_wasm_memory","resolve_func","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_buffer_to_wasm_memory","write_response","write_u32_to_wasm_memory"],"q":["oak_functions_wasm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wasm type identifier for position/offset values in linear …","","","","","<code>WasmState</code> holds runtime values for a particular execution …","","Writes the given <code>buffer</code> by allocating <code>buffer.len()</code> Wasm …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Helper function to get memory.","","Handles an invocation using raw bytes and returns the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Invocation of a host function specified by its registered …","","Reads the buffer starting at address <code>buf_ptr</code> with length …","Corresponds to the host ABI function <code>read_request</code>.","","","","","","","","","","Writes the buffer <code>source</code> at the address <code>dest</code> of the Wasm …","Corresponds to the host ABI function <code>write_response</code>.","Writes the u32 <code>value</code> at the <code>address</code> of the Wasm memory."],"i":[0,0,0,0,0,0,1,1,1,2,1,2,1,2,1,2,2,2,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,1,1],"f":[null,null,null,null,null,null,[[["",0],["u32",0]],["abipointer",6]],[[["",0],["vec",3,[["u8",0]]],["abipointer",6],["abipointer",6]],["result",4,[["oakstatus",4]]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["wasmhandler",3]],[[["",0],["",0]]],[[["vec",3,[["box",3,[["extensionfactory",8]]]]]],["result",6]],[[]],[[]],[[["",0]],["memoryref",3]],[[["",0],["request",3]],["result",6,[["response",3]]]],[[["",0],["vec",3,[["u8",0]]]],["result",6,[["vec",3,[["u8",0]]]]]],[[]],[[]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["arc",3]],["arc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["rc",3]],["rc",3,[["any",8]]]],[[["",0],["abiextensionhandle",6],["abipointer",6],["abipointeroffset",6],["abipointer",6],["abipointer",6]],["result",4,[["oakstatus",4]]]],[[["",0],["usize",0],["runtimeargs",3]],["result",4,[["option",4,[["runtimevalue",4]]],["trap",3]]]],[[["module",3],["vec",3,[["u8",0]]],["hashmap",3,[["extensionhandle",4],["box",3,[["oakapinativeextension",8]]]]]],["result",6]],[[["",0],["abipointer",6],["abipointeroffset",6]],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[["",0],["abipointer",6],["abipointer",6]],["result",4,[["oakstatus",4]]]],[[["",0],["abipointer",6]],["result",4,[["u32",0],["oakstatus",4]]]],[[["",0],["str",0],["signature",3]],["result",4,[["funcref",3],["error",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["abipointer",6]],["result",4,[["oakstatus",4]]]],[[["",0],["abipointer",6],["abipointeroffset",6]],["result",4,[["oakstatus",4]]]],[[["",0],["u32",0],["abipointer",6]],["result",4,[["oakstatus",4]]]]],"p":[[3,"WasmState"],[3,"WasmHandler"]]},\
"oak_functions_workload_logging":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["WorkloadLogger","WorkloadLoggingFactory","borrow","borrow","borrow_mut","borrow_mut","create","from","from","get_handle","into","into","invoke","new_boxed_extension_factory","terminate","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["oak_functions_workload_logging","","","","","","","","","","","","","","","","","","","",""],"d":["Wrapper that uses the underlying logger to provide …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,1,2,1,2,1,1,2,2,1,2,2,1,2,1,2,1,2,1,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6,[["box",3,[["oakapinativeextension",8]]]]]],[[]],[[]],[[["",0]],["extensionhandle",4]],[[]],[[]],[[["",0],["vec",3,[["u8",0]]]],["result",4,[["vec",3,[["u8",0]]],["oakstatus",4]]]],[[],["result",6,[["box",3,[["extensionfactory",8]]]]]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"WorkloadLoggingFactory"],[3,"WorkloadLogger"]]},\
"oak_https_attestation":{"doc":"HTTPS Attestation Service implementation.","t":[3,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,5,5,5,0,12,11,11,11,11,11,13,4,13,3,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,12,11,5,5,11,12,11,11,11,11,11,11,11,11,11],"n":["Opt","augment_args","augment_args_for_update","backend_uri","borrow","borrow_mut","clone","clone_into","from","from_arg_matches","https_certificate","https_listen_address","https_private_key","into","into_app","into_app_for_update","load_certificate","load_private_key","main","server","tee_certificate","to_owned","try_from","try_into","type_id","update_from_arg_matches","Attested","ConnectionStatus","NotAttested","Proxy","backend_uri","borrow","borrow","borrow_mut","borrow_mut","client","clone","clone","clone_into","clone_into","connection_status","from","from","generate_server_assertion","get_connection_status","into","into","keying_material_bundle","new","process_request","run_server","set_attested_connection_status","tee_certificate","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_client_assertion"],"q":["oak_https_attestation","","","","","","","","","","","","","","","","","","","","","","","","","","oak_https_attestation::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","HTTPS server that terminates TLS connections and works as …","URI of the backend application to proxy HTTP requests to.","","","","","<code>hyper::Client</code> used to connect to the backend application.","","","","","Status of the current TLS session. <code>Proxy</code> doesn’t proxy …","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Client and server keying material exported from current …","","Proxies HTTPS requests to an HTTP server specified by …","Run HTTPS proxy server that implements HTTPS Attestation …","Sets <code>Proxy::connection_status</code> to <code>ConnectionStatus::Attested</code>…","PEM encoded X.509 certificate that signs TEE firmware key.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,2,0,2,0,3,2,3,2,3,3,2,3,2,3,3,2,3,3,3,2,3,3,3,0,0,3,3,2,3,2,3,2,3,2,3,3],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,null,null,[[]],[[],["command",6]],[[],["command",6]],[[["str",0]],["result",6,[["certificate",3]]]],[[["str",0]],["result",6,[["privatekey",3]]]],[[],["result",6]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["connectionstatus",4]],[[["",0]],["proxy",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["connectionstatus",4]],[[]],[[]],null,[[["uri",3],["client",3,[["httpconnector",3]]],["vec",3,[["u8",0]]],["keyingmaterialbundle",3]]],[[["arc",3,[["proxy",3]]],["request",3,[["body",3]]]]],[[["str",0],["privatekey",3],["certificate",3],["vec",3,[["u8",0]]],["uri",3]]],[[["",0]]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["request",3,[["body",3]]]]]],"p":[[3,"Opt"],[4,"ConnectionStatus"],[3,"Proxy"]]},\
"oak_idl":{"doc":"","t":[4,3,13,13,13,13,13,8,4,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ClientError","Header","InvalidMessage","InvalidMethodId","InvalidRequest","InvalidResponse","InvalidTransactionId","Transport","TransportError","TransportError","TransportMessage","body","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deserialize","deserialize","fmt","fmt","from","from","from","from","from","header","into","into","into","into","invoke","method_id","serialize","serialize","transaction_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","utils","0","Message","MessageBuilder","borrow","borrow","borrow_mut","borrow_mut","buf","default","deref","deref_mut","finish","from","from","from_vec","get","into","into","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["oak_idl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_idl::ClientError","oak_idl::utils","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Header of a transactional message.","","","","","","A message-oriented transport that allows performing …","","","A transactional message.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Identifies the method to be invoked, as defined by the IDL.","","","Identifies the transaction over the underlying transport. …","","","","","","","","","","","","","Utilities for improving the ergonomics of FlatBuffers in …","","An owned flatbuffer message, which owns the underlying …","A helper struct to facilitate building a <code>Message</code>.","","","","","Returns a reference to the underlying owned buffer.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the flatbuffer object, pointing …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,1,2,2,1,0,0,2,0,3,2,1,4,3,2,1,4,3,4,3,2,1,2,2,1,4,3,3,2,1,4,3,5,4,4,3,4,2,1,4,3,2,1,4,3,2,1,4,3,0,6,0,0,7,8,7,8,8,7,7,7,7,7,8,8,8,7,8,7,8,7,8,7,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["transporterror",4]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[["",0],["transportmessage",3]],["result",4,[["transportmessage",3],["transporterror",4]]]],null,[[["",0]],["result",4]],[[["",0]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[]],[[["",0]]],[[["",0]]],[[["wipoffset",3]],["result",4,[["message",3],["invalidflatbuffer",4]]]],[[]],[[]],[[["vec",3,[["u8",0]]]],["result",4,[["invalidflatbuffer",4]]]],[[["",0]]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"TransportError"],[4,"ClientError"],[3,"TransportMessage"],[3,"Header"],[8,"Transport"],[13,"TransportError"],[3,"MessageBuilder"],[3,"Message"]]},\
"oak_idl_gen_services":{"doc":"This crate allows compiling flatbuffer services to Rust in …","t":[5],"n":["compile_services"],"q":["oak_idl_gen_services"],"d":["Compile services from the provided flatbuffer file using …"],"i":[0],"f":[[[["str",0]]]],"p":[]},\
"oak_idl_gen_structs":{"doc":"This crate allows compiling flatbuffer structs and tables …","t":[5],"n":["compile_structs"],"q":["oak_idl_gen_structs"],"d":["Compile structs and tables from the provided flatbuffer …"],"i":[0],"f":[[[["str",0]]]],"p":[]},\
"oak_logger":{"doc":"","t":[13,13,13,4,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11],"n":["Debug","Error","Info","Level","OakLogger","Trace","Warn","as_str","borrow","borrow_mut","clone","clone_into","cmp","eq","eq","fmt","fmt","from","from_str","ge","ge","gt","gt","hash","into","iter","le","le","log_public","log_sensitive","lt","lt","max","partial_cmp","partial_cmp","to_level_filter","to_owned","to_string","try_from","try_into","type_id"],"q":["oak_logger","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The “debug” level.","The “error” level.","The “info” level.","An enum representing the available verbosity levels of the …","","The “trace” level.","The “warn” level.","Returns the string representation of the <code>Level</code>.","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","","","Logs a message that contains only public, non-sensitive …","Logs the message, which might contain sensitive …","","","Returns the most verbose logging level.","","","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","",""],"i":[1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,null,null,null,[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["level",4]],[[["",0],["",0]]],[[["",0],["level",4]],["ordering",4]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["str",0]],["result",4,[["level",4]]]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["",0]]],[[]],[[]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[["",0],["level",4],["str",0]]],[[["",0],["level",4],["str",0]]],[[["",0],["levelfilter",4]],["bool",0]],[[["",0],["level",4]],["bool",0]],[[],["level",4]],[[["",0],["levelfilter",4]],["option",4,[["ordering",4]]]],[[["",0],["level",4]],["option",4,[["ordering",4]]]],[[["",0]],["levelfilter",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"Level"],[8,"OakLogger"]]},\
"oak_proxy_attestation":{"doc":"","t":[0,3,3,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11],"n":["proto","GetRootCertificateRequest","GetRootCertificateResponse","GetSignedCertificateRequest","GetSignedCertificateResponse","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","certificate","certificate_request","clear","clear","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_request","into_request","into_request","into_request","ne","ne","ne","proxy_attestation_client","proxy_attestation_server","root_certificate","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ProxyAttestationClient","accept_gzip","borrow","borrow_mut","clone","clone_into","connect","fmt","from","get_root_certificate","get_signed_certificate","into","into_request","new","send_gzip","to_owned","try_from","try_into","type_id","vzip","with_interceptor","ProxyAttestation","ProxyAttestationServer","borrow","borrow_mut","call","call","clone","clone_into","fmt","from","from_arc","get_root_certificate","get_signed_certificate","into","into_request","new","poll_ready","poll_ready","to_owned","try_from","try_into","type_id","vzip","with_interceptor"],"q":["oak_proxy_attestation","oak_proxy_attestation::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_proxy_attestation::proto::proxy_attestation_client","","","","","","","","","","","","","","","","","","","","","oak_proxy_attestation::proto::proxy_attestation_server","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Generated client implementations.","Generated server implementations.","","","","","","","","","","","","","","","","","","","","","","Service for signing X.509 certificates. …","Enable decompressing responses with <code>gzip</code>.","","","","","Attempt to create a new client by connecting to a given …","","Returns the argument unchanged.","Get root X.509 certificate used by the Proxy Attestation …","Get signed X.509 certificate based on the provided …","Calls <code>U::from(self)</code>.","","","Compress requests with <code>gzip</code>.","","","","","","","Generated trait containing gRPC methods that should be …","Service for signing X.509 certificates. …","","","","","","","","Returns the argument unchanged.","","Get root X.509 certificate used by the Proxy Attestation …","Get signed X.509 certificate based on the provided …","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,3,4,1,2,3,4,2,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,4,0,0,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,6,6,6,6,6,6,6,6,6,7,7,6,6,6,6,6,6,6,6,6,6,6],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["getsignedcertificaterequest",3]],[[["",0]],["getsignedcertificateresponse",3]],[[["",0]],["getrootcertificaterequest",3]],[[["",0]],["getrootcertificateresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["getsignedcertificaterequest",3]],["bool",0]],[[["",0],["getsignedcertificateresponse",3]],["bool",0]],[[["",0],["getrootcertificaterequest",3]],["bool",0]],[[["",0],["getrootcertificateresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["",0],["getsignedcertificaterequest",3]],["bool",0]],[[["",0],["getsignedcertificateresponse",3]],["bool",0]],[[["",0],["getrootcertificateresponse",3]],["bool",0]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,[[]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["proxyattestationclient",3]],[[["",0],["",0]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]]],[[["",0]]],[[]],[[],["request",3]],[[]],[[]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[],["proxyattestationclient",3,[["interceptedservice",3]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["request",3]]],[[["",0],["request",3]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["arc",3]]],[[["",0],["request",3,[["getrootcertificaterequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["request",3,[["getsignedcertificaterequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[],["request",3]],[[]],[[["",0],["context",3]],["poll",4,[["result",4]]]],[[["",0],["context",3]],["poll",4,[["result",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[],["interceptedservice",3]]],"p":[[3,"GetSignedCertificateRequest"],[3,"GetSignedCertificateResponse"],[3,"GetRootCertificateRequest"],[3,"GetRootCertificateResponse"],[3,"ProxyAttestationClient"],[3,"ProxyAttestationServer"],[8,"ProxyAttestation"]]},\
"oak_proxy_attestation_bin":{"doc":"Proxy Attestation Service implementation.","t":[3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11],"n":["Opt","Proxy","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","certificate_authority","clone","clone_into","create","from","from","from_arg_matches","get_root_certificate","get_signed_certificate","grpc_listen_address","grpc_tls_certificate","grpc_tls_private_key","into","into","into_app","into_app_for_update","into_request","into_request","main","tee_certificate","tee_certificate","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","vzip","vzip"],"q":["oak_proxy_attestation_bin","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Sends back root X.509 certificate in PEM format. …","Creates a signed X.509 certificate based on the …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,2,1,2,1,2,1,1,2,2,1,1,2,2,1,1,1,2,1,1,1,2,1,0,2,1,1,2,1,2,1,2,1,1,2,1],"f":[null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["opt",3]],[[["",0],["",0]]],[[["vec",3,[["u8",0]]]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["request",3,[["getrootcertificaterequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],[[["",0],["request",3,[["getsignedcertificaterequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],null,null,null,[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["request",3]],[[],["request",3]],[[],["result",6]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]]],"p":[[3,"Opt"],[3,"Proxy"]]},\
"oak_remote_attestation":{"doc":"","t":[0,0,0,0,0,17,3,17,13,17,17,3,4,17,17,17,17,17,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,6,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,3,13,3,13,8,3,13,17,17,4,17,17,17,8,3,13,17,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,3,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,12],"n":["crypto","handshaker","message","proto","report","AEAD_ALGORITHM_KEY_LENGTH","AeadEncryptor","CLIENT_KEY_PURPOSE","Client","KEY_AGREEMENT_ALGORITHM_KEY_LENGTH","KEY_DERIVATION_SALT","KeyNegotiator","KeyNegotiatorType","NONCE_LENGTH","SERVER_KEY_PURPOSE","SHA256_HASH_LENGTH","SIGNATURE_LENGTH","SIGNING_ALGORITHM_KEY_LENGTH","Server","SignatureVerifier","Signer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","create","create_encryptor","decrypt","encrypt","from","from","from","from","from","get_random","get_sha256","into","into","into","into","into","new","public_key","public_key","sign","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","AttestationBehavior","ClientHandshaker","Encryptor","ServerHandshaker","ServerIdentityVerifier","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","contains_peer_attestation","contains_self_attestation","create_attestation_info","create_bidirectional_attestation","create_client_hello","create_peer_attestation","create_self_attestation","decrypt","encrypt","fmt","from","from","from","from","get_encryptor","get_encryptor","get_expected_tee_measurement","get_signer","get_tee_certificate","into","into","into","into","is_aborted","is_aborted","is_completed","is_completed","new","new","new","next_step","next_step","serialize_protobuf","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify_attestation_info","ClientHello","ClientHello","ClientIdentity","ClientIdentity","Deserializable","EncryptedData","EncryptedData","MAXIMUM_MESSAGE_SIZE","MESSAGE_HEADER_LENGTH","MessageWrapper","PROTOCOL_VERSION","PROTOCOL_VERSION_LENGTH","REPLAY_PROTECTION_ARRAY_LENGTH","Serializable","ServerIdentity","ServerIdentity","VEC_SIZE_PREFIX_LENGTH","additional_info","attestation_info","attestation_info","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_transcript_signature","clear_transcript_signature","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","data","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_message","ephemeral_public_key","ephemeral_public_key","eq","eq","eq","eq","eq","fmt","fmt","from","from","from","from","from","into","into","into","into","into","ne","ne","ne","ne","ne","new","new","new","new","nonce","random","random","serialize","serialize","serialize","serialize","serialize","set_transcript_signature","set_transcript_signature","signing_public_key","signing_public_key","to_owned","to_owned","to_owned","to_owned","transcript_signature","transcript_signature","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","version","0","0","0","0","AttestationInfo","AttestationReport","borrow","borrow","borrow_mut","borrow_mut","certificate","clear","clear","clone","clone","clone_into","clone_into","data","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","measurement","ne","ne","new","platform_version","report","signature","svn","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version"],"q":["oak_remote_attestation","","","","","oak_remote_attestation::crypto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_remote_attestation::handshaker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_remote_attestation::message","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_remote_attestation::message::MessageWrapper","","","","oak_remote_attestation::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Implementation of Authenticated Encryption with Associated …","Purpose string used for deriving client session keys with …","Defines a key negotiator which provides client session key …","","Salt used for key derivation with HKDF. …","Implementation of the X25519 Elliptic Curve Diffie-Hellman …","Defines the type of key negotiator and the set of session …","Length of the encryption nonce. <code>ring::aead</code> uses 96-bit …","Purpose string used for deriving server session keys with …","","IEEE-P1363 encoded ECDSA-P256 signature length. …","OpenSSL ECDSA-P256 key public key length, which is …","Defines a key negotiator which provides server session key …","","","","","","","","","","","","","","","","","Derives session keys from self and peer public keys and …","Decrypts and authenticates <code>data</code> using …","Encrypts <code>data</code> using <code>AeadEncryptor::encryption_key</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates a random vector of <code>size</code> bytes.","Computes a SHA-256 digest of <code>input</code> and returns it in a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Verifies the signature validity.","Defines the behavior of the remote attestation protocol. …","Client of the remote attestation protocol handshake.","","Server of the remote attestation protocol handshake.","","","","","","","","","","","","Generates attestation info with a TEE report. TEE report …","Represents an attestation process, where current machine …","Initializes the remote attestation handshake by creating a …","Represents an attestation process, where current machine …","Represents an attestation process, where current machine …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates <code>ClientHandshaker</code> with <code>Initializing</code> state.","Creates <code>ServerHandshaker</code> with …","","Processes incoming <code>message</code> and returns a serialized remote …","Processes incoming <code>message</code> and returns a serialized remote …","","","","","","","","","","","","","","Verifies the validity of the attestation info:","Initial message that starts remote attestation handshake.","","Client identity message containing remote attestation …","","","Message containing data encrypted using a session key.","","Maximum handshake message size is set to be equal to 1KiB.","Length (in bytes) of a message header.","Convenience struct that wraps attestation messages.","Remote attestation protocol version.","Length (in bytes) of the protocol version.","Length (in bytes) of the random vector sent in messages …","","Server identity message containing remote attestation …","","Length (in bytes) of the prefix that is used for …","Additional info to be checked when verifying the identity. …","Information used for remote attestation such as a TEE …","Information used for remote attestation such as a TEE …","","","","","","","","","","","","","","","","","","","","","Data encrypted using the session key.","","","","","","Deserializes an attestation message from a serialized <code>input</code>…","Public key needed to establish a session key.","Public key needed to establish a session key.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Random nonce (initialization vector) used for …","Random vector sent in messages for preventing replay …","Random vector sent in messages for preventing replay …","","","","","","","","Public key used to sign transcripts.","Public key used to sign transcripts.","","","","","Signature of the SHA-256 hash of all previously sent and …","Signature of the SHA-256 hash of all previously sent and …","","","","","","","","","","","","","","","","Remote attestation protocol version.","","","","","","","","","","","","","","","","","","Arbitrary data to put into the TEE report.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","TEE measurement, i.e. VM hash.","","","Placeholder function for collecting TEE measurement of …","The installed version of firmware.","","Signature of this report.","Security version number of SNP firmware.","","","","","","","","","Version number of this attestation report."],"i":[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,2,3,4,5,1,2,3,4,5,1,1,1,3,4,3,2,2,2,3,4,5,1,0,0,2,3,4,5,1,5,3,4,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,5,0,0,0,0,0,6,7,8,9,6,7,8,9,9,9,0,9,6,9,9,8,8,9,6,7,8,9,6,7,9,9,9,6,7,8,9,6,7,6,7,6,7,8,6,7,0,6,7,8,9,6,7,8,9,6,7,8,9,0,0,10,0,10,0,0,10,0,0,0,0,0,0,0,0,10,0,11,11,12,10,13,11,12,14,10,13,11,12,14,11,12,13,11,12,14,13,11,12,14,14,15,13,11,12,14,0,11,12,10,13,11,12,14,10,14,10,13,11,12,14,10,13,11,12,14,10,13,11,12,14,13,11,12,14,14,13,11,16,13,11,12,14,11,12,11,12,13,11,12,14,11,12,10,13,11,12,14,10,13,11,12,14,10,13,11,12,14,11,17,18,19,20,0,0,21,22,21,22,22,21,22,21,22,21,22,21,21,22,21,22,21,22,21,22,21,22,21,22,21,21,22,21,21,22,21,21,21,22,21,22,21,22,21,22,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["keynegotiatortype",4]],[[["",0],["",0]]],[[["keynegotiatortype",4]],["result",6]],[[],["result",6]],[[],["result",6,[["aeadencryptor",3]]]],[[["",0],["encrypteddata",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["encrypteddata",3]]]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["signer",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[],["result",6]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[]],[[],["result",6]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",6,[["encryptor",3]]]],[[],["result",6,[["encryptor",3]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["attestationbehavior",3],["serveridentityverifier",6]]],[[["attestationbehavior",3],["arc",3,[["vec",3,[["u8",0]]]]]]],[[["aeadencryptor",3]]],[[["",0]],["result",6,[["option",4,[["vec",3,[["u8",0]]]]]]]],[[["",0]],["result",6,[["option",4,[["vec",3,[["u8",0]]]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["clienthello",3]],[[["",0]],["serveridentity",3]],[[["",0]],["clientidentity",3]],[[["",0]],["encrypteddata",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6,[["messagewrapper",4]]]],null,null,[[["",0],["messagewrapper",4]],["bool",0]],[[["",0],["clienthello",3]],["bool",0]],[[["",0],["serveridentity",3]],["bool",0]],[[["",0],["clientidentity",3]],["bool",0]],[[["",0],["encrypteddata",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["messagewrapper",4]],["bool",0]],[[["",0],["clienthello",3]],["bool",0]],[[["",0],["serveridentity",3]],["bool",0]],[[["",0],["clientidentity",3]],["bool",0]],[[["",0],["encrypteddata",3]],["bool",0]],[[]],[[["vec",3,[["u8",0]]],["arc",3,[["vec",3,[["u8",0]]]]]]],[[["vec",3,[["u8",0]]]]],[[["vec",3,[["u8",0]]]]],null,null,null,[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]]],[[["",0]]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]]],[[["",0]]],[[["",0]],["attestationreport",3]],[[["",0]],["attestationinfo",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["attestationreport",3]],["bool",0]],[[["",0],["attestationinfo",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["",0],["attestationreport",3]],["bool",0]],[[["",0],["attestationinfo",3]],["bool",0]],[[]],null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"KeyNegotiatorType"],[3,"AeadEncryptor"],[3,"KeyNegotiator"],[3,"Signer"],[3,"SignatureVerifier"],[3,"ClientHandshaker"],[3,"ServerHandshaker"],[3,"Encryptor"],[3,"AttestationBehavior"],[4,"MessageWrapper"],[3,"ServerIdentity"],[3,"ClientIdentity"],[3,"ClientHello"],[3,"EncryptedData"],[8,"Deserializable"],[8,"Serializable"],[13,"ClientHello"],[13,"ServerIdentity"],[13,"ClientIdentity"],[13,"EncryptedData"],[3,"AttestationReport"],[3,"AttestationInfo"]]},\
"oak_remote_attestation_sessions":{"doc":"Logic for performing remote attestation in multiple …","t":[13,13,17,3,6,4,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12],"n":["EncryptedMessageExchange","HandshakeInProgress","SESSION_ID_LENGTH","SerializeableRequest","SessionId","SessionState","SessionTracker","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create","from","from","from","into","into","into","pop_or_create_session_state","put_session_state","session_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0"],"q":["oak_remote_attestation_sessions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","oak_remote_attestation_sessions::SessionState",""],"d":["","","","","","","Maintains remote attestation state for a number of sessions","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes remote attestation state of an existing session. …","Record a session in the tracker. Unlike …","","","","","","","","","","","","",""],"i":[1,1,0,0,0,0,0,2,1,3,2,1,3,2,3,1,3,2,1,3,2,3,3,2,1,3,2,2,1,3,2,1,3,2,4,5],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0],["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["sessionid",6]],["result",6,[["sessionstate",4]]]],[[["",0],["sessionid",6],["sessionstate",4]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[4,"SessionState"],[3,"SerializeableRequest"],[3,"SessionTracker"],[13,"HandshakeInProgress"],[13,"EncryptedMessageExchange"]]},\
"oak_tls_attestation":{"doc":"TLS Attestation Service implementation.","t":[3,11,11,12,11,11,11,11,11,11,12,11,11,11,5,0,12,11,11,11,11,11,3,3,12,11,11,11,11,12,11,11,11,11,11,11,12,5,5,11,11,11,11,11,11],"n":["Opt","augment_args","augment_args_for_update","backend_uri","borrow","borrow_mut","clone","clone_into","from","from_arg_matches","https_listen_address","into","into_app","into_app_for_update","main","server","tee_certificate","to_owned","try_from","try_into","type_id","update_from_arg_matches","HyperAcceptor","Identity","acceptor","borrow","borrow","borrow_mut","borrow_mut","certificate","create","from","from","into","into","poll_accept","private_key","proxy","run_server","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["oak_tls_attestation","","","","","","","","","","","","","","","","","","","","","","oak_tls_attestation::server","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Convenience structure for representing TLS identities that …","","","","","","","Generates private key and TLS certificate that contains …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proxies HTTPS requests to an HTTP server specified by <code>uri</code>.","Runs HTTPS proxy server that provides self-signed TLS …","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,2,3,2,3,2,3,3,3,2,3,2,2,3,0,0,3,2,3,2,3,2],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["vec",3,[["u8",0]]]],["result",6]],[[]],[[]],[[]],[[]],[[["pin",3],["context",3]],["poll",4,[["option",4,[["result",4]]]]]],null,[[["request",3,[["body",3]]],["client",3,[["httpconnector",3]]],["uri",3]]],[[["str",0],["uri",3],["vec",3,[["u8",0]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Opt"],[3,"HyperAcceptor"],[3,"Identity"]]},\
"oak_utils":{"doc":"","t":[3,3,8,3,11,11,11,11,11,11,12,12,5,5,11,11,11,12,12,12,11,11,11,5,12,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11],"n":["CodegenOptions","ExternPath","LogError","ProtoOptions","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_client","build_server","compile_protos","compile_protos_with_options","default","default","default","derive_handle_visit","experimental_async","extern_paths","from","from","from","generate_grpc_code","generate_services","into","into","into","log_error","new","out_dir_override","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["oak_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Options for building gRPC code.","","Trait for logging error messages","Options for generating Protocol buffer Rust types.","","","","","","","Specify whether to build client related code.","Specify whether to build server related code.","Build Rust code corresponding to a set of protocol buffer …","Like <code>compile_protos</code>, but allows for configuring options …","","","","Automatically derive the <code>HandleVisit</code> trait from the Oak …","Enable service code generated for the async SDK.","Specify externally provided Protobuf packages or types.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate gRPC code from Protobuf using <code>tonic</code> library.","Generate Oak-specific service code for inter-node …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,1,2,3,2,2,0,0,1,2,3,1,1,2,1,2,3,0,1,1,2,3,4,3,1,1,2,3,1,2,3,1,2,3],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[["protooptions",3]]],[[],["protooptions",3]],[[],["codegenoptions",3]],[[],["externpath",3]],null,null,null,[[]],[[]],[[]],[[["str",0],["codegenoptions",3]],["result",6]],null,[[]],[[]],[[]],[[["",0],["str",0]]],[[["str",0],["str",0]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"ProtoOptions"],[3,"CodegenOptions"],[3,"ExternPath"],[8,"LogError"]]},\
"offline_attestation_client":{"doc":"","t":[17,3,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,12,11,12,12,11,11,11,11,11,11,11,11,12,11,11],"n":["ECHO_PATH","Opt","PUBLIC_KEY_INFO_PATH","RequestHelper","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","decrypt_response","from","from","from_arg_matches","generate_encrypted_request","into","into","into_app","into_app_for_update","main","message","message","new","private_key_handle","server_public_key_handle","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","url","vzip","vzip"],"q":["offline_attestation_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Utility for creating encrypted requests and decrypting the …","","","","","","","","","Consumes the helper and decrypts the encrypted response …","Returns the argument unchanged.","Returns the argument unchanged.","","Generates an encrypted request to send to the server.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The clear-text message to encrypt as part of the request.","","Creates a new instance for handling a single …","Handle to private key for decrypting the server’s …","Handle to the server’s public key for encrypting …","","","","","","","","","","",""],"i":[0,0,0,0,1,1,2,1,2,1,1,1,2,2,1,1,2,2,1,1,1,0,2,1,2,2,2,1,2,1,2,1,2,1,1,1,2,1],"f":[null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[["encryptedresponse",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["",0]],["result",6,[["encryptedrequest",3]]]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],null,null,[[["publickeyinfo",3]],["result",6]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]]],"p":[[3,"Opt"],[3,"RequestHelper"]]},\
"offline_attestation_server":{"doc":"","t":[17,3,17,11,11,11,11,11,11,5,5,11,11,11,5,5,5,11,11,11,5,12,11,11,11,11,11,11],"n":["ECHO_PATH","Opt","PUBLIC_KEY_INFO_PATH","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","create_root_filter","encrypted_echo","fmt","from","from_arg_matches","generate_attestation_report","get_public_key_info","handle","into","into_app","into_app_for_update","main","port","to_owned","try_from","try_into","type_id","update_from_arg_matches","vzip"],"q":["offline_attestation_server","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Creates the root filter that combines the two path filters …","Path filter for “POST /encrypted_echo” with a JSON …","","Returns the argument unchanged.","","","Path filter for “GET /public_key_info”.","Handles an encrypted request.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1],"f":[null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[["arc",3,[["handle",3]]],["arc",3,[["publickeyinfo",3]]]]],[[["arc",3,[["handle",3]]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["handle",3]],["result",6,[["attestationreport",3]]]],[[["arc",3,[["publickeyinfo",3]]]]],[[["encryptedrequest",3],["arc",3,[["handle",3]]]],["response",6]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]]],"p":[[3,"Opt"]]},\
"offline_attestation_shared":{"doc":"Shared components used by both the client and server for …","t":[3,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,12,12,5,11,11,11,5,5,5,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AttestationReport","EncryptedRequest","EncryptedResponse","Handle","PublicKeyInfo","attestation","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ciphertext","ciphertext","decrypt","deserialize","deserialize","deserialize","deserialize_attestation_report","deserialize_public_key","encrypt","fmt","from","from","from","from","from","generate_private_key","get_public_key_handle","get_public_key_handle","init","into","into","into","into","into","keyset_info","new","new","new_with_no_secrets","primitives","primitives_with_key_manager","public","read","read_with_associated_data","read_with_no_secrets","request_public_key","response_public_key","serialize","serialize","serialize","serialize_attestation_report","serialize_public_key","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","vzip","vzip","vzip","vzip","vzip","write","write_with_associated_data","write_with_no_secrets"],"q":["offline_attestation_shared","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Placeholder for an attestation report.","An encrypted request sent from the client to the server.","An encrypted response sent from the server to the client.","<code>Handle</code> provides access to a <code>Keyset</code> protobuf, to limit the …","Information about the public key that should be used for …","The binary-serialised attestation report providing …","","","","","","","","","","","The encrypted payload.","The encrypted payload.","Decrypts the provides <code>cyphertext</code> using the private key.","","","","Deserialises the attestation report from a binary …","Deserialises the binary data into a keyset containing the …","Encrypts the clear text <code>data</code> using Tink hybrid encryption.","Return a string representation of the managed keyset. The …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generates a new private key suitable for hybrid encryption …","Deserialises the <code>response_public_key</code> as a keyset handle.","Deserialises the <code>request_publlic_key</code> as a keyset handle.","Initialize the <code>tink-hybrid</code> crate, registering its …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return <code>KeysetInfo</code> representation of the managed keyset. …","Create a keyset handle that contains a single fresh key …","Constructs a new <code>PublicKeyInfo</code> instance from the public …","Create a new instance of <code>Handle</code> using the given <code>Keyset</code> …","Create a set of primitives corresponding to the keys with …","Create a set of primitives corresponding to the keys with …","Return a <code>Handle</code> of the public keys if the managed keyset …","Attempt to create a <code>Handle</code> from an encrypted keyset …","Attempt to create a <code>Handle</code> from an encrypted keyset …","Attempt to create a <code>Handle</code> from a keyset obtained via a …","The public key that should be used for encrypting requests.","The public key that should be used for encrypting the …","","","","Serialises the attestation report to a binary …","Serialises the handle’s underlying keyset containing the …","","","","","","","","","","","","","","","","Validates the attestation associated with the public key …","","","","","","Encrypts and writes the enclosed <code>Keyset</code>.","Encrypts and writes the enclosed <code>Keyset</code> using the provided …","Export the keyset in <code>h</code> to the given <code>Writer</code> returning an …"],"i":[0,0,0,0,0,1,2,3,4,5,1,2,3,4,5,1,4,5,0,4,5,1,0,0,0,3,2,3,4,5,1,0,4,1,0,2,3,4,5,1,3,3,1,3,3,3,3,3,3,3,1,4,4,5,1,0,0,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,1,2,3,4,5,1,3,3,3],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["handle",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",6,[["attestationreport",3]]]],[[],["result",6,[["handle",3]]]],[[["handle",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[],["result",6,[["handle",3]]]],[[["",0]],["result",6,[["handle",3]]]],[[["",0]],["result",6,[["handle",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["keysetinfo",3]],[[["keytemplate",3]],["result",4,[["handle",3],["tinkerror",3]]]],[[["handle",3],["attestationreport",3]],["result",6]],[[["keyset",3]],["result",4,[["handle",3],["tinkerror",3]]]],[[["",0]],["result",4,[["primitiveset",3],["tinkerror",3]]]],[[["",0],["option",4,[["arc",3,[["keymanager",8]]]]]],["result",4,[["primitiveset",3],["tinkerror",3]]]],[[["",0]],["result",4,[["handle",3],["tinkerror",3]]]],[[["",0],["box",3,[["aead",8],["global",3]]]],["result",4,[["handle",3],["tinkerror",3]]]],[[["",0],["box",3,[["aead",8],["global",3]]]],["result",4,[["handle",3],["tinkerror",3]]]],[[["",0]],["result",4,[["handle",3],["tinkerror",3]]]],null,null,[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["attestationreport",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[["handle",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["",0],["",0],["box",3,[["aead",8],["global",3]]]],["result",4,[["tinkerror",3]]]],[[["",0],["",0],["box",3,[["aead",8],["global",3]]]],["result",4,[["tinkerror",3]]]],[[["",0],["",0]],["result",4,[["tinkerror",3]]]]],"p":[[3,"PublicKeyInfo"],[3,"AttestationReport"],[3,"Handle"],[3,"EncryptedRequest"],[3,"EncryptedResponse"]]},\
"runtime":{"doc":"","t":[0,5],"n":["framing","handle_frames"],"q":["runtime","runtime::framing"],"d":["",""],"i":[0,0],"f":[null,[[],["result",6,[["never",0]]]]],"p":[]},\
"rust_hypervisor_firmware_subset":{"doc":"","t":[0,0,0,0,0,0,5,5,5,5,0,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,7,11,11,11,11,11,11,11,4,13,13,13,13,8,10,11,11,11,11,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,11,11,11],"n":["common","device","mem","paging","pci","pvh","ram_min","stack_start","text_end","text_start","virtio","from_cstring","VirtioBaseDevice","borrow","borrow_mut","complete_init","configure_queue","from","get_config","into","new","notify_queue","start_init","try_from","try_into","type_id","MemoryRegion","as_bytes","as_mut_slice","borrow","borrow_mut","default","from","from_bytes","into","io_read_u16","io_read_u32","io_read_u64","io_read_u8","io_write_u16","io_write_u32","io_write_u64","io_write_u8","new","read_u16","read_u32","read_u64","read_u8","try_from","try_into","type_id","write","write_u16","write_u32","write_u64","write_u8","setup","PciDevice","VirtioPciTransport","add_status","borrow","borrow","borrow_mut","borrow_mut","default","default","from","from","get_features","get_queue_max_size","get_status","init","into","into","new","notify_queue","print_bus","read_device_config","reset","set_avail_ring","set_descriptors_address","set_features","set_queue","set_queue_enable","set_queue_size","set_status","set_used_ring","try_from","try_from","try_into","try_into","type_id","type_id","with_devices","Note","PVH_NOTE","borrow","borrow_mut","from","into","try_from","try_into","type_id","Error","FeatureNegotiationFailed","LegacyOnly","QueueTooSmall","UnsupportedDevice","VirtioTransport","add_status","borrow","borrow_mut","fmt","from","get_features","get_queue_max_size","get_status","init","into","notify_queue","read_device_config","reset","set_avail_ring","set_descriptors_address","set_features","set_queue","set_queue_enable","set_queue_size","set_status","set_used_ring","try_from","try_into","type_id"],"q":["rust_hypervisor_firmware_subset","","","","","","","","","","","rust_hypervisor_firmware_subset::common","rust_hypervisor_firmware_subset::device","","","","","","","","","","","","","","rust_hypervisor_firmware_subset::mem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_hypervisor_firmware_subset::paging","rust_hypervisor_firmware_subset::pci","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rust_hypervisor_firmware_subset::pvh","","","","","","","","","rust_hypervisor_firmware_subset::virtio","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","Device driver for virtio block over any transport","","","Completes the configuration of the device.","Sets the configuration for a queue and enables it.","Returns the argument unchanged.","Reads 32 bits of a config value from the transport.","Calls <code>U::from(self)</code>.","","Notifies the device that a queue has been updated.","Start Initialising the device.","","","","Provides a checked way to access memory offsets from a …","","Expose a section of the memory region as a slice","","","","Returns the argument unchanged.","Take a slice and turn it into a region of memory","Calls <code>U::from(self)</code>.","Read a single word at given offset with a mechanism …","Read a single dword at given offset with a mechanism …","Read a single qword at given offset with a mechanism …","Read a single byte at given offset with a mechanism …","Write a single word at given offset with a mechanism …","Write a single dword at given offset with a mechanism …","Write a single qword at given offset with a mechanism …","Write a single byte at given offset with a mechanism …","","Read a single word at a given offset","Read a single dword at a given offset","","Read a single byte at a given offset","","","","Write a value at the given offset","Write a single word at given offset","Write a single dword at given offset","Write a single qword at given offset","Write a single byte at given offset","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Virtio related errors","","","","","Trait to allow separation of transport from block driver","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,3,4,3,4,3,4,3,4,3,3,3,3,3,4,3,3,3,0,3,3,3,3,3,3,3,3,3,3,4,3,4,3,4,3,0,0,0,5,5,5,5,5,5,5,0,6,6,6,6,0,7,6,6,6,6,7,7,7,7,6,7,7,7,7,7,7,7,7,7,7,7,6,6,6],"f":[null,null,null,null,null,null,[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,[[["u64",0]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",4,[["virtioerror",4]]]],[[["",0],["u16",0],["u16",0],["u64",0],["u64",0],["u64",0]],["result",4,[["virtioerror",4]]]],[[]],[[["",0],["u64",0]],["u32",0]],[[]],[[]],[[["",0],["u16",0]]],[[["",0],["u32",0]],["result",4,[["virtioerror",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]]],[[["",0],["u64",0],["u64",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["memoryregion",3]],[[]],[[],["memoryregion",3]],[[]],[[["",0],["u64",0]],["u16",0]],[[["",0],["u64",0]],["u32",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u64",0]],["u8",0]],[[["",0],["u64",0],["u16",0]]],[[["",0],["u64",0],["u32",0]]],[[["",0],["u64",0],["u64",0]]],[[["",0],["u64",0],["u8",0]]],[[["u64",0],["u64",0]],["memoryregion",3]],[[["",0],["u64",0]],["u16",0]],[[["",0],["u64",0]],["u32",0]],[[["",0],["u64",0]],["u64",0]],[[["",0],["u64",0]],["u8",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["u64",0]]],[[["",0],["u64",0],["u16",0]]],[[["",0],["u64",0],["u32",0]]],[[["",0],["u64",0],["u64",0]]],[[["",0],["u64",0],["u8",0]]],[[]],null,null,[[["",0],["u32",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["pcidevice",3]],[[],["virtiopcitransport",3]],[[]],[[]],[[["",0]],["u64",0]],[[["",0]],["u16",0]],[[["",0]],["u32",0]],[[["",0],["u32",0]],["result",4,[["virtioerror",4]]]],[[]],[[]],[[["pcidevice",3]],["virtiopcitransport",3]],[[["",0],["u16",0]]],[[]],[[["",0],["u64",0]],["u32",0]],[[["",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u16",0]]],[[["",0]]],[[["",0],["u16",0]]],[[["",0],["u32",0]]],[[["",0],["u64",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["u16",0],["u16",0]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0],["u32",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0]],["u64",0]],[[["",0]],["u16",0]],[[["",0]],["u32",0]],[[["",0],["u32",0]],["result",4,[["error",4]]]],[[]],[[["",0],["u16",0]]],[[["",0],["u64",0]],["u32",0]],[[["",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u16",0]]],[[["",0]]],[[["",0],["u16",0]]],[[["",0],["u32",0]]],[[["",0],["u64",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"VirtioBaseDevice"],[3,"MemoryRegion"],[3,"VirtioPciTransport"],[3,"PciDevice"],[3,"Note"],[4,"Error"],[8,"VirtioTransport"]]},\
"tensorflow_client":{"doc":"Sends a series of TensorFlow Prediction Requests via the …","t":[3,5,11,11,11,11,11,11,0,11,11,11,11,11,11,5,0,11,11,11,11,11,12,11,12,3,3,3,3,7,7,7,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,5,5,12,12,11,11,11,11,11,11,11,11,11,12,11,12,12,5,5,11,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,0,11,0,12,12,0,11,12,12,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,0,13,13,13,4,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,12,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11],"n":["Opt","arg_max","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","data","from","from_arg_matches","into","into_app","into_app_for_update","into_request","main","proto","to_owned","try_from","try_into","type_id","update_from_arg_matches","uri","vzip","work_dir","DataItem","DataSet","Images","Iter","SOURCE_URL","TEST_IMAGES","TEST_LABELS","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cols","current_index","data","from","from","from","from","get_test_data","get_uncompressed","image","images","into","into","into","into","into_iter","into_request","into_request","into_request","into_request","items","iter","label","labels","maybe_download","new_image_tensor_proto","next","parse_images","parse_labels","read_be_u32","rows","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","DataType","DtBfloat16","DtBfloat16Ref","DtBool","DtBoolRef","DtComplex128","DtComplex128Ref","DtComplex64","DtComplex64Ref","DtDouble","DtDoubleRef","DtFloat","DtFloatRef","DtHalf","DtHalfRef","DtInt16","DtInt16Ref","DtInt32","DtInt32Ref","DtInt64","DtInt64Ref","DtInt8","DtInt8Ref","DtInvalid","DtQint16","DtQint16Ref","DtQint32","DtQint32Ref","DtQint8","DtQint8Ref","DtQuint16","DtQuint16Ref","DtQuint8","DtQuint8Ref","DtResource","DtResourceRef","DtString","DtStringRef","DtUint16","DtUint16Ref","DtUint32","DtUint32Ref","DtUint64","DtUint64Ref","DtUint8","DtUint8Ref","DtVariant","DtVariantRef","ResourceHandleProto","TensorProto","TensorShapeProto","VariantTensorDataProto","bool_val","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","container","dcomplex_val","default","default","default","default","default","device","dim","double_val","dtype","dtype","dtypes_and_shapes","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","equivalent","float_val","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_i32","get_hash","google","half_val","hash","hash_code","int64_val","int_val","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","is_valid","maybe_type_name","metadata","name","ne","ne","ne","ne","oak","partial_cmp","resource_handle_proto","resource_handle_val","scomplex_val","serving","set_dtype","string_val","tensor_content","tensor_shape","tensor_shape_proto","tensors","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_name","uint32_val","uint64_val","unknown_rank","variant_val","version_number","vzip","vzip","vzip","vzip","vzip","rpc","Aborted","AlreadyExists","Cancelled","Code","DataLoss","DeadlineExceeded","FailedPrecondition","Internal","InvalidArgument","NotFound","Ok","OutOfRange","PermissionDenied","ResourceExhausted","Status","Unauthenticated","Unavailable","Unimplemented","Unknown","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","code","default","default","details","encoded_len","eq","eq","equivalent","fmt","fmt","from","from","from_i32","get_hash","hash","into","into","into_request","into_request","is_valid","message","ne","partial_cmp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","encap","GrpcRequest","GrpcResponse","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","into_request","into_request","last","last","method_name","ne","ne","req_msg","rsp_msg","status","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","DtypeAndShape","borrow","borrow_mut","clear","clone","clone_into","default","dtype","dtype","encoded_len","eq","fmt","from","into","into_request","ne","set_dtype","shape","to_owned","try_from","try_into","type_id","vzip","ModelSpec","PredictRequest","PredictResponse","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","encoded_len","encoded_len","encoded_len","eq","eq","eq","fmt","fmt","fmt","from","from","from","inputs","into","into","into","into_request","into_request","into_request","model_spec","model_spec","model_spec","name","ne","ne","ne","output_filter","outputs","signature_name","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version_choice","vzip","vzip","vzip","Version","VersionChoice","VersionLabel","borrow","borrow_mut","clone","clone_into","encode","encoded_len","eq","fmt","from","into","into_request","merge","ne","to_owned","try_from","try_into","type_id","vzip","0","0","Dim","borrow","borrow_mut","clear","clone","clone_into","default","encoded_len","eq","fmt","from","into","into_request","name","ne","size","to_owned","try_from","try_into","type_id","vzip"],"q":["tensorflow_client","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_client::data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_client::prototensorflow_client::proto::google","tensorflow_client::proto::google::rpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_client::proto::oak","tensorflow_client::proto::oak::encap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_client::proto::resource_handle_proto","","","","","","","","","","","","","","","","","","","","","","","tensorflow_client::proto::serving","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_client::proto::serving::model_spec","","","","","","","","","","","","","","","","","","","","","tensorflow_client::proto::serving::model_spec::VersionChoice","","tensorflow_client::proto::tensor_shape_proto","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Utilities to fetch, parse and process MNIST data. Inspired …","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Wrapper for linking an image to its expected label.","An image data set used for testing.","A collection of images that all have the same width and …","Iterator to iterate over the items in the dataset.","","","","","","","","","","","","The width of each of the images in pixels.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the test data by parsing the data files. It will …","Gets the data file and decompresses it. Data files are …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The data for each of the images. Each image is represented …","","","","","","","","","","The height of each of the images in pixels.","","","","","","","","","","","","","","","","","(== suppress_warning documentation-presence ==) …","Float32 truncated to 16 bits.  Only for cast ops.","","","","Double-precision complex","","Single-precision complex","","","","Data types that all computation devices are expected to be …","Do not use!  These are only for parameters.  Every enum …","","","","","","","","","","","Not a legal value for DataType.  Used to indicate a …","Quantized int16","","Quantized int32","","Quantized int8","","Quantized uint16","","Quantized uint8","","","","","","","","","","","","","","Arbitrary C++ data types","","Protocol buffer representing a handle to a tensorflow …","Protocol buffer representing a tensor.","Dimensions of a tensor.","Protocol buffer representing the serialization format of …","DT_BOOL","","","","","","","","","","","","","","","","","","","","","","","","","","Container in which this resource is placed.","DT_COMPLEX128. dcomplex_val(2<em>i) and dcomplex_val(2</em>i+1) are …","","","","","","Unique name for the device containing the resource.","Dimensions of the tensor, such as {“input”, 30}, {“…","DT_DOUBLE.","Returns the enum value of <code>dtype</code>, or the default if the …","","Data types and shapes for the underlying resource.","","","","","","","","","","","DT_FLOAT.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>DataType</code>, or <code>None</code> if <code>value</code> is not a …","","","DT_HALF, DT_BFLOAT16. Note that since protobuf has no …","","Hash code for the type of the resource. Is only valid in …","DT_INT64","DT_INT32, DT_INT16, DT_UINT16, DT_INT8, DT_UINT8.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if <code>value</code> is a variant of <code>DataType</code>.","For debug-only, the name of the type pointed to by this …","Portions of the object that are not Tensors.","Unique name of this resource.","","","","","","","Nested message and enum types in <code>ResourceHandleProto</code>.","DT_RESOURCE","DT_COMPLEX64. scomplex_val(2<em>i) and scomplex_val(2</em>i+1) are …","","Sets <code>dtype</code> to the provided enum value.","DT_STRING","Serialized raw tensor content from either …","Shape of the tensor.  TODO(touts): sort out the 0-rank …","Nested message and enum types in <code>TensorShapeProto</code>.","Tensors contained within objects being serialized.","","","","","","","","","","","","","","","","","","","","","Name of the type of objects being serialized.","DT_UINT32","DT_UINT64","If true, the number of dimensions in the shape is unknown.","DT_VARIANT","Version number.","","","","","","","The operation was aborted, typically due to a concurrency …","The entity that a client attempted to create (e.g., file …","The operation was cancelled, typically by the caller.","The canonical error codes for Google APIs.","Unrecoverable data loss or corruption.","The deadline expired before the operation could complete. …","The operation was rejected because the system is not in a …","Internal errors.  This means that some invariants expected …","The client specified an invalid argument.  Note that this …","Some requested entity (e.g., file or directory) was not …","Not an error; returned on success","The operation was attempted past the valid range.  E.g., …","The caller does not have permission to execute the …","Some resource has been exhausted, perhaps a per-user …","The <code>Status</code> type defines a logical error model that is …","The request does not have valid authentication credentials …","The service is currently unavailable.  This is most likely …","The operation is not implemented or is not …","Unknown error.  For example, this error may be returned …","","","","","","","","","","","The status code, which should be an enum value of …","","","A list of messages that carry the error details.  There is …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Code</code>, or <code>None</code> if <code>value</code> is not a valid …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if <code>value</code> is a variant of <code>Code</code>.","A developer-facing error message, which should be in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The last field indicates that this is definitely the final …","","","","The body of the request. Usually a serialized protobuf …","The body of the response. Usually a serialized protobuf …","","","","","","","","","","","","Protocol buffer representing a pair of (data type, tensor …","","","","","","","Returns the enum value of <code>dtype</code>, or the default if the …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Sets <code>dtype</code> to the provided enum value.","","","","","","","Metadata for an inference request such as the model name …","PredictRequest specifies which TensorFlow model to run, as …","Response for PredictRequest on successful run.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Input tensors. Names of input tensor are alias names. The …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Nested message and enum types in <code>ModelSpec</code>.","Model Specification. If version is not specified, will use …","Effective Model Specification used to process …","Required servable name.","","","","Output filter. Names specified are alias names. The …","Output tensors.","A named signature to evaluate. If unspecified, the default …","","","","","","","","","","","","","Optional choice of which version of the model to use.","","","","Use this specific version number.","Optional choice of which version of the model to use.","Use the version associated with the given label.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","One dimension of the tensor.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Optional name of the tensor dimension.","","Size of the tensor in that dimension. This value must be …","","","","",""],"i":[0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,2,3,4,5,2,3,4,5,3,5,5,2,3,4,5,0,0,2,4,2,3,4,5,5,2,3,4,5,3,4,2,4,0,0,5,0,0,0,3,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,7,8,6,9,7,10,8,6,9,7,10,8,9,7,10,8,6,9,7,10,8,6,9,7,10,6,9,7,8,6,9,7,10,9,8,7,7,7,9,8,9,7,10,8,6,9,7,10,6,7,8,6,9,7,10,8,6,9,7,10,6,6,0,7,6,9,7,7,8,6,9,7,10,8,6,9,7,10,6,9,10,9,8,9,7,10,0,6,0,7,7,0,7,7,7,7,0,10,8,6,9,7,10,8,6,9,7,10,8,6,9,7,10,8,6,9,7,10,10,7,7,8,7,7,8,6,9,7,10,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,12,11,12,11,12,12,11,12,11,11,12,12,11,12,12,12,11,11,12,11,12,11,11,11,11,12,11,12,11,11,12,12,11,12,11,12,11,12,11,12,11,12,11,0,0,0,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,14,13,13,14,13,14,14,13,14,13,14,13,14,13,14,13,14,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,16,17,18,16,17,18,16,17,18,16,17,18,16,17,18,16,17,18,16,17,18,16,17,18,16,17,18,16,17,18,17,16,17,18,16,17,18,0,17,18,16,16,17,18,17,18,16,16,17,18,16,17,18,16,17,18,16,17,18,16,16,17,18,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,21,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],"f":[null,[[],["option",4,[["usize",0]]]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],null,[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[]],[[],["command",6]],[[],["command",6]],[[],["request",3]],[[],["result",6]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,[[]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[]],[[]],[[]],[[]],[[["str",0]]],[[["str",0],["str",0]]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],null,[[["",0]],["iter",3]],null,null,[[["str",0],["str",0]]],[[["usize",0],["usize",0]],["tensorproto",3]],[[["",0]],["option",4]],[[],["result",6,[["images",3]]]],[[],["result",6,[["vec",3,[["u8",0]]]]]],[[],["result",6,[["u32",0]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["tensorshapeproto",3]],[[["",0]],["datatype",4]],[[["",0]],["resourcehandleproto",3]],[[["",0]],["tensorproto",3]],[[["",0]],["varianttensordataproto",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["datatype",4]],["ordering",4]],null,null,[[]],[[],["datatype",4]],[[]],[[]],[[]],null,null,null,[[["",0]],["datatype",4]],null,null,[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["tensorshapeproto",3]],["bool",0]],[[["",0],["datatype",4]],["bool",0]],[[["",0],["resourcehandleproto",3]],["bool",0]],[[["",0],["tensorproto",3]],["bool",0]],[[["",0],["varianttensordataproto",3]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["i32",0]],["option",4,[["datatype",4]]]],[[["",0],["",0]],["u64",0]],null,null,[[["",0],["",0]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["i32",0]],["bool",0]],null,null,null,[[["",0],["tensorshapeproto",3]],["bool",0]],[[["",0],["resourcehandleproto",3]],["bool",0]],[[["",0],["tensorproto",3]],["bool",0]],[[["",0],["varianttensordataproto",3]],["bool",0]],null,[[["",0],["datatype",4]],["option",4,[["ordering",4]]]],null,null,null,null,[[["",0],["datatype",4]]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["status",3]],[[["",0]],["code",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["code",4]],["ordering",4]],null,[[]],[[],["code",4]],null,[[["",0]],["usize",0]],[[["",0],["status",3]],["bool",0]],[[["",0],["code",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["i32",0]],["option",4,[["code",4]]]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[["i32",0]],["bool",0]],null,[[["",0],["status",3]],["bool",0]],[[["",0],["code",4]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["grpcrequest",3]],[[["",0]],["grpcresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["grpcrequest",3]],["bool",0]],[[["",0],["grpcresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],null,null,null,[[["",0],["grpcrequest",3]],["bool",0]],[[["",0],["grpcresponse",3]],["bool",0]],null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["dtypeandshape",3]],[[["",0],["",0]]],[[]],[[["",0]],["datatype",4]],null,[[["",0]],["usize",0]],[[["",0],["dtypeandshape",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["request",3]],[[["",0],["dtypeandshape",3]],["bool",0]],[[["",0],["datatype",4]]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["modelspec",3]],[[["",0]],["predictrequest",3]],[[["",0]],["predictresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["modelspec",3]],["bool",0]],[[["",0],["predictrequest",3]],["bool",0]],[[["",0],["predictresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],null,null,null,null,[[["",0],["modelspec",3]],["bool",0]],[[["",0],["predictrequest",3]],["bool",0]],[[["",0],["predictresponse",3]],["bool",0]],null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["versionchoice",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["usize",0]],[[["",0],["versionchoice",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["request",3]],[[["option",4],["u32",0],["wiretype",4],["",0],["decodecontext",3]],["result",4,[["decodeerror",3]]]],[[["",0],["versionchoice",4]],["bool",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["dim",3]],[[["",0],["",0]]],[[]],[[["",0]],["usize",0]],[[["",0],["dim",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["request",3]],null,[[["",0],["dim",3]],["bool",0]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"Opt"],[3,"DataItem"],[3,"Images"],[3,"DataSet"],[3,"Iter"],[4,"DataType"],[3,"TensorProto"],[3,"TensorShapeProto"],[3,"ResourceHandleProto"],[3,"VariantTensorDataProto"],[4,"Code"],[3,"Status"],[3,"GrpcRequest"],[3,"GrpcResponse"],[3,"DtypeAndShape"],[3,"ModelSpec"],[3,"PredictRequest"],[3,"PredictResponse"],[4,"VersionChoice"],[13,"Version"],[13,"VersionLabel"],[3,"Dim"]]},\
"tensorflow_proxy":{"doc":"","t":[3,3,7,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,5,11,5,12,0,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,13,13,13,4,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11],"n":["ErrorLogger","Opt","SOCKET","augment_args","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","cleanup_socket_temp_file","clone","clone","clone_into","clone_into","fmt","from","from","from_arg_matches","grpc","into","into","into_app","into_app_for_update","into_request","into_request","launch_tf_model_server","log_error","main","port","proto","tf_model_base_path","tf_model_name","tf_server_path","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","vzip","vzip","wait_for_socket","BackendConnection","BytesCodec","BytesDecoder","BytesEncoder","FutureSyncWrapper","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","connect","create_client","decode","decoder","default","encode","encoder","from","from","from","from","from","handle_request","inner","into","into","into","into","into","into_future","into_request","into_request","into_request","into_request","into_request","poll","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","google","oak","rpc","Aborted","AlreadyExists","Cancelled","Code","DataLoss","DeadlineExceeded","FailedPrecondition","Internal","InvalidArgument","NotFound","Ok","OutOfRange","PermissionDenied","ResourceExhausted","Status","Unauthenticated","Unavailable","Unimplemented","Unknown","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone","clone_into","clone_into","cmp","code","default","default","details","encoded_len","eq","eq","equivalent","fmt","fmt","from","from","from_i32","get_hash","hash","into","into","into_request","into_request","is_valid","message","ne","partial_cmp","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","encap","GrpcRequest","GrpcResponse","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","into_request","into_request","last","last","method_name","ne","ne","req_msg","rsp_msg","status","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["tensorflow_proxy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_proxy::grpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_proxy::proto","","tensorflow_proxy::proto::google","tensorflow_proxy::proto::google::rpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tensorflow_proxy::proto::oak","tensorflow_proxy::proto::oak::encap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Connection to the prediction service that can be used for …","A Codec for encoding and decoding byte vectors to and from …","Passthrough decoder for decoding a <code>tonic::codec::DecodeBuf</code> …","Passthrough encoder for encoding a byte vector to an …","Utility wrapper to implement <code>Sync</code> for <code>Future</code>s by wrapping …","","","","","","","","","","","","Connects to the prediction service over UDS and returns …","Creates a new client.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The operation was aborted, typically due to a concurrency …","The entity that a client attempted to create (e.g., file …","The operation was cancelled, typically by the caller.","The canonical error codes for Google APIs.","Unrecoverable data loss or corruption.","The deadline expired before the operation could complete. …","The operation was rejected because the system is not in a …","Internal errors.  This means that some invariants expected …","The client specified an invalid argument.  Note that this …","Some requested entity (e.g., file or directory) was not …","Not an error; returned on success","The operation was attempted past the valid range.  E.g., …","The caller does not have permission to execute the …","Some resource has been exhausted, perhaps a per-user …","The <code>Status</code> type defines a logical error model that is …","The request does not have valid authentication credentials …","The service is currently unavailable.  This is most likely …","The operation is not implemented or is not …","Unknown error.  For example, this error may be returned …","","","","","","","","","","","The status code, which should be an enum value of …","","","A list of messages that carry the error details.  There is …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>i32</code> to a <code>Code</code>, or <code>None</code> if <code>value</code> is not a valid …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if <code>value</code> is a variant of <code>Code</code>.","A developer-facing error message, which should be in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","The last field indicates that this is definitely the final …","","","","The body of the request. Usually a serialized protobuf …","The body of the response. Usually a serialized protobuf …","","","","","","","","","","",""],"i":[0,0,0,1,1,1,2,1,2,0,1,2,1,2,1,1,2,1,0,1,2,1,1,1,2,0,2,0,1,0,1,1,1,1,2,1,2,1,2,1,2,1,1,2,0,0,0,0,0,0,3,4,5,6,7,3,4,5,6,7,3,3,3,5,7,7,4,7,3,4,5,6,7,0,6,3,4,5,6,7,6,3,4,5,6,7,6,3,4,5,6,7,3,4,5,6,7,6,3,4,5,6,7,3,4,5,6,7,0,0,0,8,8,8,0,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,9,8,9,8,9,9,8,9,8,8,9,9,8,9,9,9,8,8,9,8,9,8,8,8,8,9,8,9,8,8,9,9,8,9,8,9,8,9,8,9,8,9,8,0,0,0,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,10,11,10,11,11,10,11,10,11,10,11,10,11,10,11],"f":[null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",6]],[[["",0]],["opt",3]],[[["",0]],["errorlogger",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["request",3]],[[],["request",3]],[[["opt",3]],["result",6]],[[["",0],["str",0]]],[[],["result",6]],null,null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],[[]],[[["str",0]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["str",0]]],[[["",0]],["grpc",3,[["channel",3]]]],[[["",0],["decodebuf",3]],["result",4,[["option",4]]]],[[["",0]]],[[],["bytescodec",3]],[[["",0],["encodebuf",3]],["result",4]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[["grpc",3,[["channel",3]]],["vec",3,[["u8",0]]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["pin",3],["context",3]],["poll",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["pin",3],["context",3]],["poll",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]],["status",3]],[[["",0]],["code",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["code",4]],["ordering",4]],null,[[]],[[],["code",4]],null,[[["",0]],["usize",0]],[[["",0],["status",3]],["bool",0]],[[["",0],["code",4]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["i32",0]],["option",4,[["code",4]]]],[[["",0],["",0]],["u64",0]],[[["",0],["",0]]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[["i32",0]],["bool",0]],null,[[["",0],["status",3]],["bool",0]],[[["",0],["code",4]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["grpcrequest",3]],[[["",0]],["grpcresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["grpcrequest",3]],["bool",0]],[[["",0],["grpcresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],null,null,null,[[["",0],["grpcrequest",3]],["bool",0]],[[["",0],["grpcresponse",3]],["bool",0]],null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]]],"p":[[3,"Opt"],[3,"ErrorLogger"],[3,"BackendConnection"],[3,"BytesEncoder"],[3,"BytesDecoder"],[3,"FutureSyncWrapper"],[3,"BytesCodec"],[4,"Code"],[3,"Status"],[3,"GrpcRequest"],[3,"GrpcResponse"]]},\
"test_utils":{"doc":"Test utilities to help with unit testing of Oak-Functions …","t":[3,3,3,3,5,5,11,11,11,11,11,11,11,11,5,5,11,12,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Background","MockStaticServer","Term","TestResult","assert_response_body","background","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compile_rust_wasm","create_echo_wasm_module_bytes","default","elapsed","free_port","from","from","from","from","get_config_info","into","into","into","into","into_future","into_request","into_request","into_request","into_request","make_request","poll","response","serialize_entries","serve","set_response_body","terminate_and_join","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["test_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wrapper around a termination signal <code>oneshot::Sender</code> and …","A mock implementation of a static server that always …","A wrapper around a termination signal <code>oneshot::Receiver</code>.","","","Executes the provided closure passing to it a <code>Term</code> …","","","","","","","","","Uses cargo to compile a Rust manifest to Wasm bytes.","Create valid (release) Wasm bytecode for a minimal “echo…","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Serializes the provided map as a contiguous buffer of …","Starts serving, listening on the provided port.","Sets the content of the response body to return for any …","Sends the termination signal to the background task and …","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,3,4,1,2,3,4,0,0,4,3,0,1,2,3,4,0,1,2,3,4,2,1,2,3,4,0,2,3,0,4,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[null,null,null,null,[[["response",3],["str",0]]],[[],["background",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["str",0],["bool",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[],["vec",3,[["u8",0]]]],[[],["mockstaticserver",3]],null,[[],["u16",0]],[[]],[[]],[[]],[[]],[[["serverpolicy",3],["bool",0],["option",4,[["privatemetricsconfig",3]]]],["configurationinfo",3]],[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["u16",0]]],[[["pin",3],["context",3]],["poll",4]],null,[[["hashmap",3,[["vec",3,[["u8",0]]],["vec",3,[["u8",0]]]]]],["vec",3,[["u8",0]]]],[[["",0],["u16",0],["future",8]]],[[["",0],["vec",3,[["u8",0]]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"Background"],[3,"Term"],[3,"TestResult"],[3,"MockStaticServer"]]},\
"trusted_shuffler":{"doc":"Trusted Shuffler implementation.","t":[8,3,11,11,11,10,11,11,11,11,11,11],"n":["RequestHandler","TrustedShuffler","borrow","borrow_mut","from","handle","into","invoke","new","try_from","try_into","type_id"],"q":["trusted_shuffler","","","","","","","","","","",""],"d":["","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,1,1,1,2,1,1,1,1,1,1],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["",0],["vec",3,[["u8",0]]]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[["",0],["vec",3,[["u8",0]]]]],[[["usize",0],["option",4,[["duration",3]]],["arc",3,[["requesthandler",8]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"TrustedShuffler"],[8,"RequestHandler"]]},\
"trusted_shuffler_backend":{"doc":"Backend server for the Trusted Shuffler example.","t":[3,11,11,11,11,11,11,11,11,5,11,11,11,12,5,11,11,11,11,11],"n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","from","from_arg_matches","handler","into","into_app","into_app_for_update","listen_address","main","to_owned","try_from","try_into","type_id","update_from_arg_matches"],"q":["trusted_shuffler_backend","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["request",3,[["body",3]]]]],[[]],[[],["command",6]],[[],["command",6]],null,[[],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]]],"p":[[3,"Opt"]]},\
"trusted_shuffler_client":{"doc":"Client for the Trusted Shuffler example.","t":[3,11,11,11,11,11,11,11,11,11,11,11,5,12,12,12,11,11,11,11,11],"n":["Opt","augment_args","augment_args_for_update","borrow","borrow_mut","clone","clone_into","from","from_arg_matches","into","into_app","into_app_for_update","main","qps","seconds","server_url","to_owned","try_from","try_into","type_id","update_from_arg_matches"],"q":["trusted_shuffler_client","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[]],[[],["command",6]],[[],["command",6]],[[],["result",6]],null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]]],"p":[[3,"Opt"]]},\
"trusted_shuffler_common":{"doc":"","t":[5],"n":["send_request"],"q":["trusted_shuffler_common"],"d":[""],"i":[0],"f":[[[["str",0],["method",3]]]],"p":[]},\
"trusted_shuffler_server":{"doc":"Trusted Shuffler server.","t":[3,11,11,12,11,11,11,11,11,11,0,11,11,11,12,12,5,12,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11],"n":["Opt","augment_args","augment_args_for_update","backend_url","borrow","borrow_mut","clone","clone_into","from","from_arg_matches","http","into","into_app","into_app_for_update","k","listen_address","main","timeout_ms","to_owned","try_from","try_into","type_id","update_from_arg_matches","HttpRequestHandler","Service","ServiceBuilder","backend_url","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call","call","from","from","from","handle","into","into","into","new","poll_ready","poll_ready","trusted_shuffler","trusted_shuffler","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["trusted_shuffler_server","","","","","","","","","","","","","","","","","","","","","","","trusted_shuffler_server::http","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,2,2,3,4,2,3,4,3,4,2,3,4,2,2,3,4,4,3,4,3,4,2,3,4,2,3,4,2,3,4],"f":[null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["opt",3]],[[["",0],["",0]]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[],["command",6]],[[],["command",6]],null,null,[[],["result",6]],null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["request",3,[["body",3]]]]],[[["",0]]],[[]],[[]],[[]],[[["",0],["vec",3,[["u8",0]]]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[]],[[]],[[["usize",0],["option",4,[["duration",3]]],["str",0]]],[[["",0],["context",3]],["poll",4,[["result",4]]]],[[["",0],["context",3]],["poll",4,[["result",4]]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Opt"],[3,"HttpRequestHandler"],[3,"Service"],[3,"ServiceBuilder"]]},\
"uefi_client":{"doc":"","t":[3,17,11,11,11,11,5,12,11,11,11,11,11,11,11,5,12,12,11,11,11,11,11],"n":["Args","TEE_MEASUREMENT","augment_args","augment_args_for_update","borrow","borrow_mut","chat","expected_response","fmt","from","from_arg_matches","into","into_app","into_app_for_update","into_request","main","request","server","try_from","try_into","type_id","update_from_arg_matches","vzip"],"q":["uefi_client","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","expected response from the server. If not specified (with …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","message to be sent to the server. If not specified (with a …","address of the server","","","","",""],"i":[0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["attestationclient",3],["string",3]]],null,[[["",0],["formatter",3]],["result",6]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[]],[[],["command",6]],[[],["command",6]],[[],["request",3]],[[],["result",4,[["box",3,[["error",8]]]]]],null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]]],"p":[[3,"Args"]]},\
"uefi_loader":{"doc":"","t":[3,13,3,13,4,13,12,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,12,12,5,0,12,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,3,11,11,12,11,12,11,11,11,11,11,11,11,11,11,3,11,11,12,12,11,12,11,11,11,12,11,11,11,11,11,11,3,11,11,12,11,11,11,11,0,5,11,11,11,11,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,11,11,12,8,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,8,12,12,11,11,12,12,12,11,11,11,11,10,11,11,11,11,10],"n":["Args","Bios","CommsChannel","Crosvm","Mode","Uefi","app","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","crosvm","crosvm","eq","flush","fmt","fmt","from","from","from","from_arg_matches","inner","into","into","into","into_app","into_app_for_update","into_request","into_request","into_request","main","mode","ovmf","path_exists","qemu","qemu","read_exact","server","to_owned","to_possible_value","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","value_variants","vmm","vzip","vzip","vzip","write_all","Crosvm","borrow","borrow_mut","console","from","instance","into","into_request","kill","start","try_from","try_into","type_id","vzip","wait","Qemu","borrow","borrow_mut","comms","console","from","instance","into","into_request","kill","qmp","start","try_from","try_into","type_id","vzip","wait","EchoImpl","borrow","borrow_mut","channel","from","into","into_request","message","proto","server","try_from","try_into","type_id","vzip","UnaryRequest","UnaryResponse","body","body","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","encoded_len","encoded_len","eq","eq","fmt","fmt","from","from","into","into","into_request","into_request","ne","ne","session_id","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unary_session_server","vzip","vzip","0","UnarySession","UnarySessionServer","_Inner","accept_compression_encodings","borrow","borrow","borrow_mut","borrow_mut","call","call","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from_arc","inner","into","into","into_request","into_request","message","new","poll_ready","poll_ready","send_compression_encodings","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_interceptor","Params","Vmm","app","binary","borrow","borrow_mut","comms","console","firmware","fmt","from","into","into_request","kill","try_from","try_into","type_id","vzip","wait"],"q":["uefi_loader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi_loader::crosvm","","","","","","","","","","","","","","","uefi_loader::qemu","","","","","","","","","","","","","","","","","uefi_loader::server","","","","","","","","","","","","","","uefi_loader::server::proto","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi_loader::server::proto::unary_session_server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","uefi_loader::vmm","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","Path to the UEFI app or kernel to execute.","","","","","","","","","","","","Path to the <code>crosvm</code> binary.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Execution mode.","Path to the OVMF firmware file.","","","Path to the <code>qemu-system-x86_64</code> binary.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Links a sequence of messages, declaring them as part of a …","","","","","","","","","Generated server implementations.","","","","Generated trait containing gRPC methods that should be …","Service definition for unary communication with the …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Used to send a sequence of a messages for session key …","","","","","","","","","","","","","","","","","","Path to the binary to load into the VM.","Path to the VMM binary to execute.","","","Stream to use for communicating with the app inside the VM.","Stream to connect to the console of the VM.","Optional path to the firmware blob to pass to the VMM.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,1,0,1,0,1,2,2,2,3,1,2,3,1,2,1,1,0,2,1,3,1,2,3,1,2,2,3,3,1,2,2,2,3,1,2,0,2,2,0,0,2,3,0,1,1,3,1,2,3,1,2,3,1,2,2,1,0,3,1,2,3,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,6,6,6,6,6,6,6,0,0,6,6,6,6,0,0,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,8,7,7,8,7,8,7,8,7,8,0,7,8,9,0,0,0,10,9,10,9,10,10,10,9,10,9,10,9,10,9,10,10,10,9,10,9,10,11,10,10,10,10,9,10,9,10,9,10,9,10,9,10,10,0,0,12,12,12,12,12,12,12,12,12,12,12,13,12,12,12,12,13],"f":[null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["mode",4]],[[["",0],["",0]]],null,null,[[["",0],["mode",4]],["bool",0]],[[["",0]],["result",4]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],null,[[]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["result",4,[["box",3,[["error",8]]]]]],null,null,[[["str",0]],["result",4,[["string",3]]]],null,null,[[["",0]],["result",4]],null,[[["",0]]],[[["",0]],["option",4,[["possiblevalue",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,[[]],[[]],[[]],[[["",0]],["result",4]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],null,[[]],[[],["request",3]],[[["box",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["params",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],null,[[]],[[],["request",3]],[[["box",3]],["pin",3,[["box",3,[["future",8]]]]]],null,[[["params",3]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]],null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],[[],["request",3]],[[["",0],["request",3,[["unaryrequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],null,[[["socketaddr",4],["unboundedrequestsender",3,[["vec",3,[["u8",0]]],["result",6,[["vec",3,[["u8",0]]]]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["",0]]],[[["",0]],["unaryrequest",3]],[[["",0]],["unaryresponse",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0],["unaryrequest",3]],["bool",0]],[[["",0],["unaryresponse",3]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[["",0],["unaryrequest",3]],["bool",0]],[[["",0],["unaryresponse",3]],["bool",0]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["request",3]]],[[["",0],["request",3]]],[[["",0]]],[[["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["arc",3]]],null,[[]],[[]],[[],["request",3]],[[],["request",3]],[[["",0],["request",3,[["unaryrequest",3]]]],["pin",3,[["box",3,[["future",8]]]]]],[[]],[[["",0],["context",3]],["poll",4,[["result",4]]]],[[["",0],["context",3]],["poll",4,[["result",4]]]],null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[],["interceptedservice",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[],["request",3]],[[["box",3]],["pin",3,[["box",3,[["future",8]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],[[["",0]],["pin",3,[["box",3,[["future",8]]]]]]],"p":[[4,"Mode"],[3,"Args"],[3,"CommsChannel"],[3,"Crosvm"],[3,"Qemu"],[3,"EchoImpl"],[3,"UnaryRequest"],[3,"UnaryResponse"],[3,"_Inner"],[3,"UnarySessionServer"],[8,"UnarySession"],[3,"Params"],[8,"Vmm"]]},\
"virtio":{"doc":"Simple virtio drivers implemented based on polling.","t":[0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,13,13,13,18,18,3,13,13,13,13,13,13,3,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["queue","vsock","DeviceWriteOnlyQueue","DriverWriteOnlyQueue","Queue","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","from","from","from","get_avail_addr","get_desc_addr","get_used_addr","inner","inner","into","into","into","must_notify_device","new","new","read_next_used_buffer","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_buffer","packet","CreditRequest","CreditUpdate","Invalid","NO_RECEIVE","NO_SEND","Packet","Request","Response","Rst","Rw","Shutdown","Stream","VSockFlags","VSockOp","VSockType","all","bitand","bitand_assign","bitor","bitor_assign","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","complement","contains","difference","empty","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","get_buf_alloc","get_dst_cid","get_dst_port","get_flags","get_fwd_cnt","get_len","get_op","get_payload","get_src_cid","get_src_port","get_type","hash","insert","intersection","intersects","into","into","into","into","is_all","is_empty","ne","new","new_header_only","new_with_payload","not","partial_cmp","remove","set","set_buf_alloc","set_dst_cid","set_dst_port","set_flags","set_fwd_cnt","set_op","set_payload","set_src_cid","set_src_port","sub","sub_assign","symmetric_difference","to_owned","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from_primitive","try_from_primitive","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union"],"q":["virtio","","virtio::queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","virtio::vsock","virtio::vsock::packet","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","A queue where the descriptor buffers are only writable by …","A queue where the descriptor buffers are only writable by …","A container for a boxed virtqueue and its associated …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the address of the available ring.","Gets the address of the descriptor table.","Gets the address of the used ring.","The inner queue.","The inner queue.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the device wants to be notified of queue …","","","Reads the contents of the next used buffer from the queue, …","","","","","","","","","","Writes the data to a buffer and adds its descriptor to the …","Virtio vsock packet implementation.","Request for update on credit to calculate stream buffer …","Give update on credit to support flow control, either in …","","Indicates that no more payload data will be received.","Indicates that no more payload data will be senn.","","Connection request.","Connections accepted response.","Connection reset, either in reponse to a shutdown request …","Represents a data packet.","Connection shutdown request.","Only stream sockets are currently supported in the Virtio …","Flags about a socket connection.","Vsock Ops.","Socket Type.","Returns the set containing all flags.","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Returns the difference between the flags in <code>self</code> and <code>other</code>.","Returns an empty set of flags.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","Gets the size of the peer’s stream buffer.","Gets the destination CID.","Gets the destination port.","Gets the flags.","Gets the number of bytes that the peer has read out of the …","Gets the payload length.","Gets the op that the packet represents.","Gets the payload.","Gets the source CID.","Gets the source port.","Gets the type of socket the packet is intended for.","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","","Creates a new <code>Packet</code> from an existing buffer.","Creates a new control <code>Packet</code> with only a header.","Creates a new data <code>Packet</code> with the given payload length.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Sets the size of the stream buffer.","Sets the destination CID.","Sets the destination port.","Sets the flags.","Sets the number of bytes read from the stream buffer.","Sets the op that the packet represents.","Sets the payload of a data packet from a slice.","Sets the source CID.","Sets the source port.","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>."],"i":[0,0,0,0,0,1,2,3,1,2,3,1,2,1,2,3,3,3,3,1,2,1,2,3,3,1,2,2,1,2,3,1,2,3,1,2,3,1,0,4,4,4,5,5,0,4,4,4,4,4,6,0,0,0,5,5,5,5,5,5,5,5,7,4,5,6,7,4,5,6,5,5,5,5,5,5,5,4,5,6,5,4,5,5,5,5,5,6,7,4,5,6,5,5,5,5,7,7,7,7,7,7,7,7,7,7,7,5,5,5,5,7,4,5,6,5,5,5,7,7,7,5,5,5,5,7,7,7,7,7,7,7,7,7,5,5,5,5,5,7,4,4,5,6,6,4,6,7,4,5,6,7,4,5,6,5],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],null,null,[[]],[[]],[[]],[[["",0]],["bool",0]],[[]],[[]],[[["",0]],["option",4,[["vec",3,[["u8",0]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["option",4,[["usize",0]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["",0]]],[[["vsockflags",3]]],[[["",0]]],[[["",0]],["u32",0]],[[]],[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vsockflags",3]],[[["",0],["",0]]],[[["",0],["vsockflags",3]],["ordering",4]],[[]],[[["",0]],["bool",0]],[[]],[[]],[[["",0],["vsockop",4]],["bool",0]],[[["",0],["vsockflags",3]],["bool",0]],[[["",0],["vsocktype",4]],["bool",0]],[[["",0],["intoiterator",8]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u32",0]],["option",4]],[[["u32",0]]],[[["u32",0]]],[[["intoiterator",8]]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u32",0]],[[["",0]],["vsockflags",3]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["result",6,[["vsockop",4]]]],[[["",0]]],[[["",0]],["u64",0]],[[["",0]],["u32",0]],[[["",0]],["result",6,[["vsocktype",4]]]],[[["",0],["",0]]],[[["",0]]],[[]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["vsockflags",3]],["bool",0]],[[["vec",3,[["u8",0]]]],["result",6]],[[]],[[["usize",0]]],[[]],[[["",0],["vsockflags",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0],["bool",0]]],[[["",0],["u32",0]]],[[["",0],["u64",0]]],[[["",0],["u32",0]]],[[["",0],["vsockflags",3]]],[[["",0],["u32",0]]],[[["",0],["vsockop",4]],["result",6]],[[["",0]],["result",6]],[[["",0],["u64",0]]],[[["",0],["u32",0]]],[[]],[[["",0]]],[[]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["u16",0]],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[["u16",0]],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4,[["tryfromprimitiveerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]]],"p":[[3,"DriverWriteOnlyQueue"],[3,"DeviceWriteOnlyQueue"],[3,"Queue"],[4,"VSockOp"],[3,"VSockFlags"],[4,"VSockType"],[3,"Packet"]]},\
"weather_lookup":{"doc":"Oak Functions weather lookup example.","t":[5,5],"n":["init","main"],"q":["weather_lookup",""],"d":["",""],"i":[0,0],"f":[[[]],[[]]],"p":[]},\
"xtask":{"doc":"A utility binary to run tests and orchestrate examples and …","t":[13,13,4,7,11,11,0,5,0,0,5,0,0,0,5,11,0,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,14,11,11,11,0,3,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,3,7,11,11,11,11,11,11,11,12,11,11,11,11,3,5,5,5,5,11,11,11,11,5,5,5,12,5,11,11,5,5,11,5,11,11,11,17,4,13,13,17,17,3,17,13,3,8,13,3,3,3,13,4,3,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,12,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,12,11,11,11,11,11,11,11,11,12,11,12,12,5,5,5,5,5,5,5,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,13,13,3,13,13,3,3,3,13,3,4,13,3,13,3,4,3,13,13,13,3,3,13,13,13,3,13,13,13,13,3,13,13,13,13,3,13,13,3,13,8,8,3,4,4,3,13,3,13,3,4,4,3,13,13,13,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,10,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,12,5,12,10,11,11,11,10,11,12,5,12,12,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,4,3,12,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11],"n":["Check","Fix","FormatMode","PROCESSES","borrow","borrow_mut","check_build_licenses","check_format","check_license","check_todo","cleanup","diffs","examples","files","format","from","internal","into","main","match_cmd","run_bazel_build","run_bazel_test","run_bazel_tests","run_buildifier","run_cargo_clean","run_cargo_clippy","run_cargo_deny","run_cargo_doc","run_cargo_fmt","run_cargo_fuzz","run_cargo_test","run_cargo_tests","run_cargo_udeps","run_check_build_licenses","run_check_license","run_check_todo","run_ci","run_clang_format","run_clang_tidy","run_completion","run_embedmd","run_fuzz_targets_in_crate","run_hadolint","run_liche","run_markdownlint","run_prettier","run_shellcheck","run_tests","spread","try_from","try_into","type_id","vm","CheckBuildLicenses","borrow","borrow_mut","description","from","into","new","path","run","try_from","try_into","type_id","CheckLicense","borrow","borrow_mut","description","from","into","new","path","run","try_from","try_into","type_id","CheckTodo","PATTERN","borrow","borrow_mut","description","from","into","is_invalid_todo","new","path","run","try_from","try_into","type_id","ModifiedContent","add_affected_crates","add_affected_protos","affected_protos","all_affected_crates","borrow","borrow_mut","contains","contains_path","crates_affected_by_files","crates_affected_by_protos","directly_modified_crates","files","find_crate_toml_file","fmt","from","get_local_dependencies","imported_proto_files","into","modified_files","try_from","try_into","type_id","ALL_CLIENTS","Application","Bazel","Cargo","DEFAULT_EXAMPLE_BACKEND_RUST_TARGET","DEFAULT_SERVER_RUST_TARGET","Executable","NO_CLIENTS","Npm","OakExample","OakExampleSteps","OakFunctions","OakFunctionsApplication","OakFunctionsExample","Server","Shell","Target","WizerOpt","additional_args","additional_args","applications","applications","backends","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_docker","build_oak_functions_example","build_oak_functions_server_variants","build_rust_binary","build_wasm_module","clients","construct_application_build_steps","construct_application_build_steps","construct_application_build_steps","construct_backend_build_steps","construct_backend_run_steps","construct_server_run_step","construct_server_run_step","construct_server_run_step","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","example","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_backends","get_backends","get_build_client","get_build_client","has_oak_functions_application","input","into","into","into","into","into","into","into","into","name","new","options","output","run","run_client","run_clients","run_oak_functions_example","run_oak_functions_examples","run_oak_functions_server","run_wizer","server","server_variant","target","target","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wasm_path","wizer","0","additional_build_args","bazel_target","cargo_manifest","config","package_directory","script","affected_example_toml_filles","crate_manifest_files","example_toml_files","file_contains","is_bazel_file","is_build_file","is_cargo_package_file","is_cargo_toml_file","is_cargo_workspace_file","is_clang_format_file","is_dockerfile","is_example_toml_file","is_fuzzing_toml_file","is_html_file","is_ignored_entry","is_ignored_path","is_javascript_file","is_markdown_file","is_shell_script","is_source_code_file","is_toml_file","is_typescript_file","is_yaml_file","read_file","source_files","to_string","workspace_manifest_files","All","Base","BuildClient","BuildOakFunctionsExample","BuildOakFunctionsServerVariants","BuildServerOpt","CargoBinary","CargoManifest","CheckFormat","Cmd","Command","Commits","Completion","Completion","Context","Dependency","DependencySpec","DiffToMain","Error","Format","FuzzConfig","FuzzableExample","Json","Multiple","Ok","Opt","RunBazelTests","RunCargoClean","RunCargoClippy","RunCargoDeny","RunCargoFuzz","RunCargoFuzz","RunCargoTests","RunCargoUdeps","RunCi","RunOakExamplesOpt","RunOakFunctionsExamples","RunTests","RunTestsOpt","RunVmTest","Runnable","Running","RunningCmd","Scope","ServerVariant","ServerVariantIter","Single","SingleStatusResult","Skipped","Status","StatusResultValue","Step","StepResult","Text","Unsafe","WithBackground","all_dependencies_with_toml_path","application_variant","args","args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","back_idx","bin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_client","build_dependencies","build_docker","build_server","child","child","cleanup","client_additional_args","client_rust_target","client_rust_toolchain","client_variant","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmd","crate_name","current_dir","default","dependencies","depth","description","description","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","dev_dependencies","dry_run","eq","eq","eq","eq","eq","equivalent","error","example_name","examples","executable","failed_steps_prefixes","file_name","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","footer_long","footer_short","format_logs","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_str","from_str","get","get_hash","has_subcommand","hash","header","idx","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_app","into_app","into_app","into_app","into_app","into_app","into_app","into_app_for_update","into_app_for_update","into_app_for_update","into_app_for_update","into_app_for_update","into_app_for_update","into_app_for_update","into_iter","iter","keep_going","kill","kill","kill_process","len","len","logs","logs","manifest_path","margin","marker","name","name","ne","ne","ne","new","new","new","new_in_dir","next","next_back","nth","ok","opt","out_dir","partial_cmp","partial_cmp","path","path_to_executable","path_to_manifest","prefix","process_gone","remaining","result","result","result","root","run","run","run_server","run_step","scope","server_additional_args","server_rust_target","server_rust_toolchain","server_variant","size_hint","stderr","stderr","stdout","stdout","target_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","value","values","values_to_string","0","0","0","0","0","0","0","0","0","background","command","foreground","name","name","name","steps","Baremetal","Crosvm","Uefi","Variant","VariantIter","back_idx","binary_path","borrow","borrow","borrow_mut","borrow_mut","build_binary","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","get","idx","into","into","into_iter","iter","len","loader_mode","marker","next","next_back","nth","payload_crate_path","run_client","run_loader","run_variant","run_vm_test","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["xtask","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xtask::check_build_licenses","","","","","","","","","","","","xtask::check_license","","","","","","","","","","","","xtask::check_todo","","","","","","","","","","","","","","xtask::diffs","","","","","","","","","","","","","","","","","","","","","","","xtask::examples","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xtask::examples::Application","xtask::examples::Target","","","","","","xtask::files","","","","","","","","","","","","","","","","","","","","","","","","","","","xtask::internalxtask::internal::Command","","","","","","xtask::internal::Dependency","","xtask::internal::Scope","xtask::internal::Step","","","","","","","xtask::vm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Similar to the <code>vec!</code> macro, but also allows a “spread” …","","","","","A <code>Runnable</code> command that checks for the existence of BUILD …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","A <code>Runnable</code> command that checks for the existence of source …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","A <code>Runnable</code> command that checks for the existence of todos …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Checks if <code>crate_toml_path</code> has a direct or indirect …","Adds <code>proto_path</code> to the list of <code>affected_protos</code> if …","Returns the list of paths to all <code>.proto</code> files affected by …","Path to the <code>Cargo.toml</code> files for all crates that are …","","","","","","Returns the paths to <code>Cargo.toml</code> files of crates affected …","Returns the list of paths to <code>Cargo.toml</code> files for all …","List of modified files.","","","Returns the argument unchanged.","Returns paths to <code>Cargo.toml</code> files of local crates (crates …","Returns paths to all <code>.proto</code> files that <code>proto_file_path</code> …","Calls <code>U::from(self)</code>.","Get all the files that have been modified in the given …","","","","","Identify the application the server runs.","","","","","","","","Holds the components for running an example in Oak: a …","Construct run and build steps an <code>OakExample</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build every variant of the function server. It’s easier …","","","","Constructs application build steps.","","","Constructs build steps for the backends.","Recursively constructs run steps for the backends.","Constructs run step for the example server.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator of all known Cargo Manifest files that …","","","Return whether the provided path refers to a Bazel file (…","","Return whether the provided path refers to a <code>Cargo.toml</code> …","Return whether the provided path refers to a <code>Cargo.toml</code> …","Return whether the provided path refers to a …","Return whether the provided path refers to a source file …","","","Return whether the provided path refers to a <code>fuzz</code> crate …","","","Return whether to ignore the specified path. This is used …","","Return whether the provided path refers to a markdown file …","","Return whether the provided path refers to a source file …","","","","","Return an iterator of all the first-party and non-ignored …","","Return an iterator of all known Cargo Manifest files that …","","Production-like server variant, without logging or any of …","","","","","Partial information about a Cargo binary, as included in a …","Partial representation of Cargo manifest files.","","A single command.","","","","","Encapsulates all the local state relative to a step, and …","Partial representation of a dependency in a <code>Cargo.toml</code> …","Partial representation of a Json specification of a …","","","","Struct representing config files for fuzzing.","Config for building an example for fuzzing.","Json specification of a dependency.","","","","","","","","","","","","","Holds the options for running the example.","","","","","A task that can be run asynchronously.","A task that is currently running asynchronously.","","","","An iterator over the variants of Self","","","","A construct to keep track of the status of the execution. …","The outcome of an individual step of execution.","An execution step, which may be a single <code>Runnable</code>, or a …","","Plaintext specification of a dependency with only the …","Debug server with logging and experimental features enabled","","","","","Additional <code>libFuzzer</code> arguments passed through to the binary","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a description of the task, e.g. the command line …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Prints a footer that repeats information from the header.","Prints a footer that does not repeat information from the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Attempts to kill the running task.","","Returns the number of top-level steps or commands. The …","","","","Path to the Cargo.toml file for the example.","","","","Name of the example","","","","","","","","","","","","","Path to desired location of the .wasm file.","","","","Get path to the executable server binary for the server …","","","","","Returns the final result of the task, upon spontaneous …","","","","Starts the task and returns a <code>Running</code> implementation.","Run the provided command, printing a status message with …","","Run the provided step, printing out information about the …","","","","","","","","Returns an <code>AsyncRead</code> object to stream stderr logs from the …","","Returns an <code>AsyncRead</code> object to stream stdout logs from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Guarantees that the <code>error</code>, <code>ok</code>, and <code>remaining</code> counts are …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the variants of Self","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,2,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,5,5,5,5,0,0,0,5,0,5,5,0,0,5,0,5,5,5,0,0,6,6,0,0,0,0,6,0,0,7,0,0,0,6,0,0,8,9,10,11,11,10,11,7,12,13,8,6,9,10,11,7,12,13,8,6,9,0,0,0,0,0,0,11,14,10,12,14,14,14,10,12,8,11,7,12,13,8,6,9,10,11,7,12,13,8,6,9,10,11,7,12,13,8,6,9,14,10,14,10,11,13,10,11,7,12,13,8,6,9,11,10,10,13,0,0,0,0,0,0,0,11,8,12,9,10,11,7,12,13,8,6,9,10,11,7,12,13,8,6,9,10,11,7,12,13,8,6,9,12,12,15,16,17,16,17,18,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,0,22,22,0,0,0,22,0,0,20,0,22,0,0,0,20,23,22,0,0,24,25,23,0,22,22,22,22,0,22,22,22,22,0,22,22,0,22,0,0,0,0,0,0,25,0,23,0,0,0,0,24,21,25,26,27,28,29,30,31,27,32,33,34,29,30,31,27,32,33,34,29,22,22,35,26,36,25,37,28,38,30,22,31,27,20,32,21,35,33,34,29,26,39,24,40,41,42,43,23,44,36,25,37,28,38,30,22,31,27,20,32,21,35,33,34,29,26,39,24,40,41,42,43,23,44,27,26,27,27,36,38,34,27,32,32,32,30,22,31,27,20,32,21,35,33,34,29,43,23,44,30,22,31,27,20,32,21,35,33,34,29,43,23,44,30,29,28,21,26,36,45,28,21,26,39,24,40,41,42,26,30,20,21,24,40,23,23,43,27,41,28,37,31,36,22,31,27,20,32,21,33,34,29,26,39,24,40,41,42,43,23,36,36,0,36,25,37,28,38,30,22,31,27,20,32,21,35,33,34,29,26,39,24,40,41,42,43,23,44,30,22,31,27,32,33,34,29,20,21,35,23,22,23,36,35,36,25,37,28,38,30,22,31,27,20,32,21,35,33,34,29,26,39,24,40,41,42,43,23,44,30,31,27,32,33,34,29,30,31,27,32,33,34,29,35,21,30,38,46,0,25,35,30,44,42,36,35,39,42,20,24,40,37,28,43,28,35,35,35,43,36,42,24,40,40,21,21,36,0,43,46,38,44,36,45,28,27,0,30,27,33,33,33,35,38,46,38,46,29,30,22,31,27,20,32,21,35,33,34,29,43,23,44,36,43,23,36,25,37,28,38,30,22,31,27,20,32,21,35,33,34,29,26,39,24,40,41,42,43,23,44,36,25,37,28,38,30,22,31,27,20,32,21,35,33,34,29,26,39,24,40,41,42,43,23,44,36,25,37,28,38,30,22,31,27,20,32,21,35,33,34,29,26,39,24,40,41,42,43,23,44,43,30,22,31,27,32,33,34,29,44,37,0,47,48,49,50,51,52,53,54,55,56,57,56,57,58,56,58,59,59,59,0,0,60,59,59,60,59,60,0,59,60,59,60,59,59,59,59,60,60,60,59,60,60,59,60,59,60,60,60,60,59,0,0,0,0,60,59,60,59,59,60,59,60,59,60],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["scope",4]],["step",4]],null,null,[[]],null,null,null,[[["scope",4]],["step",4]],[[]],null,[[]],[[],["result",4,[["box",3,[["error",8]]]]]],[[["opt",3]],["step",4]],[[],["step",4]],[[],["step",4]],[[],["step",4]],[[["formatmode",4]],["step",4]],[[],["step",4]],[[["scope",4]],["step",4]],[[],["step",4]],[[["modifiedcontent",3]],["step",4]],[[["formatmode",4],["modifiedcontent",3]],["step",4]],[[["runcargofuzz",3]],["step",4]],[[["runtestsopt",3],["modifiedcontent",3]],["step",4]],[[["runtestsopt",3],["scope",4]],["step",4]],[[["scope",4]],["step",4]],[[["modifiedcontent",3]],["step",4]],[[["modifiedcontent",3]],["step",4]],[[["modifiedcontent",3]],["step",4]],[[],["step",4]],[[["formatmode",4]],["step",4]],[[],["step",4]],[[["completion",3]],["step",4]],[[["formatmode",4]],["step",4]],[[["path",3],["runcargofuzz",3]],["step",4]],[[],["step",4]],[[],["step",4]],[[["formatmode",4]],["step",4]],[[["formatmode",4]],["step",4]],[[],["step",4]],[[],["step",4]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["string",3]],[[]],[[]],[[["string",3]],["box",3]],null,[[["box",3],["opt",3]],["box",3,[["running",8]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["string",3]],[[]],[[]],[[["string",3]],["box",3]],null,[[["box",3],["opt",3]],["box",3,[["running",8]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["string",3]],[[]],[[]],[[["str",0]],["bool",0]],[[["string",3]],["box",3]],null,[[["box",3],["opt",3]],["box",3,[["running",8]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["pathbuf",3],["hashmap",3]]],[[["string",3],["vec",3]]],[[["modifiedcontent",3]],["vec",3,[["string",3]]]],[[["scope",4]],["modifiedcontent",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["str",0]],["bool",0]],[[["",0],["path",3]],["bool",0]],[[["modifiedcontent",3]],["modifiedcontent",3]],[[],["hashset",3,[["string",3]]]],[[["modifiedcontent",3]],["modifiedcontent",3]],null,[[["string",3]],["option",4,[["string",3]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[["path",3]],["vec",3,[["string",3]]]],[[["string",3]],["vec",3,[["string",3]]]],[[]],[[["scope",4]],["modifiedcontent",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["target",4],["buildclient",3]],["box",3,[["runnable",8]]]],[[["oakexample",3]],["step",4]],[[["runoakexamplesopt",3],["scope",4]],["step",4]],[[["buildserveropt",3]],["step",4]],[[["str",0],["buildserveropt",3]],["step",4]],[[["str",0],["target",4],["str",0]],["step",4]],null,[[["",0]],["vec",3,[["step",4]]]],[[["",0]],["vec",3,[["step",4]]]],[[["",0],["str",0]],["vec",3,[["step",4]]]],[[["",0]],["vec",3,[["step",4]]]],[[["",0],["step",4]],["step",4]],[[["",0],["step",4]],["step",4]],[[["",0],["step",4]],["step",4]],[[["",0],["oakfunctionsexample",3],["step",4]],["step",4]],[[],["server",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["hashmap",3]],[[["",0]],["hashmap",3]],[[["",0]],["buildclient",3]],[[["",0]],["buildclient",3]],[[["",0]],["bool",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["oakexample",3],["runoakexamplesopt",3]]],null,null,[[["executable",3],["buildclient",3],["vec",3,[["string",3]]]],["box",3,[["runnable",8]]]],[[["str",0],["executable",3],["buildclient",3],["vec",3,[["string",3]]]],["step",4]],[[["oakexample",3],["buildclient",3],["vec",3,[["string",3]]]],["step",4]],[[["oakfunctionsexample",3]],["step",4]],[[["runoakexamplesopt",3],["scope",4]],["step",4]],[[["server",3],["oakfunctionsapplication",3]],["box",3,[["runnable",8]]]],[[["str",0],["str",0]],["step",4]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["vec",3,[["string",3]]]],["box",3,[["iterator",8]]]],[[]],[[["scope",4]],["box",3,[["iterator",8]]]],[[["path",3],["str",0]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["direntry",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["bool",0]],[[["path",3]],["string",3]],[[]],[[["pathbuf",3]],["string",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["vec",3,[["string",3]]]],null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["command",6]],["command",6]],null,nullnull,null,null,null,[[["",0],["str",0]]],null,null,null,null,null,null,[[["",0]],["opt",3]],[[["",0]],["command",4]],[[["",0]],["completion",3]],[[["",0]],["runoakexamplesopt",3]],[[["",0]],["scope",4]],[[["",0]],["buildclient",3]],[[["",0]],["servervariant",4]],[[["",0]],["servervariantiter",3]],[[["",0]],["buildserveropt",3]],[[["",0]],["runtestsopt",3]],[[["",0]],["runcargofuzz",3]],[[["",0]],["status",3]],[[["",0]],["statusresultvalue",4]],[[["",0]],["singlestatusresult",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,[[]],null,[[["",0]],["usize",0]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["",0],["scope",4]],["bool",0]],[[["",0],["servervariant",4]],["bool",0]],[[["",0],["dependency",4]],["bool",0]],[[["",0],["dependencyspec",3]],["bool",0]],[[["",0],["statusresultvalue",4]],["bool",0]],[[["",0],["",0]],["bool",0]],null,null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["str",0]],["result",4]],[[["str",0]],["result",4]],[[["",0],["usize",0]],["option",4,[["servervariant",4]]]],[[["",0],["",0]],["u64",0]],[[["str",0]],["bool",0]],[[["",0],["",0]]],[[["",0]],["string",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[],["command",6]],[[]],[[],["servervariantiter",3]],null,[[["",0]]],[[["",0]]],[[["i32",0]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],null,null,null,[[["",0]],["string",3]],null,null,null,[[["",0],["scope",4]],["bool",0]],[[["",0],["dependency",4]],["bool",0]],[[["",0],["dependencyspec",3]],["bool",0]],[[]],[[["str",0]],["box",3]],[[["usize",0]]],[[["str",0],["path",3]],["box",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],null,null,null,[[["",0],["dependency",4]],["option",4,[["ordering",4]]]],[[["",0],["dependencyspec",3]],["option",4,[["ordering",4]]]],null,[[["",0]],["str",0]],[[["",0]],["str",0]],null,[[["i32",0]],["bool",0]],null,[[["box",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["box",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["box",3]],["pin",3,[["box",3,[["future",8]]]]]],[[["opt",3]]],[[["box",3],["opt",3]],["box",3,[["running",8]]]],[[["box",3],["opt",3]],["box",3,[["running",8]]]],null,[[["context",3],["step",4],["status",3]],["pin",3,[["box",3,[["future",8]]]]]],null,null,null,null,null,[[["",0]]],[[["",0]],["box",3,[["asyncread",8]]]],[[["",0]],["box",3,[["asyncread",8]]]],[[["",0]],["box",3,[["asyncread",8]]]],[[["",0]],["box",3,[["asyncread",8]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["context",3],["bool",0]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,[[],["string",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["str",0],["str",0]],["step",4]],[[["",0]],["variant",4]],[[["",0]],["variantiter",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["variant",4]],["bool",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["usize",0]],["option",4,[["variant",4]]]],null,[[]],[[]],[[]],[[],["variantiter",3]],[[["",0]],["usize",0]],[[["",0]],["str",0]],null,[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["usize",0]],["option",4]],[[["",0]],["str",0]],[[["str",0]],["step",4]],[[["variant",4]],["box",3,[["runnable",8]]]],[[["variant",4]],["step",4]],[[],["step",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"FormatMode"],[3,"CheckBuildLicenses"],[3,"CheckLicense"],[3,"CheckTodo"],[3,"ModifiedContent"],[4,"Target"],[4,"Application"],[3,"Server"],[3,"Executable"],[3,"OakFunctionsExample"],[3,"OakExample"],[3,"OakFunctionsApplication"],[3,"WizerOpt"],[8,"OakExampleSteps"],[13,"OakFunctions"],[13,"Cargo"],[13,"Bazel"],[13,"Npm"],[13,"Shell"],[4,"Scope"],[4,"ServerVariant"],[4,"Command"],[4,"StatusResultValue"],[4,"Dependency"],[4,"Step"],[3,"CargoManifest"],[3,"RunOakExamplesOpt"],[3,"Cmd"],[3,"RunCargoFuzz"],[3,"Opt"],[3,"Completion"],[3,"BuildClient"],[3,"BuildServerOpt"],[3,"RunTestsOpt"],[3,"ServerVariantIter"],[3,"Context"],[3,"StepResult"],[3,"RunningCmd"],[3,"CargoBinary"],[3,"DependencySpec"],[3,"FuzzConfig"],[3,"FuzzableExample"],[3,"Status"],[3,"SingleStatusResult"],[8,"Runnable"],[8,"Running"],[13,"RunOakFunctionsExamples"],[13,"BuildOakFunctionsExample"],[13,"BuildOakFunctionsServerVariants"],[13,"RunCargoTests"],[13,"RunCargoFuzz"],[13,"Completion"],[13,"Text"],[13,"Json"],[13,"Commits"],[13,"WithBackground"],[13,"Single"],[13,"Multiple"],[4,"Variant"],[3,"VariantIter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};